<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Xcode调试链优化(速度提升50&amp;#37+)</title>
      <link href="/2021-11-15/xcode-build-io-optimize/"/>
      <url>/2021-11-15/xcode-build-io-optimize/</url>
      
        <content type="html"><![CDATA[<p>Xcode是增量编译的，所以日常开发很多时候，我们都是改少量的代码或不改代码而重复调试，实际使用发现，从工程要跑到手机上调试仍然非常耗时，由于缓存的存在，编译可能不是最耗时的环节了，这里探究和优化影响<code>编译完成</code>到<code>App启动调试</code>速度的因素。</p><span id="more"></span><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这里只考虑DEBUG包，我们看一张Xcode打包日志细节图</p><img src="/images/post/xcodebuildopt/xcode_build_review.png" class="" width="600" title="Xcode编译时间"><p>上图选中的为主要耗时的步骤，可以看出，编译成功后，还有下面步骤较为耗时</p><ul><li>Linking</li><li>Embed Pod Frameworks</li><li>Copy Pods Resources</li><li>Custom Script（这里为自定义脚本，主要用于资源处理）</li><li>Sign</li></ul><blockquote><p>还有一个较为耗时的时间是<code>Deploy</code>，但Xcode并不没有输出Deploy的时间，后面使用<code>ideviceinstaller</code>工具单独测试，时间总体上与Xcode基本一致</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line"><span class="comment"># brew install ideviceinstaller</span></span><br><span class="line"></span><br><span class="line">begin=`<span class="built_in">date</span> <span class="string">&#x27;+%s&#x27;</span>`</span><br><span class="line"><span class="comment"># 这里直接拿编译好的app文件安装即可</span></span><br><span class="line">ideviceinstaller -i <span class="string">&#x27;xxx.ipa&#x27;</span></span><br><span class="line">end=`<span class="built_in">date</span> <span class="string">&#x27;+%s&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算时间差，单位s</span></span><br><span class="line"><span class="built_in">expr</span> <span class="variable">$begin</span> - <span class="variable">$end</span></span><br></pre></td></tr></table></figure><p>分析</p><ol><li>Linking: 合并静态资源与地址修正，考虑使用第三方更快的link工具<code>zld</code></li><li>Embed Pod Frameworks: 主要是处理动态库，拷贝到目标路径，主要影响是<code>动态库文件数量</code></li><li>Copy Pods Resources: 主要对文件资源拷贝，主要影响是<code>文件IO</code></li><li>Custom Script：这里是自定义脚本，主要是的图片文件的处理，主要是对图片文件进行展开，文件多则<code>文件IO</code>耗时长</li><li>Sign：对整个包签名，主要影响是文件数量和大小，文件多则<code>文件IO</code>耗时长</li><li>Deploy：主要是拷贝文件和签名校验，主要影响是文件数量，文件多则<code>文件IO</code>耗时长，文件大小影响首次安装，而二次安装会做差异拷贝，有缓存，影响会减小</li></ol><p>有上面可以看出，减少IO操作是一个可行的优化方向，项目中的图片资源是放到根目录的，由于项目中用到的图片非常多，直接使用目录管理，并且使用<code>Custom Script</code>脚本单独处理图片，把图片拷贝到包的根目录上，查看<code>xx直播</code>在编译完成后的包，总文件数为<code>9297</code>个, 其中<code>8821</code>个为图片，占<code>95%</code>，文件数量占比大，这意味着每次都要进行大量的IO操作，如果能减少文件的数量，就能减少整个流程的时间</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="关于IO问题"><a href="#关于IO问题" class="headerlink" title="关于IO问题"></a>关于IO问题</h3><p>对于图片，我们知道除了可以放到根目录，还有可以放到<code>Images.xcassets</code>，放到<code>Images.xcassets</code>的图片最终会被编译成<code>Assets.car</code>，这里考虑把png和jpg图片提前制作成<code>Assets.car</code>，在日常开发迭代过程中，项目中用到的图片不会频繁的变动，这里我们考虑提前把图片做成<code>Assets.car</code>，如果有变动，再重新编译一次，操作步骤如下</p><ol><li>如果项目已经存在<code>Images.xcassets</code>，则拷贝一份出来，在它的基础上添加图片</li><li>通过工具把所有图片构造成<code>xxx.imageset</code>，放到<code>Images.xcassets</code>里面，如</li></ol><p>把<code>bottom_logo@2x.png</code>和<code>bottom_logo@3x.png</code>构造成下面目录结构</p><pre><code><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── bottom_logo.imageset</span><br><span class="line">│   ├── Contents.json</span><br><span class="line">│   ├── bottom_logo@2x.png</span><br><span class="line">│   └── bottom_logo@3x.png</span><br></pre></td></tr></table></figure></code></pre><p>其中<code>Content.json</code>为</p><pre><code><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;idiom&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;universal&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;filename&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bottom_logo@2x.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;scale&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2x&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;idiom&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;universal&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;filename&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bottom_logo@3x.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;scale&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;3x&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;author&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;xcode&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></code></pre><ol start="2"><li>使用<code>actool</code>编译<code>Images.xcassets</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入</span></span><br><span class="line">xcassetPath=<span class="string">&quot;path/to/Images.xcassets&quot;</span></span><br><span class="line"><span class="comment"># 输出文件夹</span></span><br><span class="line">outputPath=<span class="string">&quot;path/to/outputpath&quot;</span></span><br><span class="line"></span><br><span class="line">dependenciesPath=<span class="string">&quot;path/to/outputpath/dependenciesPath&quot;</span></span><br><span class="line">generatedInfoPath=<span class="string">&quot;path/to/outputpath/generatedInfoPath&quot;</span></span><br><span class="line"></span><br><span class="line">/usr/bin/actool                                             \</span><br><span class="line">      --output-format <span class="string">&quot;human-readable-text&quot;</span>                 \</span><br><span class="line">      --notices                                             \</span><br><span class="line">      --export-dependency-info <span class="string">&quot;<span class="variable">$dependenciesPath</span>&quot;</span>          \</span><br><span class="line">      --output-partial-info-plist <span class="string">&quot;<span class="variable">$generatedInfoPath</span>&quot;</span>      \</span><br><span class="line">      --app-icon <span class="string">&quot;AppIcon&quot;</span>                                  \</span><br><span class="line">      --compress-pngs                                       \</span><br><span class="line">      --enable-on-demand-resources <span class="string">&quot;YES&quot;</span>                    \</span><br><span class="line">      --development-region <span class="string">&quot;English&quot;</span>                        \</span><br><span class="line">      --target-device <span class="string">&quot;iphone&quot;</span>                              \</span><br><span class="line">      --minimum-deployment-target <span class="string">&quot;9.0&quot;</span>                     \</span><br><span class="line">      --platform <span class="string">&quot;iphoneos&quot;</span>                                 \</span><br><span class="line">      --compile <span class="string">&quot;<span class="variable">$outputPath</span>&quot;</span> <span class="string">&quot;<span class="variable">$xcassetPath</span>&quot;</span></span><br></pre></td></tr></table></figure><p>编译后得到<code>Assets.car</code></p><ol start="3"><li>由于<code>Images.xcassets</code>已经编译好了，去掉工程对<code>Images.xcassets</code>的引用，并且把编译好的<code>Assets.car</code>引入工程，上面我们只把<code>jpg/png</code>图片编译进了<code>Assets.car</code>，对于其他文件（不多），这里我通过工具单独引入工程</li></ol><img src="/images/post/xcodebuildopt/xcode_xcassets.png" class="" width="800"><ol start="4"><li>把<code>Run Script</code>中的图片拷贝去掉，我这里的是去掉<code>Pods-xxx-resources.sh</code>文件中对图片资源的引用</li></ol><p>经过上面一番处理后，重新测试，数据对比如下</p><table><thead><tr><th></th><th>优化前</th><th>优化后</th></tr></thead><tbody><tr><td>Copy Pod Resources</td><td>11s</td><td>0.1s（减少97%）</td></tr><tr><td>Run Custom Script</td><td>32.5</td><td>0s(减少100%)</td></tr><tr><td>Sign</td><td>4.5</td><td>2.5s（减少45%）</td></tr></tbody></table><p>从上面的测试结果来看，速度提升效果显著</p><blockquote><p>因为优化后的方案有前置处理时间，需要把编译图片为<code>Assets.car</code>，这个时间没算上，上面的对比仅供参考</p></blockquote><p>需要注意的是，<code>Assets.car</code>的图片只能通过<code>UIImage.named(&quot;xxx&quot;)</code>读取，如果项目中是通过路径</p><p>上面的操作过于繁琐，这里我写了一个工具进行处理【一键操作】</p><img src="/images/post/xcodebuildopt/xcode_build_opt_tool.png" class="" width="800"><h3 id="关于Linking"><a href="#关于Linking" class="headerlink" title="关于Linking"></a>关于Linking</h3><p>有一个第三方的linking工具<a href="https://github.com/michaeleisel/zld">zld</a>，优化的缓存策略，在<code>Other Linker Flag</code>添加<code>-fuse-ld=&#39;/path/to/zld&#39; -Wl,-zld_original_ld_path,$(DT_TOOLCHAIN_DIR)/usr/bin/ld</code>即可</p><p>经测试，Linking时间从<code>15s</code>减少到<code>10.1s</code>，减少了<code>32%</code></p><h3 id="关于CodeSign"><a href="#关于CodeSign" class="headerlink" title="关于CodeSign"></a>关于CodeSign</h3><ol><li><p>Xcode默认使用<code>SHA-256</code>签名，我们可以改成更快的<code>SHA-1</code>，由于只是本地开发调试使用，不会有安全性问题，在<code>Other Code Signing Flags</code>添加<code>--digest-algorithm=sha1</code></p></li><li><p>iOS校验签名只会二进制的签名，其他文件不签名也不会报错，可以通过过滤文件减少签名的文件，在<code>Other Code Signing Flags</code>添加<code>--resource-rules=/path/to/rule.plist</code>，<code>rule.plist</code>文件如下</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>rules<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>.*<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">false</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>上面处理并不会影响正常开发，通过上面处理编译后的包<code>_CodeSignature/CodeResources</code>文件从<code>2.88 MB</code>减少到<code>589 Byte</code>，减少了<code>99.98%</code><br>Sign时间从<code>2.2s</code>减少到<code>0.5s</code>，减少了<code>77%</code></p><h3 id="关于Deploy"><a href="#关于Deploy" class="headerlink" title="关于Deploy"></a>关于Deploy</h3><p>由于<code>APFS</code>的特性，相同的文件不会深拷贝，省去拷贝的时间，由于文件数量大大减少，IO次数也大幅提高，如果不改动文件的话，基本可以达到秒启动，由于Xcode没有输出安装所有的时间，这里使用<code>ideviceinstaller</code>进行测试，这里把优化前后打出来的<code>xxx.app</code>安装到手机上（卸载），测试时间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ideviceinstaller</span></span><br><span class="line"><span class="comment"># brew install -HEAD libimobiledevice</span></span><br><span class="line"></span><br><span class="line">ideviceinstaller -i xxx.ipa</span><br></pre></td></tr></table></figure><p>优化前：<code>40s</code>，优化后：<code>18s</code>，时间减少了<code>55%</code></p><h2 id="综合统计"><a href="#综合统计" class="headerlink" title="综合统计"></a>综合统计</h2><h3 id="微观统计"><a href="#微观统计" class="headerlink" title="微观统计"></a>微观统计</h3><table><thead><tr><th></th><th>优化前</th><th>优化后</th></tr></thead><tbody><tr><td>Linking</td><td>15s</td><td>10.1s（下降32%）</td></tr><tr><td>Copy Pod Resources</td><td>11s</td><td>0.1（减少97%）</td></tr><tr><td>Run Custom Script</td><td>32.5s</td><td>0（下降100%)）</td></tr><tr><td>Sign</td><td>2.2s</td><td>0.5s（下降77%）</td></tr><tr><td>Deploy</td><td>40s</td><td>18s（下降55%）</td></tr><tr><td>汇总</td><td>100.7s</td><td>28.7s（下降71%）</td></tr></tbody></table><blockquote><p>数据来源：Xcode编译日志</p></blockquote><img src="/images/post/xcodebuildopt/xcode_io_time.png" class=""><h3 id="宏观统计"><a href="#宏观统计" class="headerlink" title="宏观统计"></a>宏观统计</h3><p>为了减少编译时间的影响，工程中大多数组件都使用二进制库，数据来源为Xcode编译打包后显示的时间（不包含Deploy和Run），如下</p><img src="/images/post/xcodebuildopt/xcode_build_time.png" class="" width="400"><table><thead><tr><th></th><th>首次</th><th>二次（修改代码）</th><th>二次（不改代码）</th></tr></thead><tbody><tr><td>优化前</td><td>88.75s</td><td>27.4s</td><td>9.2s</td></tr><tr><td>优化后</td><td>37.35s</td><td>14.2s</td><td>2.2s</td></tr><tr><td>对比</td><td>减少58%</td><td>减少48%</td><td>减少76%</td></tr></tbody></table> <img src="/images/post/xcodebuildopt/xcode_macro_time.png" class=""><blockquote><p>测试设备：Mac Mini M1 16G</p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过一段时间的使用，上面所有操作都是基于对开发效率的提升（for DEBUG），通过一些细节优化，可以把项目入侵降到最小，可以做到提高效率的同时，基本不影响日常开发</p><p>市面上大多数App包里面都会带非常多图片资源，图片太多确实会影响调试性能，减少图片数量从而减少IO次数，提升开发体验明显</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xx直播编译优化(减少372.7s)</title>
      <link href="/2021-09-27/fanxing-build-optimize/"/>
      <url>/2021-09-27/fanxing-build-optimize/</url>
      
        <content type="html"><![CDATA[<h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p><code>编译</code>对于开发者可以说是最为频繁的操作，编译速度的快慢会极大的影响我们的开发效率，对于xx直播App来说，由于代码量大，加上代码结构设计不合理等原因，导致编译速度非常慢，每次启动App（即使不改动代码）需要3分钟的时间才能跑在手机上，而一次完整的编译，则需要15分钟，严重影响日常的业务开发和调试，现阶段编译速度的优化显得尤为重要，主要的时间消耗有</p><span id="more"></span><ul><li>Compile</li><li>Linking</li><li>Run Script</li><li>Sign</li><li>Install（文件多可能是主因）</li></ul><p>其中<code>Compile</code>时间占用<code>90%</code>以上，这里只关注Compile</p><h2 id="二、调研"><a href="#二、调研" class="headerlink" title="二、调研"></a>二、调研</h2><p>Xcode是基于<code>llvm</code>编译的，llvm编译器的编译过程主要分为3个部分</p><ul><li>前端（Frontend）：负责解析源码，检查错误，生成抽象语法树（AST），并把 AST 转化成类汇编中间代码</li><li>优化器（Optimizer）：对中间代码进行架构无关的优化，提高运行效率，减少代码体积，例如无效代码，无用变量等</li><li>后端（Backend）：把中间代码转换成目标平台的机器码</li></ul><p>其中我们代码影响最大的<code>前端</code>，这里我们只关注前端，前端处理主要有</p><ol><li>预处理：这阶段的工作主要是</li><li>头文件展开处理</li><li>宏展开&#x2F;替换，预编译指令处理</li><li>注释去除处理</li><li>编译：这阶段做的事情比较多</li><li>词法分析（Lexical Analysis）：将代码转换成一系列 token</li><li>语法分析（Semantic Analysis）：将token树抽象语法树 AST</li><li>静态分析（Static Analysis）：检查代码错误，例如参数类型是否错误，调用对象方法是否有实现</li><li>中间代码生成（Code Generation）：将语法树自顶向下遍历逐步翻译成 LLVM IR</li></ol><p>llvm9.0之后添加了一个新的编译参数可以用于统计编译过程中各个阶段的耗时（<code>-ftime-trace</code>），利用该参数和编译器我们可以得到项目中所有文件编译的详细时间信息</p><h3 id="2-1-ftime-trace测试"><a href="#2-1-ftime-trace测试" class="headerlink" title="2.1 -ftime-trace测试"></a>2.1 -ftime-trace测试</h3><ol><li><p>下载llvm编译器，<code>9.0</code>以上的版本均可，解压后得到clang+llvm-9.0.0，我这里放到（~&#x2F;development&#x2F;clang+llvm-9.0.0）</p></li><li><p>在需要统计编译时间的Target中修改clang前端编译器（CC和CXX），和编译参数（OtherCFlag）</p> <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CC: <span class="regexp">/path/</span>to/clang</span><br><span class="line">CXX: <span class="regexp">/path/</span>to/clang++</span><br><span class="line">Other C Flag: 添加-ftime-trace</span><br></pre></td></tr></table></figure></li><li><p>关闭INDEX：<code>COMPILER_INDEX_STORE_ENABLE=NO</code></p></li><li><p>编译后，在目标文件（<code>xxx.o</code>）同个目录下，会生成<code>xxx.json</code>文件，如</p><ul><li>YYTimer.o</li><li>YYTimer.json</li></ul></li><li><p>整个json文件如下</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;traceEvents&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">21778</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">43204</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Module Load&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="string">&quot;UIKit&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">21329</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">44253</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Source&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="string">&quot;/Users/bomo/Documents/Code/iOS/Work/Analyze/4986-02-header2/FanXing/Pods/Target Support Files/KGThirdParty/KGThirdParty-prefix.pch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">66818</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">1868</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Source&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="string">&quot;/Users/bomo/Documents/Code/iOS/Work/Analyze/4986-02-header2/FanXing/Pods/KGThirdParty/KGThirdParty/YYKit/Utility/YYTimer.h&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">20679</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">70778</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Frontend&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">91457</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">595</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Frontend&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">94811</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">617</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;RunPass&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="string">&quot;AArch64 Assembly Printer&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">94084</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">1370</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;OptFunction&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="string">&quot;\u0001+[YYTimer timerWithTimeInterval:target:selector:repeats:]&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">95456</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">526</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;OptFunction&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="string">&quot;\u0001-[YYTimer init]&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">95983</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">1123</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;OptFunction&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="string">&quot;\u0001-[YYTimer initWithFireTime:interval:target:selector:repeats:]&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">93022</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">6873</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;OptModule&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span><span class="string">&quot;/Users/bomo/Documents/Code/iOS/Work/Analyze/4986-02-header2/FanXing/Pods/KGThirdParty/KGThirdParty/YYKit/Utility/YYTimer.m&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">93013</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">6977</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;CodeGenPasses&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">92061</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">8108</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Backend&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">66</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">100526</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;ExecuteCompiler&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">100526</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total ExecuteCompiler&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">100</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">71372</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total Frontend&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">35</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">46121</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total Source&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">23</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">4</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">43318</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total Module Load&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">14</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">5</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">8108</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total Backend&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">8</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">7094</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total OptModule&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">2</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">7</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">6977</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total CodeGenPasses&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">6</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">8</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">5819</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total OptFunction&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">40</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">9</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">5585</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total RunPass&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">729</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">10</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">479</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total DebugType&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">88</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">11</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">279</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total CodeGen Function&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">12</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">223</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total PerModulePasses&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">13</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">56</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total Module LoadIndex&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">14</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">21</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total PerFunctionPasses&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">15</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;X&quot;</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Total PerformPendingInstantiations&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;count&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;cat&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span><span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span><span class="string">&quot;M&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;process_name&quot;</span><span class="punctuation">,</span><span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;clang-10&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>可以用Chrome打开<code>chrome://tracing</code>，然后拖入该json文件，可以直观的看到各个阶段编译消耗的时间</p> <img src="/images/post/fanxingbuild/build_tracing.png" class="" width="1000"></li><li><p>这里摘取<code>YYTimer.json</code>里面的一个片段</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span> <span class="string">&quot;X&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span> <span class="number">66818</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span> <span class="number">1868</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Source&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/Users/bomo/Documents/Code/iOS/Work/FanXing/Pods/KGThirdParty/KGThirdParty/YYKit/Utility/YYTimer.h&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pid&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tid&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ph&quot;</span><span class="punctuation">:</span> <span class="string">&quot;X&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ts&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dur&quot;</span><span class="punctuation">:</span> <span class="number">100526</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Total ExecuteCompiler&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;count&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;avg ms&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p> 这里的<code>name=Source</code>为头文件YYTimer.h预编译处理的时间，dur为时间，单位为<code>微秒</code>，name&#x3D;Total ExecuteCompiler为该文件的编译时间</p></li></ol><h2 id="三、项目测试"><a href="#三、项目测试" class="headerlink" title="三、项目测试"></a>三、项目测试</h2><p>通过上面的方法，编译整个项目，并统计所有文件的预编译处理时间，我这里用<code>python</code>扫描所有编译文件，然后做汇总统计</p><h3 id="3-1-各编译阶段耗时"><a href="#3-1-各编译阶段耗时" class="headerlink" title="3.1 各编译阶段耗时"></a>3.1 各编译阶段耗时</h3><table><thead><tr><th>编译类型</th><th>耗时</th></tr></thead><tbody><tr><td>Total ExecuteCompiler:</td><td>5077.09 秒</td></tr><tr><td>Total Frontend:</td><td>3571.56 秒</td></tr><tr><td>Total Source:</td><td>2479.86 秒</td></tr><tr><td>Total Module Load:</td><td>1598.68 秒</td></tr><tr><td>Total Backend:</td><td>396.09 秒</td></tr><tr><td>Total CodeGenPasses:</td><td>373.86 秒</td></tr><tr><td>Total OptModule:</td><td>371.34 秒</td></tr><tr><td>Total OptFunction:</td><td>272.03 秒</td></tr><tr><td>Total RunPass:</td><td>263.66 秒</td></tr><tr><td>Total Module Compile:</td><td>142.07 秒</td></tr></tbody></table><p>从上面数据看出<code>Source</code>耗时最长，占用<code>2479.86s</code>，占比较大</p><h3 id="3-2-头文件引用次数（TOP10）"><a href="#3-2-头文件引用次数（TOP10）" class="headerlink" title="3.2 头文件引用次数（TOP10）"></a>3.2 头文件引用次数（TOP10）</h3><p> 通过上面生成的json文件可以得到 </p><table><thead><tr><th>头文件</th><th>引用次数</th><th>平均耗时</th></tr></thead><tbody><tr><td>******Common-prefix.pch</td><td>1619次</td><td>51.91毫秒</td></tr><tr><td>******Singleton.h</td><td>712次</td><td>6.01毫秒</td></tr><tr><td>******User-prefix.pch</td><td>701次</td><td>50.23毫秒</td></tr><tr><td>******GiftList.h</td><td>623次</td><td>10.22毫秒</td></tr><tr><td>******ModelObject.h</td><td>617次</td><td>3.42毫秒</td></tr><tr><td>******Constants.h</td><td>617次</td><td>1.86毫秒</td></tr><tr><td>******LiveInfo.h</td><td>612次</td><td>3.34毫秒</td></tr><tr><td>******ProgramInfo.h</td><td>612次</td><td>5.58毫秒</td></tr><tr><td>******AnimationView.h</td><td>612次</td><td>2.27毫秒</td></tr><tr><td>******ViewDefine.h</td><td>611次</td><td>2.75毫秒</td></tr></tbody></table><blockquote><p>注：这里的引用，包含间接引用 * A引用C * B引用A * D引用B</p></blockquote><p>则C被引用3次，会参与3次预编译处理，当D被引用100次时，A,B,C也会被引用处理100次，编译器在编译的时候会有其他优化策略，具体次数可能会细微差异 </p><h3 id="3-3-头文件单次预处理耗时（TOP10）"><a href="#3-3-头文件单次预处理耗时（TOP10）" class="headerlink" title="3.3 头文件单次预处理耗时（TOP10）"></a>3.3 头文件单次预处理耗时（TOP10）</h3><table><thead><tr><th>头文件</th><th>耗时（平均）</th><th>引用次数</th></tr></thead><tbody><tr><td>******ResultVC.h</td><td>31971.25毫秒</td><td>1</td></tr><tr><td>******ListView.h</td><td>17175.35毫秒</td><td>1</td></tr><tr><td>******ItemEntity.h</td><td>16750.17毫秒</td><td>1</td></tr><tr><td>******GuideView.h</td><td>16623.81毫秒</td><td>1</td></tr><tr><td>******RecommendView.h</td><td>15125.93毫秒</td><td>1</td></tr><tr><td>******DrawerCell.h</td><td>13072.67毫秒</td><td>2</td></tr><tr><td>******HelperMsgContainer.h</td><td>13055.01毫秒</td><td>2</td></tr><tr><td>******RecordCell.h</td><td>10176.65毫秒</td><td>2</td></tr><tr><td>******VerifyDao.h</td><td>7482.75毫秒</td><td>2</td></tr><tr><td>******AppealModel.h</td><td>7247.25毫秒</td><td>4</td></tr></tbody></table><blockquote><p>注：由于头文件会多级引用，所以处理时间会叠加，这里仅供参考</p></blockquote><h3 id="3-4-头文件预处理总耗时（TOP10）"><a href="#3-4-头文件预处理总耗时（TOP10）" class="headerlink" title="3.4 头文件预处理总耗时（TOP10）"></a>3.4 头文件预处理总耗时（TOP10）</h3><table><thead><tr><th>头文件</th><th>总耗时</th><th>引用次数</th></tr></thead><tbody><tr><td>****Common.h</td><td>939.64秒</td><td>610</td></tr><tr><td>****AlertView.h</td><td>267.89秒</td><td>608</td></tr><tr><td>****Common-prefix.pch</td><td>84.04秒</td><td>1619</td></tr><tr><td>****MesageParse.h</td><td>58.98秒</td><td>600</td></tr><tr><td>****RoomManager.h</td><td>43.77秒</td><td>598</td></tr><tr><td>****User-prefix.pch</td><td>35.21秒</td><td>701</td></tr><tr><td>****VideoInfoModel.h</td><td>34.40秒</td><td>10</td></tr><tr><td>****VideoModel.h</td><td>33.91秒</td><td>8</td></tr><tr><td>****ResultVC.h</td><td>31.97秒</td><td>1</td></tr><tr><td>****Data-umbrella.h</td><td>31.47秒</td><td>64</td></tr></tbody></table><blockquote><p>注：<code>xxxxCommon.h</code>文件引用次数不是最多，但总耗时最长</p></blockquote><h2 id="4-方案"><a href="#4-方案" class="headerlink" title="4. 方案"></a>4. 方案</h2><p>通过上面测试数据可以看出，<code>xxxxCommon.h</code>预处理耗时最长，通过查看该文件可以看出 </p><ul><li>该文件引用了非常多头文件（500+），完全展开的话会非常大，符合耗时的预期 </li><li>项目中很多地方引用<code>xxxxCommon.h</code>文件可能只是用到里面其中一个或几个类，而有些地方为了图方便，就引用了这个大而全的文件，而引用整个<code>xxxxCommon.h</code>导致而预处理却花去了大量非必要的时间</li></ul><p>这里决定给<code>xxxxCommon.h</code>文件进行瘦身，逐步把引用迁移到更轻量的头文件引用，并在具体的文件中补齐其他缺失的头文件，**<code>头文件按需引用，减少不必要的预编译处理</code>** </p><h2 id="5-成效"><a href="#5-成效" class="headerlink" title="5. 成效"></a>5. 成效</h2><ul><li>机器：iMac (Retina 4K, 21.5-inch, 2019)， </li><li>CPU: 3 GHz 六核Intel Core i5 * 内存：16 GB 2667 MHz DDR4 * 显卡：Radeon Pro 560X 4 GB </li><li>Configuration: <code>DEBUG</code> </li><li>编译架构：<code>arm64</code></li></ul><h3 id="5-1宏观统计（6核）（减少110-9s）"><a href="#5-1宏观统计（6核）（减少110-9s）" class="headerlink" title="5.1宏观统计（6核）（减少110.9s）"></a>5.1宏观统计（6核）（减少110.9s）</h3><p>测试方法：</p><ol><li>关闭Xcode，关闭Chrome等大进程 </li><li>删除所有Xcode缓存文件（<code>~/Library/Developer/Xcode/DerivedData/</code>） </li><li>打开Xcode编译 </li><li>编译完成后，查看Xcode显示的编译总时间 </li><li>测试结果去掉最高最低值</li></ol><table><thead><tr><th>宏观统计</th><th>测试1</th><th>测试2</th><th>测试3</th><th>测试4</th><th>平均</th></tr></thead><tbody><tr><td>基础工程</td><td>447.9</td><td>446.3</td><td>452.7</td><td>453.2</td><td>450.025</td></tr><tr><td>优化后工程</td><td>339.8</td><td>336.8</td><td>338.1</td><td>341.7</td><td>339.1</td></tr></tbody></table><blockquote><p>注：部分子库用了二进制，这里更多关注差值</p></blockquote><h3 id="5-2-微观统计（减少372-7s）"><a href="#5-2-微观统计（减少372-7s）" class="headerlink" title="5.2 微观统计（减少372.7s）"></a>5.2 微观统计（减少372.7s）</h3><p> 测试方法： </p><ol><li>使用上面提到的llvm自带统计工具，然后汇总结果统计所有文件的<code>Total ExecuteCompiler</code> </li><li>测试结果去掉最高最低值 </li><li>去掉所有的clang插件</li></ol><table><thead><tr><th>微观统计</th><th>测试1</th><th>测试2</th><th>测试3</th><th>平均</th></tr></thead><tbody><tr><td>基础工程</td><td>1449.3</td><td>1445.8</td><td>1456.3</td><td>1450.4</td></tr><tr><td>优化后工程</td><td>1076.8</td><td>1092.3</td><td>1064.1</td><td>1077.7</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>上面优化修改了<code>2115</code>个文件，工作量还是比较大的，主要还是编码习惯和长期未规范使用带来量变积累，导致质变，平时养成良好的编码习惯，减少量变积累</li><li>Xcode在编译的时候会把<code>#import &lt;AAA/BBB.h&gt;</code>自动转成<code>@import AAA.BBB</code>，为了统一风格，建议统一使用<code>#import &lt;AAA/BBB.h&gt;</code>方式引用，详情见<a href="https://developer.apple.com/videos/play/wwdc2013/404/">WWDC2013-Advances in Objective-C</a> </li><li>坚持一个原则：<strong>按需引用</strong>，<strong>按需引用</strong>（最小import原则），请引用<code>#import &lt;FAFuncUnit/XXX.h&gt;</code>，而不是<code>#import &lt;LibA/LibA-umbrella.h&gt;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（六）树莓派4B安装gitea</title>
      <link href="/2021-09-12/raspberrypi-gitea/"/>
      <url>/2021-09-12/raspberrypi-gitea/</url>
      
        <content type="html"><![CDATA[<p>最近git项目多了一些比较大的文件（数据库），第三方服务器的lfs基本都要收费，所以考虑自己搭建一个git服务器存放代码，关于git服务器有<code>gitea</code>，<code>gitlab</code>，gitlab功能太多，个人使用很多用不到，而且内存占用高，而gitea相对简洁，功能够用，选择gitea</p><span id="more"></span><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载gitea</span></span><br><span class="line">wget -O gitea https://dl.gitea.io/gitea/1.17.2/gitea-1.17.2-linux-arm64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x gitea</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>指定端口为<code>8899</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gitea web -p 8899</span><br></pre></td></tr></table></figure><p>访问<code>http://192.168.2.11:8899</code>就能进入gitea</p><img src="/images/post/raspberrypi/gitea_init.png" class="" width="600"><p>由于是自己用，我这里选择SQLite，配置完成后，会跳转到<code>http://localhost:3000/user/login</code>，由于服务在树莓派上，我们需要把localhost改为树莓派的地址，配置完成后会<code>custom/conf/app.ini</code>生成配置文件，我们需要吧localhost换成对应的地址，如果绑定了域名，可以换成域名</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">APP_NAME</span> = Gitea: Git with a cup of tea</span><br><span class="line"><span class="attr">RUN_USER</span> = ubuntu</span><br><span class="line"><span class="attr">RUN_MODE</span> = prod</span><br><span class="line"></span><br><span class="line"><span class="section">[server]</span></span><br><span class="line"><span class="attr">LOCAL_ROOT_URL</span>   = http://<span class="number">192.168</span>.<span class="number">2.11</span>:<span class="number">8899</span>/</span><br><span class="line"><span class="attr">SSH_DOMAIN</span>       = <span class="number">192.168</span>.<span class="number">2.11</span></span><br><span class="line"><span class="attr">DOMAIN</span>           = <span class="number">192.168</span>.<span class="number">2.11</span></span><br><span class="line"><span class="attr">HTTP_PORT</span>        = <span class="number">8899</span></span><br><span class="line"><span class="attr">ROOT_URL</span>         = http://<span class="number">192.168</span>.<span class="number">2.11</span>:<span class="number">8899</span>/</span><br><span class="line"><span class="attr">DISABLE_SSH</span>      = <span class="literal">false</span></span><br><span class="line"><span class="attr">SSH_PORT</span>         = <span class="number">22222</span></span><br><span class="line"><span class="attr">LFS_START_SERVER</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">LFS_JWT_SECRET</span>   = JU6s1q1kgPVDIIKHRzsUkjJ5HgUSBknJGN7FyKf-hgY</span><br><span class="line"><span class="attr">OFFLINE_MODE</span>     = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[database]</span></span><br><span class="line"><span class="attr">DB_TYPE</span>  = sqlite3</span><br><span class="line"><span class="attr">HOST</span>     = <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span></span><br><span class="line"><span class="attr">NAME</span>     = gitea</span><br><span class="line"><span class="attr">USER</span>     = gitea</span><br><span class="line"><span class="attr">PASSWD</span>   =</span><br><span class="line"><span class="attr">SCHEMA</span>   =</span><br><span class="line"><span class="attr">SSL_MODE</span> = disable</span><br><span class="line"><span class="attr">CHARSET</span>  = utf8</span><br><span class="line"><span class="attr">PATH</span>     = /home/ubuntu/server/gitea/data/gitea.db</span><br><span class="line"><span class="attr">LOG_SQL</span>  = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[repository]</span></span><br><span class="line"><span class="attr">ROOT</span> = /home/ubuntu/server/gitea/data/gitea-repositories</span><br><span class="line"></span><br><span class="line"><span class="section">[lfs]</span></span><br><span class="line"><span class="attr">PATH</span> = /home/ubuntu/server/gitea/data</span><br><span class="line"></span><br><span class="line"><span class="section">[mailer]</span></span><br><span class="line"><span class="attr">ENABLED</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[service]</span></span><br><span class="line"><span class="attr">REGISTER_EMAIL_CONFIRM</span>            = <span class="literal">false</span></span><br><span class="line"><span class="attr">ENABLE_NOTIFY_MAIL</span>                = <span class="literal">false</span></span><br><span class="line"><span class="attr">DISABLE_REGISTRATION</span>              = <span class="literal">false</span></span><br><span class="line"><span class="attr">ALLOW_ONLY_EXTERNAL_REGISTRATION</span>  = <span class="literal">false</span></span><br><span class="line"><span class="attr">ENABLE_CAPTCHA</span>                    = <span class="literal">false</span></span><br><span class="line"><span class="attr">REQUIRE_SIGNIN_VIEW</span>               = <span class="literal">false</span></span><br><span class="line"><span class="attr">DEFAULT_KEEP_EMAIL_PRIVATE</span>        = <span class="literal">false</span></span><br><span class="line"><span class="attr">DEFAULT_ALLOW_CREATE_ORGANIZATION</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">DEFAULT_ENABLE_TIMETRACKING</span>       = <span class="literal">true</span></span><br><span class="line"><span class="attr">NO_REPLY_ADDRESS</span>                  = noreply.localhost</span><br><span class="line"></span><br><span class="line"><span class="section">[picture]</span></span><br><span class="line"><span class="attr">DISABLE_GRAVATAR</span>        = <span class="literal">true</span></span><br><span class="line"><span class="attr">ENABLE_FEDERATED_AVATAR</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[openid]</span></span><br><span class="line"><span class="attr">ENABLE_OPENID_SIGNIN</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">ENABLE_OPENID_SIGNUP</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="section">[session]</span></span><br><span class="line"><span class="attr">PROVIDER</span> = file</span><br><span class="line"></span><br><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="attr">MODE</span>      = console</span><br><span class="line"><span class="attr">LEVEL</span>     = info</span><br><span class="line"><span class="attr">ROOT_PATH</span> = /home/ubuntu/server/gitea/log</span><br><span class="line"><span class="attr">ROUTER</span>    = console</span><br><span class="line"></span><br><span class="line"><span class="section">[repository.pull-request]</span></span><br><span class="line"><span class="attr">DEFAULT_MERGE_STYLE</span> = merge</span><br><span class="line"></span><br><span class="line"><span class="section">[repository.signing]</span></span><br><span class="line"><span class="attr">DEFAULT_TRUST_MODEL</span> = committer</span><br><span class="line"></span><br><span class="line"><span class="section">[security]</span></span><br><span class="line"><span class="attr">INSTALL_LOCK</span>       = <span class="literal">true</span></span><br><span class="line"><span class="attr">INTERNAL_TOKEN</span>     = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYmYiOjE2NjQ3NjIwMDR9.C0b_xPSiljfhuDChyKTnzKuVtvSMjZsFSr31RxRZYLA</span><br><span class="line"><span class="attr">PASSWORD_HASH_ALGO</span> = pbkdf2</span><br></pre></td></tr></table></figure><p>如果使用gitea内置的SSH服务器的话，需要添加<code>START_SSH_SERVER</code>开启服务</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[server]</span></span><br><span class="line">...</span><br><span class="line"><span class="attr">START_SSH_SERVER</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p>添加一个系统用户<code>gitea</code>用于执行<code>gitea</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户gitea，用户组为watchdog</span></span><br><span class="line">sudo adduser --system --ingroup watchdog --disabled-password --shell /bin/bash --no-create-home --gecos <span class="string">&#x27;Git Version Control&#x27;</span> gitea</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给用户添加文件权限</span></span><br><span class="line">sudo <span class="built_in">chown</span> -R gitea:watchdog /home/ubuntu/server/gitea</span><br></pre></td></tr></table></figure><p>添加开机启动脚本<code>/etc/systemd/system/gitea.service</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Gitea (Git with a cup of tea)</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line">#After=mysqld.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">RestartSec=2s</span><br><span class="line">User=gitea</span><br><span class="line">Group=watchdog</span><br><span class="line">UMask=0002</span><br><span class="line">WorkingDirectory=/home/ubuntu/server/gitea</span><br><span class="line">ExecStart=/home/ubuntu/server/gitea/gitea -c /home/ubuntu/server/gitea/custom/conf/app.ini -p 8899</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> gitea</span><br><span class="line"><span class="comment"># 关闭开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">disable</span> gitea</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo systemctl start gitea</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">sudo systemctl stop gitea</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">sudo systemctl restart gitea</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看状态</span></span><br><span class="line">sudo systemctl status gitea</span><br></pre></td></tr></table></figure><p>接下来就可以直接在web页面玩耍了</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（五）树莓派安装可道云</title>
      <link href="/2021-09-08/raspberrypi-kodexplorer/"/>
      <url>/2021-09-08/raspberrypi-kodexplorer/</url>
      
        <content type="html"><![CDATA[<p>文件管理的工具有很多，如<code>filebrowser</code>，<code>可道云</code>，<code>nextcloud</code>，<code>seafile</code>，几种都试过，最终觉得可道云最符合自己的操作习惯，可道云有两个版本，<code>kodbox</code>和 <code>kodexplorer</code>，kodbox为kodexplorer的重构版本，新增了一些功能，个人用我认为kodexplorer就够了</p><span id="more"></span><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>可道云是基于<code>php</code>开发的，这里需要先安装<code>apache2</code>和<code>php</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># apache2</span></span><br><span class="line">sudo apt install apache2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装php</span></span><br><span class="line">sudo apt install php</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">sudo apt install unzip</span><br></pre></td></tr></table></figure><p>安装php依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install php-curl php-mbstring </span><br></pre></td></tr></table></figure><p>下载可道云</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://static.kodcloud.com/update/download/kodexplorer4.46.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">unzip kodexplorer4.46.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动</span></span><br><span class="line">sudo <span class="built_in">mv</span> kodexplorer /var/www/kodexplorer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置权限</span></span><br><span class="line">sudo <span class="built_in">chmod</span> -R 777 /var/www/kodexplorer</span><br></pre></td></tr></table></figure><h2 id="配置apache2"><a href="#配置apache2" class="headerlink" title="配置apache2"></a>配置apache2</h2><p>修改<code>apache2</code>站点配置 <code>/etc/apache2/sites-available/000-default.conf</code>，添加端口<code>8081</code>用于可道云（也可以使用原来的80端口）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 这是apache默认的站点</span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">        ServerAdmin webmaster@localhost</span><br><span class="line">        DocumentRoot /var/www/html</span><br><span class="line"></span><br><span class="line">        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">        CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line"># 可道云</span><br><span class="line">&lt;VirtualHost *:8081&gt;</span><br><span class="line">        ServerAdmin webmaster@localhost</span><br><span class="line">        DocumentRoot /var/www/kodexplorer</span><br><span class="line">        </span><br><span class="line">        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">        CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>添加端口监听 <code>/etc/apache2/ports.conf</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Listen 80</span><br><span class="line"></span><br><span class="line"># 可道云端口</span><br><span class="line">NameVirtualHost *:8081</span><br><span class="line">Listen 8081</span><br><span class="line"></span><br><span class="line">&lt;IfModule ssl_module&gt;</span><br><span class="line">        Listen 443</span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule mod_gnutls.c&gt;</span><br><span class="line">        Listen 443</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p>配置完成后，重启<code>apache2</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure><p>这时候就可以访问可道云了 <code>http://192.168.2.*:8081</code></p><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p><code>apache2</code>默认使用的用户为<code>www-data</code>，这里给<code>www-data</code>添加组权限，这样管理文件方便点（这里我用的组是<code>watchdog</code>，可以根据自己的习惯或需要设置）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加www-data到组watchdog</span></span><br><span class="line">sudo gpasswd -a www-data watchdog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以www-data为watchdog组</span></span><br><span class="line">sudo usermod -g watchdog www-data</span><br></pre></td></tr></table></figure><h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><p>在<code>可道云</code>上默认的文件创建权限为<code>755</code>，可以到<code>config/config.php</code>修改，我自己是改为<code>774</code>，组内成员可以修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;DEFAULT_PERRMISSIONS&#x27;</span>,<span class="number">0755</span>);<span class="comment">//新建文件、解压文件默认权限，777 部分虚拟主机限制了777;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）树莓派安装Samba</title>
      <link href="/2021-09-05/raspberrypi-samba/"/>
      <url>/2021-09-05/raspberrypi-samba/</url>
      
        <content type="html"><![CDATA[<p>树莓派挂载了一个硬盘，用来存放文件，视频，照片，需要共享到其他设备查看，并且需要权限管理</p><p>常用的文件共享工具有</p><ul><li><code>DLNA</code>: 主要用于多媒体共享，没有权限管理，所有人都可以看到，由于视频是服务器解码，对于大码率（4K）视频支持比较好</li><li><code>Samba</code>: 主要用于局域网文件共享，支持权限控制，大码率视频支持较弱</li><li><code>FTP</code>: 速度比Samba快，支持权限控制</li></ul><span id="more"></span><p>我这里还是选择用<code>Samba</code>，因为电视和手机支持比较好，而对于大码率视频，则使用DLNA（minidlna），这里介绍安装samba的过程</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install samba</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置文件在<code>/etc/samba/smb.conf</code>，下面配置放到文件最后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[学习]</span><br><span class="line">  comment = 学习，可读写，只有bomo可以查看</span><br><span class="line">  path = /mnt/h1/learn</span><br><span class="line">  browseable = yes</span><br><span class="line">  writable = yes</span><br><span class="line">  available = yes</span><br><span class="line">  valid users = ubuntu,bomo</span><br><span class="line">  guest ok = no</span><br><span class="line">  </span><br><span class="line">[视频]</span><br><span class="line">  comment = 视频，所有人可以查看，只读</span><br><span class="line">  path = /home/ubuntu/git</span><br><span class="line">  browseable = yes</span><br><span class="line">  writable = no</span><br><span class="line">  available = yes</span><br><span class="line">  guest ok = yes  </span><br></pre></td></tr></table></figure><p>由于samba的用户必须是系统用户，这里我们创建用户<code>bomo</code>，并且不需要密码，不需要</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加系统用户bomo，属于组watchdog，无密码，不创建home目录</span></span><br><span class="line">sudo adduser --system --ingroup watchdog --disabled-password --shell /bin/bash --no-create-home bomo</span><br></pre></td></tr></table></figure><p>虽然samba的用户必须是系统用户，但是<code>密码</code>可以单独设置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置用户samba密码</span></span><br><span class="line">smbpasswd -a bomo</span><br></pre></td></tr></table></figure><p>设置完成，重启samba</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启samba</span></span><br><span class="line">sudo systemctl restart smbd</span><br></pre></td></tr></table></figure><p>接下来就可以在其他支持samba的设备发现并登录了</p><h2 id="设置文件权限"><a href="#设置文件权限" class="headerlink" title="设置文件权限"></a>设置文件权限</h2><p>安装<code>samba</code>的时候，会自动添加开机启动服务<code>/lib/systemd/system/smbd.service</code>，这里我们添加<code>UMask</code>和<code>Group</code>，方便管理文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Samba SMB Daemon</span><br><span class="line">Documentation=man:smbd(8) man:samba(7) man:smb.conf(5)</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network.target network-online.target nmbd.service winbind.service</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line">NotifyAccess=all</span><br><span class="line">PIDFile=/run/samba/smbd.pid</span><br><span class="line">User=root</span><br><span class="line">Group=watchdog</span><br><span class="line">UMask=0002</span><br><span class="line">LimitNOFILE=16384</span><br><span class="line">EnvironmentFile=-/etc/default/samba</span><br><span class="line">ExecStartPre=/usr/share/samba/update-apparmor-samba-profile</span><br><span class="line">ExecStart=/usr/sbin/smbd --foreground --no-process-group <span class="variable">$SMBDOPTIONS</span></span><br><span class="line">ExecReload=/bin/kill -HUP <span class="variable">$MAINPID</span></span><br><span class="line">LimitCORE=infinity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>刷新服务重启</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo systemctl restart smbd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）树莓派开机自动挂载硬盘</title>
      <link href="/2021-09-02/raspberrypi-mount-disk/"/>
      <url>/2021-09-02/raspberrypi-mount-disk/</url>
      
        <content type="html"><![CDATA[<p>我的硬盘是长期接在树莓派上的，这里设置开机自动挂载，避免重启后，读不到硬盘数据</p><span id="more"></span><h2 id="挂载硬盘"><a href="#挂载硬盘" class="headerlink" title="挂载硬盘"></a>挂载硬盘</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看硬盘，得到硬盘为/dev/sda1</span></span><br><span class="line">sudo fdisk -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要确保挂载的目录是存在的，如果不存在则创建</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/h1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 挂载硬盘</span></span><br><span class="line">sudo mount /dev/sdb1 /mnt/h1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 挂载硬盘可以设置目录的所属用户所属组和umask</span></span><br><span class="line">sudo mount -o <span class="built_in">umask</span>=0002,gid=watchdog,uid=ubuntu /dev/sdb1 /mnt/h1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消挂载</span></span><br><span class="line">sudo umount /dev/sdb1</span><br></pre></td></tr></table></figure><h2 id="自动挂载硬盘"><a href="#自动挂载硬盘" class="headerlink" title="自动挂载硬盘"></a>自动挂载硬盘</h2><ol><li>查看硬盘UUID<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查看硬盘uuid</span></span><br><span class="line">sudo blkid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出得到下面信息</span></span><br><span class="line">/dev/sda1: LABEL=<span class="string">&quot;pi&quot;</span> UUID=<span class="string">&quot;3E5F551D2B409931&quot;</span> TYPE=<span class="string">&quot;ntfs&quot;</span> PTTYPE=<span class="string">&quot;atari&quot;</span></span><br></pre></td></tr></table></figure></li></ol><p>得到UUID为：<code>3E5F551D2B409931</code></p><ol start="2"><li>开机挂载<code>/etc/fstab</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">UUID=<span class="string">&quot;3E5F551D2B409931&quot;</span> /mnt/h1 ntfs defaults 0 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所属用户，组，umask</span></span><br><span class="line">UUID=<span class="string">&quot;3E5F551D2B409931&quot;</span> /mnt/h1 ntfs user,rw,<span class="built_in">umask</span>=0002,uid=ubuntu,gid=watchdog 0 1</span><br></pre></td></tr></table></figure><p>使用 <code>df</code>命令查看硬盘挂载情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ubuntu:~$ <span class="built_in">df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">tmpfs             189000    4080    184920   3% /run</span><br><span class="line">tmpfs             944992       0    944992   0% /dev/shm</span><br><span class="line">tmpfs               5120       0      5120   0% /run/lock</span><br><span class="line">tmpfs               4096       0      4096   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda1      976760828 72838540 903922288   8% /mnt/h1</span><br></pre></td></tr></table></figure><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）树莓派4B自动控制风扇开关</title>
      <link href="/2021-08-28/raspberrypi-autofan/"/>
      <url>/2021-08-28/raspberrypi-autofan/</url>
      
        <content type="html"><![CDATA[<p>树莓派4B性能强大，发热也大，我在上面跑可道云和aria2，在没有风扇的情况下基本都要到60-70℃了，通常都会买个外壳接一个小风扇用于散热，淘宝上有很多，挑一个自己喜欢的，我这台设备加了风扇后可以稳定在40-50之间</p><p>默认情况下，风扇是随着电源开关控制的，即使关机了，风扇也会转，这里介绍使用三极管控制风扇开关的方法</p><span id="more"></span><img src="/images/post/raspberrypi/raspberrypi_fan.jpg" class="" width="300"><h2 id="接线引脚"><a href="#接线引脚" class="headerlink" title="接线引脚"></a>接线引脚</h2><p>树莓派4B的引脚如下图</p><img src="/images/post/raspberrypi/raspberrypi_pin.png" class="" width="400"><p>买来的风扇的正负极接4, 6引脚</p><h2 id="通过三极管添加控制线"><a href="#通过三极管添加控制线" class="headerlink" title="通过三极管添加控制线"></a>通过三极管添加控制线</h2><p>风扇接上树莓派引脚后就会开启，随电源开关，无法进行控制，关机的时候也会转，通常有两种方式</p><ol><li>使用三极管接线从而达到控制风扇的目的</li><li>taobao买T9温控模块（<a href="https://item.taobao.com/item.htm?id=553295324487%EF%BC%89">https://item.taobao.com/item.htm?id=553295324487）</a></li></ol><p>这里第一种方式，添加三极管</p><ul><li><code>三极管</code>，我这里用的是S8050（NPN型）的三极管<br>  我是在这里买的，2.8块钱50个</li><li><code>杜邦线-公对母</code>: 2根</li><li><code>杜邦线-母对母</code>: 2根</li></ul><p>三极管三级</p><img src="/images/post/raspberrypi/triode.jpg" class="" width="250"><p>接线示意图（分别接到4，6，12号引脚上）</p><img src="/images/post/raspberrypi/fan_wiring.png" class="" width="500"><p>效果图</p><img src="/images/post/raspberrypi/raspberrypi_fan_final.jpg" class="" width="800"><blockquote><p>有朋友可能买到的是S8850（PNP型）的三极管，接线和上面不一样，需要注意，可以参考这个链接，不过我没试过，<a href="https://blog.csdn.net/Xxy605/article/details/115960846">https://blog.csdn.net/Xxy605/article/details/115960846</a></p></blockquote><p>接完之后开机，会发现风扇默认是不转的，我们需要手动控制风扇的开关</p><h2 id="通过python脚本控制开关"><a href="#通过python脚本控制开关" class="headerlink" title="通过python脚本控制开关"></a>通过python脚本控制开关</h2><p>安装依赖文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3-pip</span><br><span class="line"></span><br><span class="line">sudo apt -y install python3-rpi.gpio</span><br><span class="line">sudo pip install RPi.GPIO</span><br></pre></td></tr></table></figure><p>下面脚本控制风扇开关</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制线接的是12号引脚</span></span><br><span class="line">FAN = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">GPIO.setwarnings(<span class="literal">False</span>)</span><br><span class="line">GPIO.setmode(GPIO.BOARD)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设为输出模式</span></span><br><span class="line">GPIO.setup(FAN, GPIO.OUT)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开风扇</span></span><br><span class="line">GPIO.output(FAN, GPIO.HIGH)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关风扇</span></span><br><span class="line">GPIO.output(FAN, GPIO.LOW)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设为输入模式</span></span><br><span class="line">GPIO.setup(FAN, GPIO.IN, pull_up_down=GPIO.PUD_UP)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取当前风扇状态</span></span><br><span class="line">isOff = GPIO.<span class="built_in">input</span>(FAN) == GPIO.LOW;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">GPIO.cleanup()</span><br></pre></td></tr></table></figure><p>可以<code>PWM</code>控制风扇的风速</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwm = GPIO.PWM(FAN, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 满速（0-100）</span></span><br><span class="line">pwm.start(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">pwm.stop()</span><br></pre></td></tr></table></figure><h2 id="查看CPU温度"><a href="#查看CPU温度" class="headerlink" title="查看CPU温度"></a>查看CPU温度</h2><p>通过读取文件<code>/sys/class/thermal/thermal_zone0/temp</code>获得CPU温度</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前CPU温度</span></span><br><span class="line"><span class="built_in">cat</span> /sys/class/thermal/thermal_zone0/temp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 观察CPU温度，每秒更新一次</span></span><br><span class="line">watch -n 1 <span class="built_in">cat</span> /sys/class/thermal/thermal_zone0/temp</span><br></pre></td></tr></table></figure><h2 id="温控风扇脚本"><a href="#温控风扇脚本" class="headerlink" title="温控风扇脚本"></a>温控风扇脚本</h2><p>下面是通过温度控制风扇开关的脚本（由于我的风扇比较小，就没有考虑控制风速，只做开关）</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> RPi.GPIO <span class="keyword">as</span> GPIO</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 控制风扇的GPIO</span></span><br><span class="line">FAN_GPIO = <span class="number">12</span></span><br><span class="line"><span class="comment"># 低温阈值，低于它则关闭风扇</span></span><br><span class="line">MIN_TEMP = <span class="number">45</span></span><br><span class="line"><span class="comment"># 高温阈值，高于它则全速运转</span></span><br><span class="line">MAX_TEMP = <span class="number">50</span></span><br><span class="line"><span class="comment"># 多长时间读取一次CPU温度，单位秒</span></span><br><span class="line">SAMPLING = <span class="number">60</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 单位为千分之一度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cpu_temp</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/sys/class/thermal/thermal_zone0/temp&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        cpu_temp = <span class="built_in">int</span>(f.read())</span><br><span class="line">    <span class="keyword">return</span> cpu_temp</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    GPIO.setwarnings(<span class="literal">False</span>)</span><br><span class="line">    GPIO.setmode(GPIO.BOARD)</span><br><span class="line">    GPIO.setup(FAN_GPIO, GPIO.OUT)</span><br><span class="line">    GPIO.output(FAN_GPIO, GPIO.LOW) </span><br><span class="line">    </span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            temp = get_cpu_temp()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;CPU temperature:&#x27;</span>, temp)</span><br><span class="line">            <span class="keyword">if</span> temp &lt; MIN_TEMP * <span class="number">1000</span>:</span><br><span class="line">                GPIO.output(FAN_GPIO, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">elif</span> temp &gt; MAX_TEMP * <span class="number">1000</span>:</span><br><span class="line">                GPIO.output(FAN_GPIO, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 中间地带，开</span></span><br><span class="line">                GPIO.output(FAN_GPIO, <span class="number">1</span>)</span><br><span class="line">            time.sleep(SAMPLING)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    GPIO.cleanup()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>脚本保存到<code>/home/ubuntu/server/fan/autofan.py</code></p><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p>创建service（<code>/etc/systemd/system/autofan.service</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=auto fan control</span><br><span class="line">After=syslog.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">RestartSec=2s</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line">WorkingDirectory=/home/ubuntu/server/fan/</span><br><span class="line">ExecStart=/usr/bin/python3 /home/ubuntu/server/fan/autofan.py</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>刷新并加载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重新加载配置  </span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"><span class="comment"># 开机启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> autofan</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">sudo systemctl start autofan</span><br><span class="line"><span class="comment"># 状态</span></span><br><span class="line">sudo systemctl status autofan</span><br></pre></td></tr></table></figure><p>之后每次重启都会自动根据温度开关风扇了</p>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）树莓派4B开机</title>
      <link href="/2021-08-27/raspberrypi-start/"/>
      <url>/2021-08-27/raspberrypi-start/</url>
      
        <content type="html"><![CDATA[<p>最近上手了一个树莓派4B，这里记录安装系统和连接的过程的，由于没有mini hdmi线，需要提前做一些设置</p><span id="more"></span><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="1-下载镜像写入工具"><a href="#1-下载镜像写入工具" class="headerlink" title="1. 下载镜像写入工具"></a>1. 下载镜像写入工具</h3><p>用官方的<a href="https://www.raspberrypi.org/software">Raspberry Pi Imager</a>就行</p><h3 id="2-下载系统"><a href="#2-下载系统" class="headerlink" title="2. 下载系统"></a>2. 下载系统</h3><ul><li>官方系统: <a href="https://www.raspberrypi.org/software/operating-systems">https://www.raspberrypi.org/software/operating-systems</a></li><li>ubuntu: <a href="https://ubuntu.com/download/raspberry-pi">https://ubuntu.com/download/raspberry-pi</a></li><li>其他: <a href="https://www.raspberrypi.org/software/operating-systems">https://www.raspberrypi.org/software/operating-systems</a></li></ul><p>树莓派虽然很强大，但还是很难作为真正的生产力，大多数情况还是作为服务，我没有选择Desktop版本，而是选择<code>Ubuntu Server 20.04 TLS</code></p><h3 id="3-写入TF卡"><a href="#3-写入TF卡" class="headerlink" title="3. 写入TF卡"></a>3. 写入TF卡</h3><img src="/images/post/raspberrypi/raspberrypi_burn.png" class="" width="500"><h3 id="4-SSH连接"><a href="#4-SSH连接" class="headerlink" title="4. SSH连接"></a>4. SSH连接</h3><p>特别是没法外接显示器的，第一步只能通过SSH连接，烧录完成后，先不急着开机，会提示拔出卡，重新插入tf卡，可以看到<code>system-boot</code>分区，这里我们在里面新建一个空的文本文件，命名为<code>SSH</code>，这样开机后就可以通过SSH连接了</p><h3 id="5-wifi设置"><a href="#5-wifi设置" class="headerlink" title="5. wifi设置"></a>5. wifi设置</h3><p>如果你<code>没有网线</code>，也没有外接屏幕，可以设置wifi信息，树莓派在启动后会自动连接wifi，在<code>system-boot</code>分区根目录有个<code>network-config</code>文件，可以配置无线网络，找到<code>wifis</code>相关配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">wifis:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> wlan0:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   dhcp4: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   optional: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   access-points:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     myhomewifi:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       password: <span class="string">&quot;S3kr1t&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     myworkwifi:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       password: <span class="string">&quot;correct battery horse staple&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">     workssid:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">       auth:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">         key-management: eap</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">         method: peap</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">         identity: <span class="string">&quot;me@example.com&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">         password: <span class="string">&quot;passw0rd&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">         ca-certificate: /etc/my_ca.pem</span></span><br></pre></td></tr></table></figure><p>修改为（SSID: HomeWifi，密码：12345678）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wifis:</span></span><br><span class="line">  <span class="attr">wlan0:</span></span><br><span class="line">    <span class="attr">dhcp4:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">access-points:</span></span><br><span class="line">      <span class="attr">&quot;HomeWifi&quot;:</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">&quot;12345678&quot;</span></span><br></pre></td></tr></table></figure><h3 id="6-关闭LED指示灯"><a href="#6-关闭LED指示灯" class="headerlink" title="6. 关闭LED指示灯"></a>6. 关闭LED指示灯</h3><p>可以通过<code>config.txt</code>文件的<code>[pi4]</code>下面添加下面命令关闭</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 关闭电源指示灯(红色)</span><br><span class="line">dtparam=pwr_led_trigger=none</span><br><span class="line">dtparam=pwr_led_activelow=off</span><br><span class="line"></span><br><span class="line"># 关闭活动指示灯(绿色)</span><br><span class="line">dtparam=act_led_trigger=none</span><br><span class="line">dtparam=act_led_activelow=off</span><br><span class="line"></span><br><span class="line"># 关闭网线口指示灯</span><br><span class="line">dtparam=eth_led0=4</span><br><span class="line">dtparam=eth_led1=4</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>TF卡插入树莓派通电即可，通过<code>路由器</code>可以看到树莓派连接的IP地址（如：192.168.2.*），通过ssh连接</p><ul><li><code>ubuntu</code>系统默认用户名和密码都是<code>ubuntu</code></li><li>官方系统的默认用户名和密码是<code>pi</code>和<code>raspberry</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ubuntu@192.168.2.*</span><br></pre></td></tr></table></figure><p>接下来就可以愉快的玩耍了</p><h2 id="通过VNC连接"><a href="#通过VNC连接" class="headerlink" title="通过VNC连接"></a>通过VNC连接</h2><p>如果你安装的是官方的系统，则可以通过VNC连接到树莓派，而不用外接屏幕</p><p>通过ssh连接到树莓派后，进入设置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>选择<code>Interfacing Options</code> -&gt; <code>VNC</code>-&gt; （询问是否enabled）<code>Yes</code></p><p>之后直接用<a href="https://www.realvnc.com/en/connect/download/viewer/">VNC Viewer</a>，就可以连接到树莓派了</p><h3 id="黑屏"><a href="#黑屏" class="headerlink" title="黑屏"></a>黑屏</h3><p>这里可能会遇到黑屏的情况，还是进入<code>raspi-config</code>，选择<code>Advanced Options</code> -&gt; <code>Resolution</code> -&gt; <code>1280x720</code>（随便选择一个分辨率，不要选Default）</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>查看硬件版本，我的是<code>1.4</code>版本的，另外还有1.1和1.2版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /sys/firmware/devicetree/base/model</span><br><span class="line">Raspberry Pi 4 Model B Rev 1.4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 树莓派 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OpenGL案例5】球的自转和公转</title>
      <link href="/2020-07-20/opengl-demo5/"/>
      <url>/2020-07-20/opengl-demo5/</url>
      
        <content type="html"><![CDATA[<p>通过<a href="/2020-07-20/opengl-demo4/">案例4</a>我们已经知道如何绘制<code>球</code>了，本案例绘制一个非常经典的案例，就是球的自转和公转（小球公转，大球自转）</p><span id="more"></span><img src="/images/post/opengl/sphere-world.gif" class="" width="600"><p>为了方便看出自转，这里只画三角形线，不进行填充</p><h2 id="绘制图形"><a href="#绘制图形" class="headerlink" title="绘制图形"></a>绘制图形</h2><p>基于前面的<a href="(/2020-07-20/opengl-demo4/)">案例4</a>的基础上来绘制</p><h3 id="绘制地板"><a href="#绘制地板" class="headerlink" title="绘制地板"></a>绘制地板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地板</span></span><br><span class="line">GLBatch                floorBatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置地板顶点数据</span></span><br><span class="line">floorBatch.<span class="built_in">Begin</span>(GL_LINES, <span class="number">324</span>);</span><br><span class="line"><span class="keyword">for</span>(GLfloat x = <span class="number">-20.0</span>; x &lt;= <span class="number">20.0f</span>; x+= <span class="number">0.5</span>) &#123;</span><br><span class="line">    floorBatch.<span class="built_in">Vertex3f</span>(x, <span class="number">-0.55f</span>, <span class="number">20.0f</span>);</span><br><span class="line">    floorBatch.<span class="built_in">Vertex3f</span>(x, <span class="number">-0.55f</span>, <span class="number">-20.0f</span>);</span><br><span class="line"></span><br><span class="line">    floorBatch.<span class="built_in">Vertex3f</span>(<span class="number">20.0f</span>, <span class="number">-0.55f</span>, x);</span><br><span class="line">    floorBatch.<span class="built_in">Vertex3f</span>(<span class="number">-20.0f</span>, <span class="number">-0.55f</span>, x);</span><br><span class="line">&#125;</span><br><span class="line">floorBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在renderSence绘制地板</span></span><br><span class="line">shaderManager.<span class="built_in">UseStockShader</span>(GLT_SHADER_FLAT, transformPipeline.<span class="built_in">GetModelViewProjectionMatrix</span>(), vGreen);</span><br><span class="line">floorBatch.<span class="built_in">Draw</span>();</span><br></pre></td></tr></table></figure><h3 id="大球和小球"><a href="#大球和小球" class="headerlink" title="大球和小球"></a>大球和小球</h3><p>自转公转小球</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置大球模型</span></span><br><span class="line"><span class="built_in">gltMakeSphere</span>(torusBatch, <span class="number">0.4f</span>, <span class="number">20</span>, <span class="number">40</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置小球模型</span></span><br><span class="line"><span class="built_in">gltMakeSphere</span>(sphereBatch, <span class="number">0.2f</span>, <span class="number">8</span>, <span class="number">16</span>);</span><br></pre></td></tr></table></figure><p>随机小球</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机球个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM_SPHERES 50</span></span><br><span class="line"><span class="comment">// 记录随机球位置</span></span><br><span class="line">GLFrame spheres[NUM_SPHERES];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机生成位置放置小球</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_SPHERES; i++) &#123;</span><br><span class="line">    <span class="comment">//y轴不变，X,Z产生随机值</span></span><br><span class="line">    GLfloat x = ((GLfloat)((<span class="built_in">rand</span>() % <span class="number">400</span>) - <span class="number">200</span> ) * <span class="number">0.1f</span>);</span><br><span class="line">    GLfloat z = ((GLfloat)((<span class="built_in">rand</span>() % <span class="number">400</span>) - <span class="number">200</span> ) * <span class="number">0.1f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在y方向，将球体设置为0.0的位置，这使得它们看起来是飘浮在眼睛的高度</span></span><br><span class="line">    <span class="comment">// 对spheres数组中的每一个顶点，设置顶点数据</span></span><br><span class="line">    spheres[i].<span class="built_in">SetOrigin</span>(x, <span class="number">0.0f</span>, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="renderSence"><a href="#renderSence" class="headerlink" title="renderSence"></a>renderSence</h3><p>添加<code>视图矩阵</code>到矩阵堆栈</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模型视图矩阵，push单元矩阵</span></span><br><span class="line">modelViewMatrix.<span class="built_in">PushMatrix</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型变换</span></span><br><span class="line">M3DMatrix44f mCamera;</span><br><span class="line">cameraFrame.<span class="built_in">GetCameraMatrix</span>(mCamera);</span><br><span class="line"><span class="comment">// push视图变换</span></span><br><span class="line">modelViewMatrix.<span class="built_in">PushMatrix</span>(mCamera);</span><br></pre></td></tr></table></figure><p>由于地板不需要其他变换，这时候可以绘制地板</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">shaderManager.<span class="built_in">UseStockShader</span>(GLT_SHADER_FLAT, transformPipeline.<span class="built_in">GetModelViewProjectionMatrix</span>(), vGreen);</span><br><span class="line">floorBatch.<span class="built_in">Draw</span>();</span><br></pre></td></tr></table></figure><p>让大小球显示在观察者前面，这里添加一个<code>视图变换</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 平移（z轴）让小球显示到观察者前面，</span></span><br><span class="line">modelViewMatrix.<span class="built_in">Translate</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">-3.0f</span>);</span><br></pre></td></tr></table></figure><p>然后绘制大球，这里使用点<code>点光源着⾊器</code>，可以看到球的光照效果</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里添加一个旋转角度(5°)，通过这个变量控制自转</span></span><br><span class="line"><span class="type">float</span> yRot = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义光源位置</span></span><br><span class="line">M3DVector4f vLightPos = &#123;<span class="number">0.0f</span>,<span class="number">10.0f</span>,<span class="number">5.0f</span>,<span class="number">1.0f</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制随机球，这里直接用小球的批次类来绘制</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NUM_SPHERES; i++) &#123;</span><br><span class="line">    modelViewMatrix.<span class="built_in">PushMatrix</span>();</span><br><span class="line">    modelViewMatrix.<span class="built_in">MultMatrix</span>(spheres[i]);</span><br><span class="line">    shaderManager.<span class="built_in">UseStockShader</span>(</span><br><span class="line">                                 GLT_SHADER_POINT_LIGHT_DIFF,</span><br><span class="line">                                 transformPipeline.<span class="built_in">GetModelViewMatrix</span>(),</span><br><span class="line">                                 transformPipeline.<span class="built_in">GetProjectionMatrix</span>(),</span><br><span class="line">                                 vLightPos,</span><br><span class="line">                                 vBlue);</span><br><span class="line">    sphereBatch.<span class="built_in">Draw</span>();</span><br><span class="line">    modelViewMatrix.<span class="built_in">PopMatrix</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转（用于大球自转）</span></span><br><span class="line">modelViewMatrix.<span class="built_in">PushMatrix</span>();</span><br><span class="line">modelViewMatrix.<span class="built_in">Rotate</span>(yRot, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 球上的三角形画线</span></span><br><span class="line"><span class="built_in">glPolygonMode</span>(GL_FRONT_AND_BACK, GL_LINE);</span><br><span class="line"><span class="built_in">glLineWidth</span>(<span class="number">2f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定合适的着色器(点光源着色器)</span></span><br><span class="line">shaderManager.<span class="built_in">UseStockShader</span>(</span><br><span class="line">                             GLT_SHADER_POINT_LIGHT_DIFF,</span><br><span class="line">                             transformPipeline.<span class="built_in">GetModelViewMatrix</span>(),</span><br><span class="line">                             transformPipeline.<span class="built_in">GetProjectionMatrix</span>(),</span><br><span class="line">                             vLightPos,</span><br><span class="line">                             vRed);</span><br><span class="line"><span class="comment">// 画球</span></span><br><span class="line">torusBatch.<span class="built_in">Draw</span>();</span><br><span class="line"><span class="comment">// 弹出旋转矩阵（因为旋转只用于大球）</span></span><br><span class="line">modelViewMatrix.<span class="built_in">PopMatrix</span>();</span><br></pre></td></tr></table></figure><p>接下来画<code>小球</code>，先旋转，再平移（先旋转到固定的角度，再移到外面）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 旋转（公转）</span></span><br><span class="line">modelViewMatrix.<span class="built_in">Rotate</span>(yRot * <span class="number">-2.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"><span class="comment">// 平移</span></span><br><span class="line">modelViewMatrix.<span class="built_in">Translate</span>(<span class="number">0.8f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">shaderManager.<span class="built_in">UseStockShader</span>(</span><br><span class="line">                             GLT_SHADER_POINT_LIGHT_DIFF,</span><br><span class="line">                             transformPipeline.<span class="built_in">GetModelViewMatrix</span>(),</span><br><span class="line">                             transformPipeline.<span class="built_in">GetProjectionMatrix</span>(),</span><br><span class="line">                             vLightPos,</span><br><span class="line">                             vBlue);</span><br><span class="line"><span class="comment">// 画小球</span></span><br><span class="line">sphereBatch.<span class="built_in">Draw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面一共push了三个矩阵，用完后pop</span></span><br><span class="line">modelViewMatrix.<span class="built_in">PopMatrix</span>();</span><br><span class="line">modelViewMatrix.<span class="built_in">PopMatrix</span>();</span><br><span class="line">modelViewMatrix.<span class="built_in">PopMatrix</span>();</span><br></pre></td></tr></table></figure><blockquote><p>注意，这里的小球没有自转，只是跟随者Y轴旋转</p></blockquote><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>接下来是控制刷新，主要是修改<code>yRot</code>，就能控制自转和公转了，这里通过<code>CStopWatch</code>获取一个时间间隔，来生成一个动态的值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> CStopWatch rotTimer;</span><br><span class="line"><span class="comment">// 可以通过流失的时间获取一个动态的值</span></span><br><span class="line"><span class="type">float</span> yRot = rotTimer.<span class="built_in">GetElapsedSeconds</span>() * <span class="number">60.0f</span>;</span><br></pre></td></tr></table></figure><p>完整代码见<a href="https://github.com/zhengbomo/OpenGLDemo/tree/master/005--%E5%B0%8F%E7%90%83%E8%87%AA%E8%BD%AC%E5%85%AC%E8%BD%AC">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OpenGL案例4】球，环，圆柱，磁盘的绘制</title>
      <link href="/2020-07-20/opengl-demo4/"/>
      <url>/2020-07-20/opengl-demo4/</url>
      
        <content type="html"><![CDATA[<p>在之前的案例中，我们通过定义三角形顶点绘制了一些几何图形，本案例使用OpenGL内置的图形绘制，查看<code>GLTool.h</code>，可以看到内置了下面图形</p><span id="more"></span><img src="/images/post/opengl/object-render-demo.gif" class="" width="600"><h2 id="内置图形"><a href="#内置图形" class="headerlink" title="内置图形"></a>内置图形</h2><h3 id="球"><a href="#球" class="headerlink" title="球"></a>球</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1：sphereBatch，三角形批次类对象</span></span><br><span class="line"><span class="comment">//参数2：fRadius，球体半径</span></span><br><span class="line"><span class="comment">//参数3：iSlices，从球体底部堆叠到顶部的三角形带的数量；其实球体是一圈一圈三角形带组成</span></span><br><span class="line"><span class="comment">//参数4：iStacks，围绕球体一圈排列的三角形对数</span></span><br><span class="line"><span class="built_in">gltMakeSphere</span>(GLTriangleBatch&amp; sphereBatch, GLfloat fRadius, GLint iSlices, GLint iStacks);</span><br></pre></td></tr></table></figure><h3 id="环"><a href="#环" class="headerlink" title="环"></a>环</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1：torusBatch，三角形批次类对象</span></span><br><span class="line"><span class="comment">//参数2：majorRadius,甜甜圈中心到外边缘的半径</span></span><br><span class="line"><span class="comment">//参数3：minorRadius,甜甜圈中心到内边缘的半径</span></span><br><span class="line"><span class="comment">//参数4：numMajor,沿着主半径的三角形数量</span></span><br><span class="line"><span class="comment">//参数5：numMinor,沿着内部较小半径的三角形数量</span></span><br><span class="line"><span class="built_in">gltMakeTorus</span>(GLTriangleBatch&amp; torusBatch, GLfloat majorRadius, GLfloat minorRadius, GLint numMajor, GLint numMinor);</span><br></pre></td></tr></table></figure><h3 id="圆柱-x2F-圆锥"><a href="#圆柱-x2F-圆锥" class="headerlink" title="圆柱&#x2F;圆锥"></a>圆柱&#x2F;圆锥</h3><p>设置顶部和底部面的半径，相同为<code>圆住</code>，其中一个面的<code>半径为0</code>则为<code>圆锥</code>，半径不同类似一把中间镂空的伞</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1：cylinderBatch，三角形批次类对象</span></span><br><span class="line"><span class="comment">//参数2：baseRadius,底部半径</span></span><br><span class="line"><span class="comment">//参数3：topRadius,头部半径</span></span><br><span class="line"><span class="comment">//参数4：fLength,圆形长度</span></span><br><span class="line"><span class="comment">//参数5：numSlices,围绕Z轴的三角形对的数量</span></span><br><span class="line"><span class="comment">//参数6：numStacks,圆柱底部堆叠到顶部圆环的三角形数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gltMakeCylinder</span><span class="params">(GLTriangleBatch&amp; cylinderBatch, GLfloat baseRadius, GLfloat topRadius, GLfloat fLength, GLint numSlices, GLint numStacks)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>2D平面图形，有两个圆组成一个平面环</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1:diskBatch，三角形批次类对象</span></span><br><span class="line"><span class="comment">//参数2:innerRadius,内圆半径</span></span><br><span class="line"><span class="comment">//参数3:outerRadius,外圆半径</span></span><br><span class="line"><span class="comment">//参数4:nSlices,圆盘围绕Z轴的三角形对的数量</span></span><br><span class="line"><span class="comment">//参数5:nStacks,圆盘外网到内围的三角形数量</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gltMakeDisk</span><span class="params">(GLTriangleBatch&amp; diskBatch, GLfloat innerRadius, GLfloat outerRadius, GLint nSlices, GLint nStacks)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="立方体"><a href="#立方体" class="headerlink" title="立方体"></a>立方体</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数1:cubeBatch，立方体批次类对象</span></span><br><span class="line"><span class="comment">//参数2:fRadius，每个方向到原点距离都为20个单位长度的立方体</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">gltMakeCube</span><span class="params">(GLBatch&amp; cubeBatch, GLfloat fRadius)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>本案例基于<a href="/2020-07-19/opengl-demo3/">案例3</a>，原来的部分不做介绍，定义图形批次类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 球</span></span><br><span class="line">GLTriangleBatch     sphereBatch;</span><br><span class="line"><span class="comment">// 环</span></span><br><span class="line">GLTriangleBatch     torusBatch;</span><br><span class="line"><span class="comment">// 圆柱</span></span><br><span class="line">GLTriangleBatch     cylinderBatch;</span><br><span class="line"><span class="comment">// 锥</span></span><br><span class="line">GLTriangleBatch     coneBatch;</span><br><span class="line"><span class="comment">// 磁盘</span></span><br><span class="line">GLTriangleBatch     diskBatch;</span><br><span class="line"><span class="comment">// 立方体</span></span><br><span class="line">GLBatch             cubeBatch;</span><br></pre></td></tr></table></figure><p>生成批次类数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 球</span></span><br><span class="line"><span class="built_in">gltMakeSphere</span>(sphereBatch, <span class="number">3.0</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="comment">// 环面</span></span><br><span class="line"><span class="built_in">gltMakeTorus</span>(torusBatch, <span class="number">3.0f</span>, <span class="number">0.75f</span>, <span class="number">15</span>, <span class="number">15</span>);</span><br><span class="line"><span class="comment">// 圆柱</span></span><br><span class="line"><span class="built_in">gltMakeCylinder</span>(cylinderBatch, <span class="number">2.0f</span>, <span class="number">2.0f</span>, <span class="number">3.0f</span>, <span class="number">15</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 锥</span></span><br><span class="line"><span class="built_in">gltMakeCylinder</span>(coneBatch, <span class="number">2.0f</span>, <span class="number">0.0f</span>, <span class="number">3.0f</span>, <span class="number">13</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 磁盘</span></span><br><span class="line"><span class="built_in">gltMakeDisk</span>(diskBatch, <span class="number">1.5f</span>, <span class="number">3.0f</span>, <span class="number">13</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// 正立方体</span></span><br><span class="line"><span class="built_in">gltMakeCube</span>(cubeBatch, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>在renderSence判断显示哪一个图形</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(nStep) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">drawWireFramedBatch</span>(&amp;sphereBatch);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">drawWireFramedBatch</span>(&amp;torusBatch);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">drawWireFramedBatch</span>(&amp;cylinderBatch);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">drawWireFramedBatch</span>(&amp;coneBatch);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">drawWireFramedBatch</span>(&amp;diskBatch);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">drawWireFramedBatch</span>(&amp;cubeBatch);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码见<a href="https://github.com/zhengbomo/OpenGLDemo/tree/master/004--OpenGL%E7%BB%98%E5%88%B6%E5%87%A0%E4%BD%95%E5%9B%BE%E5%BD%A2">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OpenGL案例3】绘制金字塔、六边形、圆环</title>
      <link href="/2020-07-19/opengl-demo3/"/>
      <url>/2020-07-19/opengl-demo3/</url>
      
        <content type="html"><![CDATA[<p>上节说到了不同的图元的装配方式，本节主要通过绘制金字塔，圆环，并使用<code>透视投影</code>，和<code>矩阵变换</code>来控制图形的显示</p><span id="more"></span><img src="/images/post/opengl/primitive-demo.gif" class="" width="600"><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>OpenGL涉及到的基础变换主要有下面4种</p><table><thead><tr><th>变换</th><th>说明</th></tr></thead><tbody><tr><td>视图变换</td><td>移动观察者的位置，观察者动，物体不动</td></tr><tr><td>模型变换</td><td>在场景中移动物体，观察者不动，物体动</td></tr><tr><td>投影变换</td><td>正投影，透视投影</td></tr><tr><td>视口变换</td><td>对窗口上最终输出进行缩放</td></tr></tbody></table><p>其中对于同一个物体，使用<code>视图变换</code>和<code>模型变换</code>都能做到同样的效果，具体采用什么变换取决于实际情况</p><h3 id="视图变换"><a href="#视图变换" class="headerlink" title="视图变换"></a>视图变换</h3><p>视图变换是应用到场景中的第一种变换，通过物体&#x2F;观察者在Z轴上的移动（默认是Z轴，也可以改为其他轴），确定场景中利于观察的位置。默认情况下，透视投影中的观察者位置处于原点（0，0，0），并沿着z轴负方向看向屏幕里面，一般通过<code>moveForward</code>方法来调整观察者位置，moveForward默认的朝向是-z轴，所以向屏幕里面移动传正数值，向屏幕外即+z轴，需要传负数值</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个参考证</span></span><br><span class="line">GLFrame                cameraFrame;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向屏幕外（+z轴方向）移动15.0f</span></span><br><span class="line">cameraFrame.<span class="built_in">MoveForward</span>(<span class="number">-15.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成矩阵到mCamera，用于矩阵变换操作</span></span><br><span class="line">M3DMatrix44f mCamera;</span><br><span class="line">cameraFrame.<span class="built_in">GetCameraMatrix</span>(mCamera);</span><br></pre></td></tr></table></figure><h3 id="模型变换"><a href="#模型变换" class="headerlink" title="模型变换"></a>模型变换</h3><p>模型变换，主要涉及三个函数，移动、旋转、缩放。有了这三个函数的组合，我们可以进行任意变换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 平移，沿x/y/z三个方向平移，矩阵结果放在第一个参数里面</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">m3dTranslationMatrix44</span><span class="params">(M3DMatrix44f m, <span class="type">float</span> x, <span class="type">float</span> y, <span class="type">float</span> z)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旋转</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">m3dRotationMatrix44</span><span class="params">(M3DMatrix44f m, <span class="type">float</span> angle, <span class="type">float</span> x, <span class="type">float</span> y, <span class="type">float</span> z)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缩放</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">m3dScaleMatrix44</span><span class="params">(M3DMatrix44f m, <span class="type">float</span> xScale, <span class="type">float</span> yScale, <span class="type">float</span> zScale)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵叉乘，结果放在product</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">m3dMatrixMultiply44</span><span class="params">(M3DMatrix44f product, <span class="type">const</span> M3DMatrix44f a, <span class="type">const</span> M3DMatrix44f b)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>翻转操作可以用旋转，也可以用缩放（缩放到-1）</p></blockquote><h3 id="投影变换"><a href="#投影变换" class="headerlink" title="投影变换"></a>投影变换</h3><p>通常也在窗口改变的时候设置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GLFrustum              viewFrustum;</span><br><span class="line"><span class="comment">// 设置透视投影</span></span><br><span class="line">viewFrustum.<span class="built_in">SetPerspective</span>(<span class="number">35.0f</span>, <span class="built_in">float</span>(w) / <span class="built_in">float</span>(h), <span class="number">1.0f</span>, <span class="number">500.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载投影矩阵到矩阵堆栈projectionMatrix</span></span><br><span class="line">projectionMatrix.<span class="built_in">LoadMatrix</span>(viewFrustum.<span class="built_in">GetProjectionMatrix</span>());</span><br></pre></td></tr></table></figure><h3 id="视口变换"><a href="#视口变换" class="headerlink" title="视口变换"></a>视口变换</h3><p>视口变换相关函数为，通常在窗口大小改变的时候修改</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改glView视口</span></span><br><span class="line"><span class="built_in">glViewport</span> (GLint x, GLint y, GLsizei width, GLsizei height);</span><br></pre></td></tr></table></figure><p>这里需要注意的是，矩阵变换叉乘不满足交换律，变换顺序会导致结果不一致</p><img src="/images/post/opengl/translate-order.png" class="" width="800"><h2 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h2><p>定义7个批次类，用于保存顶点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GLBatch                pointBatch;</span><br><span class="line">GLBatch                lineBatch;</span><br><span class="line">GLBatch                lineStripBatch;</span><br><span class="line">GLBatch                lineLoopBatch;</span><br><span class="line">GLBatch                triangleBatch;</span><br><span class="line">GLBatch                triangleStripBatch;</span><br><span class="line">GLBatch                triangleFanBatch;</span><br></pre></td></tr></table></figure><p>在<code>setupRC</code>初始化顶点数据</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义三个点</span></span><br><span class="line">GLfloat vCoast[] = &#123;</span><br><span class="line">    <span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画点</span></span><br><span class="line">pointBatch.<span class="built_in">Begin</span>(GL_POINTS, <span class="number">3</span>);</span><br><span class="line">pointBatch.<span class="built_in">CopyVertexData3f</span>(vCoast);</span><br><span class="line">pointBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画线</span></span><br><span class="line">lineBatch.<span class="built_in">Begin</span>(GL_LINES, <span class="number">3</span>);</span><br><span class="line">lineBatch.<span class="built_in">CopyVertexData3f</span>(vCoast);</span><br><span class="line">lineBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画连续线段</span></span><br><span class="line">lineStripBatch.<span class="built_in">Begin</span>(GL_LINE_STRIP, <span class="number">3</span>);</span><br><span class="line">lineStripBatch.<span class="built_in">CopyVertexData3f</span>(vCoast);</span><br><span class="line">lineStripBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画闭合线段</span></span><br><span class="line">lineLoopBatch.<span class="built_in">Begin</span>(GL_LINE_LOOP, <span class="number">3</span>);</span><br><span class="line">lineLoopBatch.<span class="built_in">CopyVertexData3f</span>(vCoast);</span><br><span class="line">lineLoopBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3个三角形，构成金字塔形状</span></span><br><span class="line">GLfloat vPyramid[<span class="number">12</span>][<span class="number">3</span>] = &#123;</span><br><span class="line">    <span class="number">-2.0f</span>, <span class="number">0.0f</span>, <span class="number">-2.0f</span>,</span><br><span class="line">    <span class="number">2.0f</span>, <span class="number">0.0f</span>, <span class="number">-2.0f</span>,</span><br><span class="line">    <span class="number">0.0f</span>, <span class="number">4.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">2.0f</span>, <span class="number">0.0f</span>, <span class="number">-2.0f</span>,</span><br><span class="line">    <span class="number">2.0f</span>, <span class="number">0.0f</span>, <span class="number">2.0f</span>,</span><br><span class="line">    <span class="number">0.0f</span>, <span class="number">4.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">2.0f</span>, <span class="number">0.0f</span>, <span class="number">2.0f</span>,</span><br><span class="line">    <span class="number">-2.0f</span>, <span class="number">0.0f</span>, <span class="number">2.0f</span>,</span><br><span class="line">    <span class="number">0.0f</span>, <span class="number">4.0f</span>, <span class="number">0.0f</span>,</span><br><span class="line"></span><br><span class="line">    <span class="number">-2.0f</span>, <span class="number">0.0f</span>, <span class="number">2.0f</span>,</span><br><span class="line">    <span class="number">-2.0f</span>, <span class="number">0.0f</span>, <span class="number">-2.0f</span>,</span><br><span class="line">    <span class="number">0.0f</span>, <span class="number">4.0f</span>, <span class="number">0.0f</span></span><br><span class="line">&#125;;</span><br><span class="line">triangleBatch.<span class="built_in">Begin</span>(GL_TRIANGLES, <span class="number">12</span>);</span><br><span class="line">triangleBatch.<span class="built_in">CopyVertexData3f</span>(vPyramid);</span><br><span class="line">triangleBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三角形扇形--六边形</span></span><br><span class="line">GLfloat vPoints[<span class="number">100</span>][<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> nVerts = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 半径</span></span><br><span class="line">GLfloat r = <span class="number">3.0f</span>;</span><br><span class="line"><span class="comment">// 原点(x,y,z) = (0,0,0);</span></span><br><span class="line">vPoints[nVerts][<span class="number">0</span>] = <span class="number">0.0f</span>;</span><br><span class="line">vPoints[nVerts][<span class="number">1</span>] = <span class="number">0.0f</span>;</span><br><span class="line">vPoints[nVerts][<span class="number">2</span>] = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// M3D_2PI 就是2Pi 的意思，就一个圆的意思。 绘制圆形</span></span><br><span class="line"><span class="keyword">for</span> (GLfloat angle = <span class="number">0</span>; angle &lt; M3D_2PI; angle += M3D_2PI / <span class="number">6.0f</span>) &#123;</span><br><span class="line">    <span class="comment">// 数组下标自增（每自增1次就表示一个顶点）</span></span><br><span class="line">    nVerts++;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        弧长=半径*角度,这里的角度是弧度制,不是平时的角度制</span></span><br><span class="line"><span class="comment">        既然知道了cos值,那么角度=arccos,求一个反三角函数就行了</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="comment">// x点坐标 cos(angle) * 半径</span></span><br><span class="line">    vPoints[nVerts][<span class="number">0</span>] = <span class="built_in">float</span>(<span class="built_in">cos</span>(angle)) * r;</span><br><span class="line">    <span class="comment">// y点坐标 sin(angle) * 半径</span></span><br><span class="line">    vPoints[nVerts][<span class="number">1</span>] = <span class="built_in">float</span>(<span class="built_in">sin</span>(angle)) * r;</span><br><span class="line">    <span class="comment">// z点的坐标</span></span><br><span class="line">    vPoints[nVerts][<span class="number">2</span>] = <span class="number">-0.5f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束扇形 前面一共绘制7个顶点（包括圆心）</span></span><br><span class="line"><span class="comment">// 添加闭合的终点</span></span><br><span class="line"><span class="comment">// 课程添加演示：屏蔽177-180行代码，并把绘制节点改为7.则三角形扇形是无法闭合的。</span></span><br><span class="line">nVerts++;</span><br><span class="line">vPoints[nVerts][<span class="number">0</span>] = r;</span><br><span class="line">vPoints[nVerts][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">vPoints[nVerts][<span class="number">2</span>] = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载！GL_TRIANGLE_FAN 以一个圆心为中心呈扇形排列，共用相邻顶点的一组三角形</span></span><br><span class="line">triangleFanBatch.<span class="built_in">Begin</span>(GL_TRIANGLE_FAN, <span class="number">8</span>);</span><br><span class="line">triangleFanBatch.<span class="built_in">CopyVertexData3f</span>(vPoints);</span><br><span class="line">triangleFanBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三角形条带，一个小环或圆柱段</span></span><br><span class="line"><span class="comment">// 顶点下标</span></span><br><span class="line"><span class="type">int</span> iCounter = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 半径</span></span><br><span class="line">GLfloat radius = <span class="number">3.0f</span>;</span><br><span class="line"><span class="comment">// 从0度~360度，以0.3弧度为步长</span></span><br><span class="line"><span class="keyword">for</span> (GLfloat angle = <span class="number">0.0f</span>; angle &lt;= (<span class="number">2.0f</span>*M3D_PI); angle += <span class="number">0.3f</span>) &#123;</span><br><span class="line">    <span class="comment">//或许圆形的顶点的X,Y</span></span><br><span class="line">    GLfloat x = radius * <span class="built_in">sin</span>(angle);</span><br><span class="line">    GLfloat y = radius * <span class="built_in">cos</span>(angle);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制2个三角形（他们的x,y顶点一样，只是z点不一样）</span></span><br><span class="line">    vPoints[iCounter][<span class="number">0</span>] = x;</span><br><span class="line">    vPoints[iCounter][<span class="number">1</span>] = y;</span><br><span class="line">    vPoints[iCounter][<span class="number">2</span>] = <span class="number">-0.5</span>;</span><br><span class="line">    iCounter++;</span><br><span class="line"></span><br><span class="line">    vPoints[iCounter][<span class="number">0</span>] = x;</span><br><span class="line">    vPoints[iCounter][<span class="number">1</span>] = y;</span><br><span class="line">    vPoints[iCounter][<span class="number">2</span>] = <span class="number">0.5</span>;</span><br><span class="line">    iCounter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结束循环，在循环位置生成2个三角形</span></span><br><span class="line">vPoints[iCounter][<span class="number">0</span>] = vPoints[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">vPoints[iCounter][<span class="number">1</span>] = vPoints[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">vPoints[iCounter][<span class="number">2</span>] = <span class="number">-0.5</span>;</span><br><span class="line">iCounter++;</span><br><span class="line"></span><br><span class="line">vPoints[iCounter][<span class="number">0</span>] = vPoints[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">vPoints[iCounter][<span class="number">1</span>] = vPoints[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">vPoints[iCounter][<span class="number">2</span>] = <span class="number">0.5</span>;</span><br><span class="line">iCounter++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GL_TRIANGLE_STRIP 共用一个条带（strip）上的顶点的一组三角形</span></span><br><span class="line">triangleStripBatch.<span class="built_in">Begin</span>(GL_TRIANGLE_STRIP, iCounter);</span><br><span class="line">triangleStripBatch.<span class="built_in">CopyVertexData3f</span>(vPoints);</span><br><span class="line">triangleStripBatch.<span class="built_in">End</span>();</span><br></pre></td></tr></table></figure><p>然后在renderSence里面，把对应的批次类draw出来就可以了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 画点</span></span><br><span class="line"><span class="built_in">glPointSize</span>(<span class="number">4.0f</span>);</span><br><span class="line">pointBatch.<span class="built_in">Draw</span>();</span><br><span class="line"><span class="built_in">glPointSize</span>(<span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 画三角形</span></span><br><span class="line"><span class="built_in">glLineWidth</span>(<span class="number">2.0f</span>);</span><br><span class="line">lineLoopBatch.<span class="built_in">Draw</span>();</span><br><span class="line"><span class="built_in">glLineWidth</span>(<span class="number">1.0f</span>);</span><br></pre></td></tr></table></figure><h2 id="矩阵堆栈"><a href="#矩阵堆栈" class="headerlink" title="矩阵堆栈"></a>矩阵堆栈</h2><p>本案例涉及到3个矩阵，<code>视图矩阵</code>（修改观察者位置），<code>模型矩阵</code>（旋转），<code>投影矩阵</code>（透视投影）</p><p>这里我们定义两个矩阵堆栈，来计算</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 矩阵堆栈，用于设置投影矩阵</span></span><br><span class="line">GLMatrixStack          projectionMatrix;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 矩阵堆栈，用于设置视图矩阵，模型矩阵，</span></span><br><span class="line">GLMatrixStack          modelViewMatrix;</span><br></pre></td></tr></table></figure><p>为了方便计算，我们定义一个<code>变换管道</code>transformPipeline，用于合并2个矩阵堆栈（投影矩阵堆栈projectionMatrix和模型视图矩阵堆栈modelViewMatrix）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 几何变换的管道</span></span><br><span class="line">GLGeometryTransform    transformPipeline;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置变换管线以使用两个矩阵堆栈</span></span><br><span class="line">transformPipeline.<span class="built_in">SetMatrixStacks</span>(modelViewMatrix, projectionMatrix);</span><br></pre></td></tr></table></figure><p>对于投影矩阵，直接在<code>changeSize</code>的时候配置就可以</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 透视投影</span></span><br><span class="line">GLFrustum              viewFrustum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置透视投影</span></span><br><span class="line">viewFrustum.<span class="built_in">SetPerspective</span>(<span class="number">35.0f</span>, <span class="built_in">float</span>(w) / <span class="built_in">float</span>(h), <span class="number">1.0f</span>, <span class="number">500.0f</span>);</span><br><span class="line"><span class="comment">// 重新加载投影矩阵到矩阵堆栈projectionMatrix</span></span><br><span class="line">projectionMatrix.<span class="built_in">LoadMatrix</span>(viewFrustum.<span class="built_in">GetProjectionMatrix</span>());</span><br></pre></td></tr></table></figure><p>接下来我们在<code>renderSence</code>配置模型视图矩阵</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载一个单元矩阵到栈顶</span></span><br><span class="line">modelViewMatrix.<span class="built_in">LoadIdentity</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制一份栈顶矩阵到栈顶</span></span><br><span class="line">modelViewMatrix.<span class="built_in">PushMatrix</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得视图矩阵</span></span><br><span class="line">M3DMatrix44f mCamera;</span><br><span class="line">cameraFrame.<span class="built_in">GetCameraMatrix</span>(mCamera);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与栈顶矩阵叉乘并覆盖栈顶矩阵</span></span><br><span class="line">modelViewMatrix.<span class="built_in">MultMatrix</span>(mCamera);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得模型矩阵</span></span><br><span class="line">M3DMatrix44f mObjectFrame;</span><br><span class="line">objectFrame.<span class="built_in">GetMatrix</span>(mObjectFrame);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与栈顶矩阵叉乘并覆盖栈顶矩阵</span></span><br><span class="line">modelViewMatrix.<span class="built_in">MultMatrix</span>(mObjectFrame);</span><br></pre></td></tr></table></figure><p>最终通过变换管道，生成矩阵传递给着色器</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成最终的矩阵</span></span><br><span class="line">M3DMatrix44f *fMatrix = transformPipeline.<span class="built_in">GetModelViewProjectionMatrix</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传给平面着色器处理，vBlack为填充颜色</span></span><br><span class="line">shaderManager.<span class="built_in">UseStockShader</span>(GLT_SHADER_FLAT, fMatrix, vBlack);</span><br></pre></td></tr></table></figure><p>对于几何图形除了直接填充颜色，还需要绘制边框（<code>glPolygonMode</code>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启多边形偏移</span></span><br><span class="line"><span class="built_in">glPolygonOffset</span>(<span class="number">-1.0f</span>, <span class="number">-1.0f</span>);</span><br><span class="line"><span class="built_in">glEnable</span>(GL_POLYGON_OFFSET_LINE);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启反锯齿</span></span><br><span class="line"><span class="built_in">glEnable</span>(GL_LINE_SMOOTH);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启混合</span></span><br><span class="line"><span class="built_in">glEnable</span>(GL_BLEND);</span><br><span class="line"><span class="comment">// 混合方法</span></span><br><span class="line"><span class="built_in">glBlendFunc</span>(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绘制线框几何黑色版 三种模式，实心，边框，点，可以作用在正面，背面，或者两面</span></span><br><span class="line"><span class="comment">//通过调用glPolygonMode将多边形正面或者背面设为线框模式，实现线框渲染</span></span><br><span class="line"><span class="built_in">glPolygonMode</span>(GL_FRONT_AND_BACK, GL_LINE);</span><br><span class="line"><span class="comment">//设置线条宽度</span></span><br><span class="line"><span class="built_in">glLineWidth</span>(<span class="number">2.5f</span>);</span><br><span class="line"></span><br><span class="line">shaderManager.<span class="built_in">UseStockShader</span>(GLT_SHADER_FLAT, transformPipeline.<span class="built_in">GetModelViewProjectionMatrix</span>(), vBlack);</span><br><span class="line">pBatch-&gt;<span class="built_in">Draw</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复原原本的设置</span></span><br><span class="line"><span class="comment">//通过调用glPolygonMode将多边形正面或者背面设为全部填充模式</span></span><br><span class="line"><span class="built_in">glPolygonMode</span>(GL_FRONT_AND_BACK, GL_FILL);</span><br><span class="line"><span class="built_in">glDisable</span>(GL_POLYGON_OFFSET_LINE);</span><br><span class="line"><span class="built_in">glLineWidth</span>(<span class="number">1.0f</span>);</span><br><span class="line"><span class="built_in">glDisable</span>(GL_BLEND);</span><br><span class="line"><span class="built_in">glDisable</span>(GL_LINE_SMOOTH);</span><br></pre></td></tr></table></figure><p>关于矩阵堆栈的操作</p><table><thead><tr><th>矩阵堆栈API</th><th>说明</th></tr></thead><tbody><tr><td>GLMatrixStack::LoadIdentity(void)</td><td>在栈顶加载&#x2F;覆盖一个单元矩阵</td></tr><tr><td>GLMatrixStack::LoadMatrix(const M3DMatrix44f m)</td><td>在栈顶加载&#x2F;覆盖成矩阵m</td></tr><tr><td>GLMatrixStack::MultMatrix(const M3DMatrix44f m)</td><td>矩阵m与栈顶矩阵叉乘，结果覆盖栈顶矩阵</td></tr><tr><td>GLMatrixStack::GetMatrix(void)</td><td>获取栈顶矩阵</td></tr><tr><td>GLMatrixStack::PushMatrix(void)</td><td>拷贝栈顶矩阵入栈</td></tr><tr><td>GLMatrixStack::PushMatrix(const M3DMatrix44f m)</td><td>把矩阵m入栈</td></tr><tr><td>GLMatrixStack::PopMatrix(void)</td><td>出栈，移出栈顶矩阵</td></tr></tbody></table><p>完整代码在<a href="https://github.com/zhengbomo/OpenGLDemo/tree/master/003--OpenGL%E5%9B%BE%E5%85%83%E7%BB%98%E5%88%B6(%E7%BB%BC%E5%90%88)">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL渲染架构</title>
      <link href="/2020-07-19/opengl-render-architecture/"/>
      <url>/2020-07-19/opengl-render-architecture/</url>
      
        <content type="html"><![CDATA[<p>本节主要是了解OpenGL是如何把我们的数据（顶点数据和纹理）传递到GPU的，GPU又是如何处理这些数据的</p><span id="more"></span><p>先来看一张架构图</p><img src="/images/post/opengl/opgngl-architecture.png" class="" width="800" title="OpenGL渲染架构图"><h2 id="Client与Server"><a href="#Client与Server" class="headerlink" title="Client与Server"></a>Client与Server</h2><p>这里的端不同于我们平常开发的客户端服务端</p><p>客户端：通常指在CPU存储的代码，负责<code>发送OpenGL命令</code>，比如OpenGLAPI，底层的C&#x2F;C++代码，运行在CPU上<br>服务端：负责<code>接收OpenGL命令</code>并调用<code>GPU</code>芯片执行相应的操作，运行在GPU上</p><p>服务器和客户端在功能上也是异步的。客户端不断的把<code>数据块</code>和<code>命令块</code>组合在⼀起输送到缓冲区，然后缓冲区就会发送到服务器执行</p><h2 id="数据通道"><a href="#数据通道" class="headerlink" title="数据通道"></a>数据通道</h2><p>从上面架构图可以看出，从client到server传递的数据有三种</p><ul><li>Attributes：属性</li><li>Uniforms：渲染矩阵</li><li>TextureData：纹理数据</li></ul><h3 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h3><p>属性会从客户端内存中复制存储在图形硬件中的一个缓冲区（显存）上，然后会被传递到<code>顶点着色器</code>Vertex Shader，无法直接传递到<code>片元着色器</code>Fragment Shader（但可间接传递到片元着色器），数据有下面类型（这些属性通常是经常变化的）</p><ul><li><code>顶点数据</code>：四维向量（x, y, z, w）</li><li><code>纹理坐标</code> (图片映射坐标)，实际是通过Vertex Shader传递给Fragment Shader</li><li>颜色数据</li><li>光照法线</li></ul><h3 id="Uniform"><a href="#Uniform" class="headerlink" title="Uniform"></a>Uniform</h3><p>Uniform通过既可以传递到<code>顶点着色器</code>，也可以传递到<code>片元着色器</code>，Uniform中传递的通常是比较统一的批次数据，通常用来传递一些不经常发生变动的数据，例如变换矩阵</p><h3 id="Texture-Data"><a href="#Texture-Data" class="headerlink" title="Texture Data"></a>Texture Data</h3><p>Texture Data同Uniform一样，可以将数据传递到<code>顶点着色器</code>和<code>片元着色器</code>，正如名字一样，主要传递纹理数据，由于顶点着色器主要是处理顶点数据的，我们将纹理数据传过去并没有多大的意义。而纹理的处理的逻辑主要是在片元着色器中进行的。用于对光栅化后的图像填充颜色</p><h2 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h2><p>• 着色器是使用GLSL编写的程序，看起来与C语言非常类似。着色器必须从源代码中编译和链接在一起。最终准备就绪的着色器程序<br>• 顶点着色器<br>    处理从客户机输入的数据、应用变换、进行其他的类型的数学运算来计算关照效果、位移、颜色值等等。（例如对于三个顶点的三角形渲染，顶点着色器将执行3次，也就是为了每个顶点执行一次）在目前的硬件上有多个执行单元同时运行，处理是并发的<br>• 图元装配：在顶点着色器确定完所有顶点的位置后，根据传入的配置确定图元形状，然后会对三角形逐个片段进行了光栅化处理<br>• 片元着色器<br>    光栅化后的每个片段通过执行片元着色器进行颜色填充</p><p>最终会输出我们将屏幕上变成我们最终看到的颜色</p><img src="/images/post/opengl/shadow-flow.png" class="" width="800" title="着色器的渲染流程"><ul><li>设置顶点数据和其他参数。</li><li>在顶点着色器中进行运算得到裁剪坐标。</li><li>细分着色器、几何着色器，不可自定义，跳过。</li><li>图元设置，根据设置构成点、线、三角形。</li><li>裁剪，裁剪掉超出显示区域的部分。</li><li>光栅化, 将图源栅格化为一个个的像素点。</li><li>片元着色器，将对应的栅格(像素)填充为具体的颜色。</li><li>渲染图像</li></ul>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL投影、图元和存储着色器</title>
      <link href="/2020-07-18/primitive-shader/"/>
      <url>/2020-07-18/primitive-shader/</url>
      
        <content type="html"><![CDATA[<h2 id="投影方式"><a href="#投影方式" class="headerlink" title="投影方式"></a>投影方式</h2><p>OpenGL有两种投影方式</p><table><thead><tr><th>投影方式</th><th>说明</th><th>函数</th></tr></thead><tbody><tr><td>正投影</td><td>相同的物体远近看起来都一样大</td><td>GLFrustum::SetPerspective(float fFov, float fAspect, float fNear, float fFar)</td></tr><tr><td>透视投影</td><td>近大远小</td><td>GLFrustum::SetOrthographic(GLfloat xMin, GLfloat xMax, GLfloat yMin, GLfloat yMax, GLfloat zMin, GLfloat zMax)</td></tr></tbody></table><span id="more"></span><img src="/images/post/opengl/two-projection.png" class="" width="600"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GLFrustum.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 投影矩阵</span></span><br><span class="line">GLFrustum              viewFrustum;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置透视投影</span></span><br><span class="line">viewFrustum.<span class="built_in">SetPerspective</span>(<span class="number">35.0f</span>, <span class="built_in">float</span>(w) / <span class="built_in">float</span>(h), <span class="number">1.0f</span>, <span class="number">500.0f</span>);</span><br><span class="line"><span class="comment">// 获取投影矩阵</span></span><br><span class="line">M3DMatrix44f *projectionMatrix = viewFrustum.<span class="built_in">GetProjectionMatrix</span>();</span><br></pre></td></tr></table></figure><h2 id="图元装配方式"><a href="#图元装配方式" class="headerlink" title="图元装配方式"></a>图元装配方式</h2><p>在OpenGL中，相同的顶点可以有不同的装配方式，如下图</p><img src="/images/post/opengl/primitive-assembly.jpg" class="" width="800"><table><thead><tr><th>图元</th><th>描述</th></tr></thead><tbody><tr><td>GL_POINTS</td><td>每个顶点在屏幕上都是单独点</td></tr><tr><td>GL_LINES</td><td>每⼀对顶点定义⼀个线段</td></tr><tr><td>GL_LINE_STRIP</td><td>一个从第⼀个顶点依次经过每⼀个后续顶点而绘制的线条</td></tr><tr><td>GL_LINE_LOOP</td><td>和GL_LINE_STRIP相同，但是最后⼀个顶点和第⼀个顶点连接起来了</td></tr><tr><td>GL_TRIANGLES</td><td>每3个顶点定义⼀个新的三角形</td></tr><tr><td>GL_TRIANGLE_STRIP</td><td>共⽤一个条带(strip)上的顶点的一组三⻆形</td></tr><tr><td>GL_TRIANGLE_FAN</td><td>以⼀个圆点为中⼼呈扇形排列，共⽤相邻顶点的⼀组三⻆形</td></tr></tbody></table><p>其中<code>GL_TRIANGLE_STRIP</code>和<code>GL_TRIANGLE_FAN</code>共享三角形的一条边，在绘制大量三角形的时候，可以节省存储空间和提高性能</p><p>如</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">GLfloat vCoast[] = &#123;</span><br><span class="line">    <span class="number">3</span>,<span class="number">3</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,<span class="number">3</span>,<span class="number">0</span>,</span><br><span class="line">    <span class="number">3</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 三个点</span></span><br><span class="line">pointBatch.<span class="built_in">Begin</span>(GL_POINTS, <span class="number">3</span>);</span><br><span class="line">pointBatch.<span class="built_in">CopyVertexData3f</span>(vCoast);</span><br><span class="line">pointBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一条线</span></span><br><span class="line">lineBatch.<span class="built_in">Begin</span>(GL_LINES, <span class="number">3</span>);</span><br><span class="line">lineBatch.<span class="built_in">CopyVertexData3f</span>(vCoast);</span><br><span class="line">lineBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭合三角形线段</span></span><br><span class="line">lineLoopBatch.<span class="built_in">Begin</span>(GL_LINE_LOOP, <span class="number">3</span>);</span><br><span class="line">lineLoopBatch.<span class="built_in">CopyVertexData3f</span>(vCoast);</span><br><span class="line">lineLoopBatch.<span class="built_in">End</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭合三角形，可以填充颜色</span></span><br><span class="line">triangleBatch.<span class="built_in">Begin</span>(GL_TRIANGLES, <span class="number">3</span>);</span><br><span class="line">triangleBatch.<span class="built_in">CopyVertexData3f</span>(vCoast);</span><br><span class="line">triangleBatch.<span class="built_in">End</span>();</span><br></pre></td></tr></table></figure><h2 id="存储着色器-x2F-固定管线着色器"><a href="#存储着色器-x2F-固定管线着色器" class="headerlink" title="存储着色器&#x2F;固定管线着色器"></a>存储着色器&#x2F;固定管线着色器</h2><p>在使用存储着色器之前需要先进行初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GLShaderManager shaderManager;</span><br><span class="line">shaderManager.<span class="built_in">InitializeStockShaders</span>();</span><br></pre></td></tr></table></figure><p>OpenGL内置了很多存储着色器可以使用</p><h3 id="单元着色器"><a href="#单元着色器" class="headerlink" title="单元着色器"></a>单元着色器</h3><p>使⽤场景：绘制默认OpenGL 坐标系(-1,1)下图形。 图形所有片段都会以⼀种颜⾊填充。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1: 存储着⾊器种类-单元着⾊器</span></span><br><span class="line"><span class="comment">// 参数2: 颜⾊值</span></span><br><span class="line">GLShaderManager::<span class="built_in">UserStockShader</span>(GLT_SHADER_IDENTITY,</span><br><span class="line">                                 GLfloat vColor[<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h3 id="平面着色器"><a href="#平面着色器" class="headerlink" title="平面着色器"></a>平面着色器</h3><p>使⽤场景：在绘制图形时, 可以应⽤矩阵变换(模型&#x2F;投影变化)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1: 存储着⾊器种类-平⾯着⾊器</span></span><br><span class="line"><span class="comment">// 参数2: 允许变化的4*4矩阵</span></span><br><span class="line"><span class="comment">// 参数3: 颜⾊色值</span></span><br><span class="line">GLShaderManager::<span class="built_in">UserStockShader</span>(GLT_SHADER_FLAT,</span><br><span class="line">                                 GLfloat mvp[<span class="number">16</span>],</span><br><span class="line">                                 GLfloat vColor[<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h3 id="上⾊着⾊器"><a href="#上⾊着⾊器" class="headerlink" title="上⾊着⾊器"></a>上⾊着⾊器</h3><p>使⽤场景：在绘制图形时, 可以应⽤变换(模型&#x2F;投影变化)。颜色将会平滑地插入到顶点之间，称为平滑着色。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1: 存储着⾊器种类-上⾊着⾊器</span></span><br><span class="line"><span class="comment">// 参数2: 允许变化的4*4矩阵</span></span><br><span class="line">GLShaderManager::<span class="built_in">UserStockShader</span>(GLT_SHADER_SHADED,</span><br><span class="line">                                 GLfloat mvp[<span class="number">16</span>]);</span><br></pre></td></tr></table></figure><h3 id="默认光源着色器"><a href="#默认光源着色器" class="headerlink" title="默认光源着色器"></a>默认光源着色器</h3><p>使⽤场景：在绘制图形时, 可以应⽤变换(模型&#x2F;投影变化)。这种着⾊器会使绘制的图形产生阴影和光照的效果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1: 存储着⾊器种类-默认光源着⾊器</span></span><br><span class="line"><span class="comment">// 参数2: 模型4*4矩阵</span></span><br><span class="line"><span class="comment">// 参数3: 投影4*4矩阵</span></span><br><span class="line"><span class="comment">// 参数4: 颜⾊值</span></span><br><span class="line">GLShaderManager::<span class="built_in">UserStockShader</span>(GLT_SHADER_DEFAULT_LIGHT,</span><br><span class="line">                                 GLfloat mvMatrix[<span class="number">16</span>],</span><br><span class="line">                                 GLfloat pMatrix[<span class="number">16</span>],</span><br><span class="line">                                 GLfloat vColor[<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h3 id="点光源着⾊器"><a href="#点光源着⾊器" class="headerlink" title="点光源着⾊器"></a>点光源着⾊器</h3><p>使⽤场景：在绘制图形时, 可以应用变换(模型&#x2F;投影变化)。这种着⾊器会使绘制的图形产⽣阴影和光照的效果。它与默认光源着⾊器⾮常类似，区别只是光源位置可能是特定的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1: 存储着⾊器种类-点光源着⾊器</span></span><br><span class="line"><span class="comment">// 参数2: 模型4*4矩阵</span></span><br><span class="line"><span class="comment">// 参数3: 投影4*4矩阵</span></span><br><span class="line"><span class="comment">// 参数4: 点光源的位置</span></span><br><span class="line"><span class="comment">// 参数5: 漫反射颜⾊值</span></span><br><span class="line">GLShaderManager::<span class="built_in">UserStockShader</span>(GLT_SHADER_POINT_LIGHT_DIFF,</span><br><span class="line">                                 GLfloat mvMatrix[<span class="number">16</span>],</span><br><span class="line">                                 GLfloat pMatrix[<span class="number">16</span>],</span><br><span class="line">                                 GLfloat vLightPos[<span class="number">3</span>],</span><br><span class="line">                                 GLfloat vColor[<span class="number">4</span>]);</span><br></pre></td></tr></table></figure><h3 id="纹理替换矩阵着⾊器"><a href="#纹理替换矩阵着⾊器" class="headerlink" title="纹理替换矩阵着⾊器"></a>纹理替换矩阵着⾊器</h3><p>使⽤场景：在绘制图形时, 可以应⽤变换(模型&#x2F;投影变化)。这种着⾊器通过给定的模型视图投影矩阵，使⽤纹理单元来进⾏颜⾊填充。其中每个像素点的颜⾊是从纹理中获取。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1: 存储着⾊器种类-纹理替换矩阵着⾊器</span></span><br><span class="line"><span class="comment">// 参数2: 模型4*4矩阵</span></span><br><span class="line"><span class="comment">// 参数3: 纹理单元</span></span><br><span class="line">GLShaderManager::<span class="built_in">UserStockShader</span>(GLT_SHADER_TEXTURE_REPLACE,</span><br><span class="line">                                 GLfloat mvMatrix[<span class="number">16</span>],</span><br><span class="line">                                 GLint nTextureUnit);</span><br></pre></td></tr></table></figure><h3 id="纹理调整着⾊器"><a href="#纹理调整着⾊器" class="headerlink" title="纹理调整着⾊器"></a>纹理调整着⾊器</h3><p>使⽤场景：在绘制图形时, 可以应⽤变换(模型&#x2F;投影变化)。这种着⾊器通过给定的模型视图投影矩阵。着⾊器将⼀个基本⾊乘以⼀个取⾃纹理单元nTextureUnit 的纹理，将颜⾊与纹理进⾏颜⾊混合后才填充到⽚段中。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1: 存储着⾊器种类-纹理调整着⾊器</span></span><br><span class="line"><span class="comment">// 参数2: 模型4*4矩阵</span></span><br><span class="line"><span class="comment">// 参数3: 颜⾊值</span></span><br><span class="line"><span class="comment">// 参数4: 纹理单元</span></span><br><span class="line">GLShaderManager::<span class="built_in">UserStockShader</span>(GLT_SHADER_TEXTURE_MODULATE,</span><br><span class="line">                                 GLfloat mvMatrix[<span class="number">16</span>],</span><br><span class="line">                                 GLfloat vColor[<span class="number">4</span>],</span><br><span class="line">                                 GLint nTextureUnit);</span><br></pre></td></tr></table></figure><h3 id="纹理光源着⾊器"><a href="#纹理光源着⾊器" class="headerlink" title="纹理光源着⾊器"></a>纹理光源着⾊器</h3><p>使⽤用场景：在绘制图形时, 可以应⽤变换(模型&#x2F;投影变化)。这种着⾊器通过给定的模型视图投影矩阵，着⾊器将⼀个纹理通过漫反射照明计算进⾏调整(相乘)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1: 存储着⾊器种类-纹理光源着⾊器</span></span><br><span class="line"><span class="comment">// 参数2: 模型4*4矩阵</span></span><br><span class="line"><span class="comment">// 参数3: 投影4*4矩阵</span></span><br><span class="line"><span class="comment">// 参数4: 点光源位置</span></span><br><span class="line"><span class="comment">// 参数5: 颜⾊值</span></span><br><span class="line"><span class="comment">// 参数6: 纹理单元</span></span><br><span class="line">GLShaderManager::<span class="built_in">UserStockShader</span>(GLT_SHADER_TEXTURE_POINT_LIGHT_DIEF,</span><br><span class="line">                                 GLfloat mvMatrix[<span class="number">16</span>],</span><br><span class="line">                                 GLfloat pMatrix[<span class="number">16</span>],</span><br><span class="line">                                 GLfloat vLightPos[<span class="number">3</span>],</span><br><span class="line">                                 GLfloat vBaseColor[<span class="number">4</span>],</span><br><span class="line">                                 GLint nTextureUnit);</span><br></pre></td></tr></table></figure><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><p>图元绘制完整代码见<a href="https://github.com/zhengbomo/OpenGLDemo/tree/master/003--OpenGL%E5%9B%BE%E5%85%83%E7%BB%98%E5%88%B6(%E7%BB%BC%E5%90%88)">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL正背面剔除和深度测试</title>
      <link href="/2020-07-16/opengl-face-culling/"/>
      <url>/2020-07-16/opengl-face-culling/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>当我们在绘制3D图形的时候，由于观察者的角度问题，3D图形拥有多个面，假设所有的面是不透明的，在前面的面是可见的，而背后的面是不可见的，对于不可见的部分，不应该渲染出来，并且出于性能的考虑，应该丢弃（如下面正方体有6个面，而我们能看到的只有三个面），对于下面正方体，面比较少，影响不大，但对于一些复杂的3D图形，影响就比较大了，这种问题称为<code>隐藏面消除/找出可见面</code>（Hidden surface elimination&#x2F;Visible surface detemination）</p><span id="more"></span><img src="/images/post/opengl/cube.png" class="" width="200" title="正方体"><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="油画算法"><a href="#油画算法" class="headerlink" title="油画算法"></a>油画算法</h3><p>对于2D的图形，通常采用的是油画算法，远的物体先绘制，近的物体覆盖远的物体</p><img src="/images/post/opengl/painter-draw.png" class="" width="600" title="油画算法"><p>对于3D图形，由于有深度的影响，无法简单分辨物体的远近，如下图，相互交叉的三角形，油画算法将无法处理</p><img src="/images/post/opengl/triangle-composition.png" class="" width="300" title="多个三角形交叉叠加"><h3 id="正背面剔除（Face-Culling）"><a href="#正背面剔除（Face-Culling）" class="headerlink" title="正背面剔除（Face Culling）"></a>正背面剔除（Face Culling）</h3><p>在OpenGL中所有的面都是三角形组成，而所有的平面都有两个面（<code>正面</code>和<code>背面</code>），我们在一个时刻只能看到一个正面。而看不到的背面，OpenGL会检查所有正面朝向观察者的面，并渲染它们，从而丢弃背面朝向的⾯面</p><p>在OpenGL规定</p><p><code>正面</code>: 按照逆时针顶点连接顺序的三角形面<br><code>背面</code>: 按照顺时针顶点连接顺序的三⻆形面</p><img src="/images/post/opengl/cube-face-culling.png" class="" width="400"><p>从图中可以看出</p><p>左边三角形面相对于观察者是顺时针，所以面向观察者的是背面，右边的三角形面是逆时针，所以面向观察者的是正面，所有右边的三角形面被渲染，而左边的三角形面不会被渲染，<br>如果观察者在左边，则情况会反过来，左边的三角形面被渲染，而右边的三角形面被丢弃。三角形的正面还是背面，是根据观察者的观察方向而变动的。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>我们通过画一个甜甜圈来看下开启和关闭正背面剔除的区别</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GLTools.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GLMatrixStack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GLFrame.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GLFrustum.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GLGeometryTransform.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __APPLE__</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;glut/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FREEGLUT_STATIC</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">////设置角色帧，作为相机</span></span><br><span class="line">GLFrame             viewFrame;</span><br><span class="line"><span class="comment">//使用GLFrustum类来设置透视投影</span></span><br><span class="line">GLFrustum           viewFrustum;</span><br><span class="line">GLTriangleBatch     torusBatch;</span><br><span class="line">GLMatrixStack       modelViewMatix;</span><br><span class="line">GLMatrixStack       projectionMatrix;</span><br><span class="line">GLGeometryTransform transformPipeline;</span><br><span class="line">GLShaderManager     shaderManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标记：是否背面剔除</span></span><br><span class="line"><span class="type">int</span> iCull = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染场景</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">renderScene</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.清除窗口和深度缓冲区</span></span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启/关闭正背面剔除功能</span></span><br><span class="line">    <span class="keyword">if</span> (iCull) &#123;</span><br><span class="line">        <span class="built_in">glEnable</span>(GL_CULL_FACE);</span><br><span class="line">        <span class="built_in">glFrontFace</span>(GL_CCW);</span><br><span class="line">        <span class="built_in">glCullFace</span>(GL_BACK);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">glDisable</span>(GL_CULL_FACE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.把摄像机矩阵压入模型矩阵中</span></span><br><span class="line">    modelViewMatix.<span class="built_in">PushMatrix</span>(viewFrame);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.设置绘图颜色</span></span><br><span class="line">    GLfloat vRed[] = &#123; <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用默认光源着色器</span></span><br><span class="line">    <span class="comment">// 通过光源、阴影效果跟提现立体效果</span></span><br><span class="line">    <span class="comment">// 参数1：GLT_SHADER_DEFAULT_LIGHT 默认光源着色器</span></span><br><span class="line">    <span class="comment">// 参数2：模型视图矩阵</span></span><br><span class="line">    <span class="comment">// 参数3：投影矩阵</span></span><br><span class="line">    <span class="comment">// 参数4：基本颜色值</span></span><br><span class="line">    shaderManager.<span class="built_in">UseStockShader</span>(GLT_SHADER_DEFAULT_LIGHT, transformPipeline.<span class="built_in">GetModelViewMatrix</span>(), transformPipeline.<span class="built_in">GetProjectionMatrix</span>(), vRed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.绘制</span></span><br><span class="line">    torusBatch.<span class="built_in">Draw</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6.出栈 绘制完成恢复</span></span><br><span class="line">    modelViewMatix.<span class="built_in">PopMatrix</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.交换缓存区</span></span><br><span class="line">    <span class="built_in">glutSwapBuffers</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setupRC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.设置背景颜色</span></span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span> );</span><br><span class="line">    <span class="comment">//2.初始化着色器管理器</span></span><br><span class="line">    shaderManager.<span class="built_in">InitializeStockShaders</span>();</span><br><span class="line">    <span class="comment">//3.将相机向后移动7个单元：肉眼到物体之间的距离</span></span><br><span class="line">    viewFrame.<span class="built_in">MoveForward</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//4.创建一个甜甜圈</span></span><br><span class="line">    <span class="comment">//void gltMakeTorus(GLTriangleBatch&amp; torusBatch, GLfloat majorRadius, GLfloat minorRadius, GLint numMajor, GLint numMinor);</span></span><br><span class="line">    <span class="comment">//参数1：GLTriangleBatch 容器帮助类</span></span><br><span class="line">    <span class="comment">//参数2：外边缘半径</span></span><br><span class="line">    <span class="comment">//参数3：内边缘半径</span></span><br><span class="line">    <span class="comment">//参数4、5：主半径和从半径的细分单元数量</span></span><br><span class="line">    <span class="built_in">gltMakeTorus</span>(torusBatch, <span class="number">1.0f</span>, <span class="number">0.3f</span>, <span class="number">52</span>, <span class="number">26</span>);</span><br><span class="line">    <span class="comment">//5.点的大小(方便点填充时,肉眼观察)</span></span><br><span class="line">    <span class="built_in">glPointSize</span>(<span class="number">1.0f</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过键盘↑↓←→修改旋转方向，控制Camera的移动，从而改变视口</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">specialKeys</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.判断方向</span></span><br><span class="line">    <span class="keyword">if</span>(key == GLUT_KEY_UP)</span><br><span class="line">        <span class="comment">//2.根据方向调整观察者位置</span></span><br><span class="line">        viewFrame.<span class="built_in">RotateWorld</span>(<span class="built_in">m3dDegToRad</span>(<span class="number">-5.0</span>), <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    <span class="keyword">if</span>(key == GLUT_KEY_DOWN)</span><br><span class="line">        viewFrame.<span class="built_in">RotateWorld</span>(<span class="built_in">m3dDegToRad</span>(<span class="number">5.0</span>), <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key == GLUT_KEY_LEFT)</span><br><span class="line">        viewFrame.<span class="built_in">RotateWorld</span>(<span class="built_in">m3dDegToRad</span>(<span class="number">-5.0</span>), <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(key == GLUT_KEY_RIGHT)</span><br><span class="line">        viewFrame.<span class="built_in">RotateWorld</span>(<span class="built_in">m3dDegToRad</span>(<span class="number">5.0</span>), <span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新刷新</span></span><br><span class="line">    <span class="built_in">glutPostRedisplay</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 窗口改变</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeSize</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.防止h变为0</span></span><br><span class="line">    <span class="keyword">if</span>(h == <span class="number">0</span>) &#123;</span><br><span class="line">        h = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.设置视口窗口尺寸</span></span><br><span class="line">    <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.setPerspective函数的参数是一个从顶点方向看去的视场角度（用角度值表示）</span></span><br><span class="line">    <span class="comment">// 设置透视模式，初始化其透视矩阵</span></span><br><span class="line">    viewFrustum.<span class="built_in">SetPerspective</span>(<span class="number">35.0f</span>, <span class="built_in">float</span>(w)/<span class="built_in">float</span>(h), <span class="number">1.0f</span>, <span class="number">100.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.把透视矩阵加载到透视矩阵对阵中</span></span><br><span class="line">    projectionMatrix.<span class="built_in">LoadMatrix</span>(viewFrustum.<span class="built_in">GetProjectionMatrix</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.初始化渲染管线</span></span><br><span class="line">    transformPipeline.<span class="built_in">SetMatrixStacks</span>(modelViewMatix, projectionMatrix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">gltSetWorkingDirectory</span>(argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glutInit</span>(&amp;argc, argv);</span><br><span class="line">    <span class="built_in">glutInitDisplayMode</span>(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH | GLUT_STENCIL);</span><br><span class="line">    <span class="built_in">glutInitWindowSize</span>(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    <span class="built_in">glutCreateWindow</span>(<span class="string">&quot;Geometry Test Program&quot;</span>);</span><br><span class="line">    <span class="built_in">glutReshapeFunc</span>(changeSize);</span><br><span class="line">    <span class="built_in">glutSpecialFunc</span>(specialKeys);</span><br><span class="line">    <span class="built_in">glutDisplayFunc</span>(renderScene);</span><br><span class="line"></span><br><span class="line">    GLenum err = <span class="built_in">glewInit</span>();</span><br><span class="line">    <span class="keyword">if</span> (GLEW_OK != err) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;GLEW Error: %s\n&quot;</span>, <span class="built_in">glewGetErrorString</span>(err));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setupRC</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glutMainLoop</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不开启正背面剔除，背面的黑色面也会显示出来</p><img src="/images/post/opengl/face-culling.png" class="" width="600"><p>在旋转到中间的过程时遇到下面情况</p><img src="/images/post/opengl/face-culling-deep-problem.png" class="" width="300"><h3 id="深度测试"><a href="#深度测试" class="headerlink" title="深度测试"></a>深度测试</h3><p>出现上面缺口的原因是由于，在同一个位置，出现了两个正面，甜甜圈的内环和外环，都有一个正面，OpenGL不知道显示哪一个面，就出现了上面的问题，把内环的面显示出来了，覆盖了外环的面，解决问题之前，先来理解几个概念</p><h4 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h4><p>深度是指OpenGL坐标系中，像素点的Z坐标距观察者的距离</p><ul><li>如果观察者在Z轴的正方向，Z值越大则越靠近观察者</li><li>如果观察者在Z轴的负方向，Z值越小则越靠近观察者</li></ul><h4 id="深度缓冲区（Depth-Buffer）"><a href="#深度缓冲区（Depth-Buffer）" class="headerlink" title="深度缓冲区（Depth Buffer）"></a>深度缓冲区（Depth Buffer）</h4><p>深度缓存区是指一块专门内存区域，存储在显存中，用于存储屏幕上所绘制图形的每个像素点的深度值，深度越大，离观察者越远</p><h4 id="深度测试-1"><a href="#深度测试-1" class="headerlink" title="深度测试"></a>深度测试</h4><p>在绘制物体的时候，像素点的深度会和之前的深度值做比较，如果 新值 &gt; 旧值，则会被丢弃不绘制，反之，新值会更新到<code>深度缓冲区</code>，新的颜色值同样会更新到<code>颜色缓冲区</code>，这个过程称为深度测试，确保所有绘制的点都是距离观察者最近的</p><p>开启和关闭深度测试</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在RenderScene清空完缓冲区后设置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启深度测试</span></span><br><span class="line"><span class="built_in">glEnable</span>(GL_DEPTH_TEST);</span><br><span class="line"><span class="comment">// 关闭深度测试</span></span><br><span class="line"><span class="built_in">glDisable</span>(GL_DEPTH_TEST);</span><br></pre></td></tr></table></figure><img src="/images/post/opengl/face-culling-deep.png" class="" width="600"><p>相比于<code>正背面剔除</code>，<code>深度测试</code>不仅可以解决正背面显示问题，还能解决上面隐藏面消除的问题</p><h4 id="ZFighting闪烁"><a href="#ZFighting闪烁" class="headerlink" title="ZFighting闪烁"></a>ZFighting闪烁</h4><p>深度测试很好的解决了3D图形层次显示的问题，但是还存在一个误差的问题，开启深度测试后，由于深度缓冲区精度有限制，导致深度值相差很小时，OpenGL出现无法判断的情况，导致出现画面交错闪现的现象，这个问题成为<code>ZFighting闪烁</code>，如下图</p><img src="/images/post/opengl/z-fighting.png" class="" width="600"><p>其问题产生的主要原因是由于图形靠的太近，导致无法区分出图层先后次序，针对该问题，OpenGL提供了一种多边形偏移（Polygon Offset）方案</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启多边形偏移</span></span><br><span class="line"><span class="built_in">glEnable</span>(GL_POLYGON_OFFSET_FILL);</span><br></pre></td></tr></table></figure><table><thead><tr><th>多边形偏移枚举值</th><th>对应光栅化模式</th></tr></thead><tbody><tr><td>GL_POLYGON_OFFSET_POINT</td><td>GL_POINT</td></tr><tr><td>GL_POLYGON_OFFSET_LINE</td><td>GL_LINE</td></tr><tr><td>GL_POLYGON_OFFSET_FILL</td><td>GL_FILL</td></tr></tbody></table><p>使用步骤</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 开启多边形偏移</span></span><br><span class="line"><span class="built_in">glEnable</span>(GL_POLYGON_OFFSET_FILL);</span><br><span class="line"><span class="comment">// 2. 指定偏移量glPolygonOffset (GLfloat factor, GLfloat units);，参数一般填 -1 和 -1</span></span><br><span class="line"><span class="built_in">glPolygonOffset</span> (GLfloat factor, GLfloat units);</span><br><span class="line"><span class="comment">// 3. 关闭多边形偏移</span></span><br><span class="line"><span class="built_in">glDisable</span>(GL_POLYGON_OFFSET_FILL)</span><br></pre></td></tr></table></figure><p>预防ZFighting闪烁</p><ul><li>避免两个物体靠的太近：在绘制时，插入一个小偏移</li><li>将近裁剪面（设置透视投影时设置）设置的离观察者远一些：提高裁剪范围内的精确度</li><li>使用更高位数的深度缓冲区：提高深度缓冲区的精确度</li></ul>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS离屏渲染原理和优化</title>
      <link href="/2020-07-14/ios-offscreen-render/"/>
      <url>/2020-07-14/ios-offscreen-render/</url>
      
        <content type="html"><![CDATA[<p>几乎做iOS开发的人都知道，设置<code>圆角</code>会触发<code>离屏渲染</code>，那么什么情况下设置圆角不会触发离屏渲染呢，为什么会触发离屏渲染。</p><span id="more"></span><h2 id="油画算法"><a href="#油画算法" class="headerlink" title="油画算法"></a>油画算法</h2><p>计算机图层的叠加绘制大概遵循<code>油画算法</code>，在这种算法下会按层绘制，首先绘制距离较远的场景，然后用绘制距离较近的场景覆盖较远的部分，如下图。</p><img src="/images/post/opengl/painter-draw.png" class="" width="800" title="油画算法"><p>这样就不会导致远的物体挡住近的物体，但是有个局限，就是无法在后面一层渲染完成后，再回去修改前面图层，因为前面的图层已经被覆盖了</p><h2 id="离屏渲染"><a href="#离屏渲染" class="headerlink" title="离屏渲染"></a>离屏渲染</h2><p>对于有前后依赖的图层（如全局剪切，阴影等），油画算法无法满足我们的需求，对于有前后依赖的图层，我们可以再另开辟一个空间，用于临时渲染，渲染完成后再渲染到当前的缓冲区上，这个临时渲染，就是<code>离屏渲染</code>，由于需要开辟一个新的内存空间，并且共享同一个上下文，所以还需要做上下文切换（状态切换），并且渲染完成后还要进行拷贝操作</p><ol><li><code>开辟临时缓存空间</code></li><li><code>上下文切换</code>，上下文对象比较大，切换操作会带来一定的性能消耗</li><li><code>内存拷贝</code></li><li><code>额外的渲染</code>（没有进一步考证）</li></ol><p>上面4项带来的开销会很大，并且每一帧渲染都需要执行，如果屏幕上触发离屏渲染的操作过多，会导致GPU渲染时间过长造成卡顿，应该避免触发离屏渲染</p><img src="/images/post/opengl/offscreen-flow.png" class="" width="600"><h2 id="iOS圆角问题"><a href="#iOS圆角问题" class="headerlink" title="iOS圆角问题"></a>iOS圆角问题</h2><p>官方文档关于<code>layer.cornerRadius</code>的描述</p><img src="/images/post/opengl/layer-cornerradius.png" class="" width="600"><blockquote><p><code>layer.cornerRadius</code>只作用<code>backgroundColor</code>和<code>border</code>，不会作用于<code>content</code>，支持<code>动画</code></p></blockquote><p>离屏渲染是GPU无法按油画算法一次性渲染完我们的视图才会触发，我们先来看几个iOS的例子，模拟器打开<code>Color Off-screen Rendered</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. UIImageView</span></span><br><span class="line"><span class="keyword">let</span> imageView <span class="operator">=</span> <span class="type">UIImageView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">50</span>, y: <span class="number">100</span>, width: <span class="number">300</span>, height: <span class="number">200</span>))</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(imageView)</span><br><span class="line">imageView.image <span class="operator">=</span> <span class="type">UIImage</span>.<span class="keyword">init</span>(named: <span class="string">&quot;test.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// image + cornerRadius + masksToBounds 不会触发离屏渲染</span></span><br><span class="line">imageView.layer.cornerRadius <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">imageView.layer.masksToBounds <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发离屏渲染</span></span><br><span class="line">imageView.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.green</span><br><span class="line"><span class="comment">// 添加一个空的UIView不会触发离屏渲染</span></span><br><span class="line"><span class="comment">// imageView.addSubview(UIView(frame: CGRect(x: 0, y: 0, width: 10, height: 10)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. UIButton</span></span><br><span class="line"><span class="keyword">let</span> button <span class="operator">=</span> <span class="type">UIButton</span>(type: .custom)</span><br><span class="line">button.frame <span class="operator">=</span> <span class="type">CGRect</span>(x: <span class="number">50</span>, y: <span class="number">300</span> <span class="operator">+</span> <span class="number">50</span>, width: <span class="number">300</span>, height: <span class="number">50</span>)</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(button)</span><br><span class="line">button.setTitle(<span class="string">&quot;Test&quot;</span>, for: .normal)</span><br><span class="line">button.setTitleColor(<span class="type">UIColor</span>.blue, for: .normal)</span><br><span class="line">button.layer.cornerRadius <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">button.layer.masksToBounds <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发离屏渲染</span></span><br><span class="line">button.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.green</span><br><span class="line"><span class="comment">// 触发离屏渲染</span></span><br><span class="line">button.setBackgroundImage(<span class="type">UIImage</span>(named: <span class="string">&quot;test.jpg&quot;</span>), for: .normal)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. UIView</span></span><br><span class="line"><span class="keyword">let</span> view <span class="operator">=</span> <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">50</span>, y: <span class="number">400</span> <span class="operator">+</span> <span class="number">50</span>, width: <span class="number">300</span>, height: <span class="number">50</span>))</span><br><span class="line"><span class="keyword">self</span>.view.addSubview(view)</span><br><span class="line">view.backgroundColor <span class="operator">=</span> <span class="type">UIColor</span>.red</span><br><span class="line">view.layer.cornerRadius <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">view.layer.masksToBounds <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// label如果被渲染，则会触发渲染，如果text为空不会被渲染</span></span><br><span class="line"><span class="keyword">let</span> label <span class="operator">=</span> <span class="type">UILabel</span>(frame: <span class="type">CGRect</span>(x: <span class="number">10</span>, y: <span class="number">10</span>, width: <span class="number">1</span>, height: <span class="number">1</span>))</span><br><span class="line">label.text <span class="operator">=</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">view.addSubview(label)</span><br></pre></td></tr></table></figure><img src="/images/post/opengl/offscreen-demo.png" class="" width="300" title="出现离屏渲染的地方被标记为黄色"><p>如果设置了<code>cornerRadius+masksToBounds</code>（裁切），并且用于渲染的图层大于1，就会触发离屏渲染，其中如果设置<code>backgroundColor</code>，背景颜色相当于一个单独一个图层，<code>subviews</code>的图层也算，UILabel如果text为空（subviews为空，backgroundColor为空），则不会生成渲染图层</p><p>所以设置了<code>cornerRadius+masksToBounds</code>的</p><ul><li><code>UIImageView</code>设置图片不会触发离屏渲染</li><li><code>UIView</code>设置了背景颜色，但不添加subview，不会触发离屏渲染</li><li><code>UILabel</code>设置了文字，并且设置了backgroundColor，会触发离屏渲染</li><li><code>UIButton</code>只设置文字和背景，会触发离屏渲染</li></ul><h2 id="优化圆角问题"><a href="#优化圆角问题" class="headerlink" title="优化圆角问题"></a>优化圆角问题</h2><p>基于上面的问题，我们可以有几个优化方向</p><ol><li>避免使用<code>裁切</code>(<code>masksToBounds</code>)操作，如果我们能确保View里面的内容不会溢出，就可以不用<code>masksToBounds</code></li><li>即使要用到裁切的操作，尽量放到子view里面，不要在上层view使用masksToBounds，因为裁切需要对所有的layer和subview所有图层都进行裁切，这样离屏渲染会需要更大的空间，裁切更多的图层，应该只对必要的view&#x2F;layer进行裁切</li><li>提前切好需要的圆角，避免渲染的时候再切</li></ol><h2 id="其他触发离屏渲染的情况"><a href="#其他触发离屏渲染的情况" class="headerlink" title="其他触发离屏渲染的情况"></a>其他触发离屏渲染的情况</h2><ul><li>使用了遮罩的 layer (<code>layer.mask</code>)</li><li>需要进行裁剪的 layer (<code>layer.masksToBounds</code> &#x2F; <code>view.clipsToBounds</code>)</li><li>设置了组透明度为 YES，并且透明度不为 1 的layer (<code>layer.allowsGroupOpacity</code> &#x2F; <code>layer.opacity</code>)</li><li>添加了投影的 layer (<code>layer.shadow</code>)，但如果设置了shadowPath，则系统已经知道如何绘制阴影了，不会触发离屏渲染</li><li>采用了光栅化的 layer (<code>layer.shouldRasterize</code>)，光栅化也可以优化离屏渲染问题</li><li>绘制了文字的 layer (<code>UILabel</code>, <code>CATextLayer</code>, <code>CoreText</code>等)</li></ul><h2 id="毛玻璃"><a href="#毛玻璃" class="headerlink" title="毛玻璃"></a>毛玻璃</h2><p>在iOS系统中，毛玻璃效果应用的非常广泛，从上面分析也可以知道，这个肯定会触发离屏渲染的，图层之间存在依赖，下面是<code>UIBlurEffect</code>的处理过程</p><img src="/images/post/opengl/uiblureffect-render2.png" class="" width="600"><p>在GPU的渲染过程如下图</p><img src="/images/post/opengl/uiblureffect-render.png" class="" width="1000"><p>GPU在渲染完Content之后，会另外开辟一个<code>Off-screen buffer</code>，执行下面步骤，最后再做合并处理，最后再拷贝回<code>On-screen buffer</code>上</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OpenGL案例2】正方形键位控制</title>
      <link href="/2020-07-12/opengl-triangle-demo2/"/>
      <url>/2020-07-12/opengl-triangle-demo2/</url>
      
        <content type="html"><![CDATA[<p>上一篇完成了<a href="/2020-07-11/opengl-triangle-demo/">三角形的绘制</a>，今天来添加一个变换控制，通过键盘的↑↓←→控制图形的移动</p><span id="more"></span><h2 id="画正方形"><a href="#画正方形" class="headerlink" title="画正方形"></a>画正方形</h2><p>基于原来的工程，把三角形改为正方形，<code>GL_TRIANGLES</code>修改为<code>GL_TRIANGLE_FAN</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正方形边长</span></span><br><span class="line">GLfloat blockSize = <span class="number">0.2f</span>;</span><br><span class="line"><span class="comment">// 正方形的4个点坐标</span></span><br><span class="line">GLfloat vVerts[] = &#123;</span><br><span class="line">        -blockSize,-blockSize,<span class="number">0.0f</span>,</span><br><span class="line">        blockSize,-blockSize,<span class="number">0.0f</span>,</span><br><span class="line">        blockSize,blockSize,<span class="number">0.0f</span>,</span><br><span class="line">        -blockSize,blockSize,<span class="number">0.0f</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三角形顶点改为正方形，图元装配改为GL_TRIANGLE_FAN</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setupRC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修改为GL_TRIANGLE_FAN ，4个顶点构成四边形</span></span><br><span class="line">    triangleBatch.<span class="built_in">Begin</span>(GL_TRIANGLE_FAN, <span class="number">4</span>);</span><br><span class="line">    triangleBatch.<span class="built_in">CopyVertexData3f</span>(vVerts);</span><br><span class="line">    triangleBatch.<span class="built_in">End</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/opengl/square-demo.png" class="" width="600" title="绘制正方形"><h2 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h2><h3 id="修改坐标"><a href="#修改坐标" class="headerlink" title="修改坐标"></a>修改坐标</h3><p>平移变换可以直接修改正方形的4个顶点，然后重新刷新</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x轴步长</span></span><br><span class="line">GLfloat xStepSize = <span class="number">0.025f</span>;</span><br><span class="line"><span class="comment">// y轴步长</span></span><br><span class="line">GLfloat yStepSize = <span class="number">0.025f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新生成顶点</span></span><br><span class="line">GLfloat vVerts[] = &#123;</span><br><span class="line">    -blockSize + xStepSize, -blockSize + yStepSize, <span class="number">0.0f</span>,</span><br><span class="line">    blockSize + xStepSize, -blockSize + yStepSize, <span class="number">0.0f</span>,</span><br><span class="line">    blockSize + xStepSize, blockSize + yStepSize, <span class="number">0.0f</span>,</span><br><span class="line">    -blockSize + xStepSize, blockSize + yStepSize, <span class="number">0.0f</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新的顶点重新设置到批次类中</span></span><br><span class="line">triangleBatch.<span class="built_in">CopyVertexData3f</span>(vVerts);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发重新绘制</span></span><br><span class="line"><span class="built_in">glutPostRedisplay</span>();</span><br></pre></td></tr></table></figure><h3 id="矩阵变换"><a href="#矩阵变换" class="headerlink" title="矩阵变换"></a>矩阵变换</h3><p>上面直接通过修改坐标的方式过于麻烦，对于复杂的图形做变换会非常麻烦，而推荐使用<code>矩阵变换</code>，基于<code>平面着色器</code>，可以作用于任何的图形，不需要手动计算坐标，不仅可以做平移，还能做旋转缩放等</p><p><code>renderScene</code>操作流程</p><ol><li>清理特定缓存区</li><li>根据平移距离生成<code>平移矩阵</code></li><li>如果有多个矩阵变换，通过<code>叉乘</code>得到最终矩阵</li><li>将<code>矩阵结果</code>交给存储着色器（<code>平面着色器</code>）中绘制</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// x轴平移距离</span></span><br><span class="line">GLfloat xPos = <span class="number">0.1f</span>;</span><br><span class="line"><span class="comment">// y轴平移距离</span></span><br><span class="line">GLfloat yPos = <span class="number">0.1f</span>;</span><br><span class="line"><span class="comment">// 旋转(旋转5度)</span></span><br><span class="line">GLfloat rotate = <span class="number">5.0f</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">renderScene</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 清空缓冲区</span></span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT|GL_STENCIL_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义2个矩阵（平移矩阵，旋转矩阵）</span></span><br><span class="line">    M3DMatrix44f mTransfromMatrix, mRotationMartix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 平移(xPos, yPos)</span></span><br><span class="line">    <span class="built_in">m3dTranslationMatrix44</span>(mTransfromMatrix, xPos, yPos, <span class="number">0.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 旋转(rotate)</span></span><br><span class="line">    <span class="built_in">m3dRotationMatrix44</span>(mRotationMartix, <span class="built_in">m3dDegToRad</span>(rotate), <span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将旋转和移动的矩阵结果 合并到mFinalTransform （矩阵相乘）</span></span><br><span class="line">    M3DMatrix44f mFinalTransform;</span><br><span class="line">    <span class="built_in">m3dMatrixMultiply44</span>(mFinalTransform, mTransfromMatrix, mRotationMartix);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正方形填充颜色</span></span><br><span class="line">    GLfloat vRed[] = &#123;<span class="number">1.0f</span>,<span class="number">0.0f</span>,<span class="number">0.0f</span>,<span class="number">0.0f</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将矩阵结果 提交给固定着色器（平面着色器）中绘制</span></span><br><span class="line">    shaderManager.<span class="built_in">UseStockShader</span>(GLT_SHADER_FLAT, mFinalTransform, vRed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提交顶点到着色器绘制</span></span><br><span class="line">    triangleBatch.<span class="built_in">Draw</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行交换缓存区</span></span><br><span class="line">    <span class="built_in">glutSwapBuffers</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="键盘控制"><a href="#键盘控制" class="headerlink" title="键盘控制"></a>键盘控制</h2><p>GLUT提供了键盘监听事件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册特殊函数</span></span><br><span class="line"><span class="built_in">glutSpecialFunc</span>(onSpecialKeys);</span><br></pre></td></tr></table></figure><p>实现上下左右键的监听</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SpecialKeys</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == GLUT_KEY_UP) &#123;</span><br><span class="line">        yPos += stepSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == GLUT_KEY_DOWN) &#123;</span><br><span class="line">        yPos -= stepSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == GLUT_KEY_LEFT) &#123;</span><br><span class="line">        xPos -= stepSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == GLUT_KEY_RIGHT) &#123;</span><br><span class="line">        xPos += stepSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 边缘检测</span></span><br><span class="line">    <span class="keyword">if</span> (xPos &lt; (<span class="number">-1.0f</span> + blockSize)) &#123;</span><br><span class="line">        xPos = <span class="number">-1.0f</span> + blockSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (xPos &gt; (<span class="number">1.0f</span> - blockSize)) &#123;</span><br><span class="line">        xPos = <span class="number">1.0f</span> - blockSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (yPos &lt; (<span class="number">-1.0f</span> + blockSize)) &#123;</span><br><span class="line">        yPos = <span class="number">-1.0f</span> + blockSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (yPos &gt; (<span class="number">1.0f</span> - blockSize)) &#123;</span><br><span class="line">        yPos = <span class="number">1.0f</span> - blockSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重新绘制</span></span><br><span class="line">    <span class="built_in">glutPostRedisplay</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/opengl/square-demo.gif" class="" width="600" title="键盘控制正方形移动"><p>完整代码见<a href="https://github.com/zhengbomo/OpenGLDemo/tree/master/002--%E9%94%AE%E7%9B%98%E6%8E%A7%E5%88%B6%E6%AD%A3%E6%96%B9%E5%BD%A2">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【OpenGL案例1】绘制一个三角形</title>
      <link href="/2020-07-11/opengl-triangle-demo/"/>
      <url>/2020-07-11/opengl-triangle-demo/</url>
      
        <content type="html"><![CDATA[<p>通过使用OpenGL绘制一个三角形，了解OpenGL的一些常用API和绘制流程，这里使用了<a href="https://www.opengl.org/resources/libraries/glut/">GLUT</a>（OpenGL Utility Toolkit）的API，<code>GLUT</code>是OpenGL官方提供的OpenGL工具箱，封装了一些有用的工具，用于辅助操作OpenGL</p><span id="more"></span><h2 id="工具API"><a href="#工具API" class="headerlink" title="工具API"></a>工具API</h2><p>本案例也使用<code>GLUT</code>工具进行绘制，使用最基本的固定着色器来绘制，本案例会用到下面几个头文件</p><table><thead><tr><th>头文件</th><th>说明</th></tr></thead><tbody><tr><td>GLShaderManager.h</td><td>着色器管理类，用于创建和管理着色器，还提供一组内置的存储着色器（固定管线着色器）</td></tr><tr><td>GLTools.h</td><td>包含大部分类似C语⾔的独⽴函数</td></tr><tr><td>GLUT.h</td><td>OpenGL工具箱</td></tr></tbody></table><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p>这里会注册两个函数用于绘制</p><ul><li><code>renderSence</code>: 类似于iOS的类似于<code>drawRect</code>，每次View需要重新绘制的时候，会被调用</li><li><code>changeSize</code>: 窗口大小变化的时候被调用，通常用于调整glview的视口</li></ul><p>定义两个变量用于<code>管理着色器</code>和<code>顶点数据</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GLShaderManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;GLTools.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLUT/GLUT.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个，着色管理器</span></span><br><span class="line">GLShaderManager shaderManager;</span><br><span class="line"><span class="comment">// 简单的批次容器，用于将顶点数据提交给着色器使用</span></span><br><span class="line">GLBatch triangleBatch;</span><br></pre></td></tr></table></figure><h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><p>程序启动的时候，我们需要做一些初始化操作</p><ol><li>初始化<code>glutInit</code></li><li>初始化双缓冲区，颜色模式，深度，模板</li><li>设置窗口信息（大小，标题）</li><li>注册生命周期函数：<code>renderSence</code>和<code>changeSize</code></li><li>测试驱动可用性: 通过<code>glewInit</code>结果判断</li><li>初始化渲染数据<code>setupRC</code></li><li>开启事件循环</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化GLUT库,这个函数只是传说命令参数并且初始化glut库</span></span><br><span class="line">    <span class="built_in">glutInit</span>(&amp;argc, argv);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     初始化双缓冲窗口，其中标志GLUT_DOUBLE、GLUT_RGBA、GLUT_DEPTH、GLUT_STENCIL分别指</span></span><br><span class="line"><span class="comment">     双缓冲窗口、RGBA颜色模式、深度测试、模板缓冲区</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     --GLUT_DOUBLE`：双缓存窗口，是指绘图命令实际上是离屏缓存区执行的，然后迅速转换成窗口视图，这种方式，经常用来生成动画效果；</span></span><br><span class="line"><span class="comment">     --GLUT_DEPTH`：标志将一个深度缓存区分配为显示的一部分，因此我们能够执行深度测试；</span></span><br><span class="line"><span class="comment">     --GLUT_STENCIL`：确保我们也会有一个可用的模板缓存区。</span></span><br><span class="line"><span class="comment">     深度、模板测试后面会细致讲到</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">glutInitDisplayMode</span>(GLUT_DOUBLE|GLUT_RGBA|GLUT_DEPTH|GLUT_STENCIL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//GLUT窗口大小、窗口标题</span></span><br><span class="line">    <span class="built_in">glutInitWindowSize</span>(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">    <span class="built_in">glutCreateWindow</span>(<span class="string">&quot;Triangle&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册窗口改变事件</span></span><br><span class="line">    <span class="built_in">glutReshapeFunc</span>(changeSize);</span><br><span class="line">    <span class="comment">// 注册显示函数，当需要重新绘制的时候，会调用</span></span><br><span class="line">    <span class="built_in">glutDisplayFunc</span>(renderScene);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个GLEW库，测试是否报错，确保OpenGL API对程序完全可用。</span></span><br><span class="line">    GLenum status = <span class="built_in">glewInit</span>();</span><br><span class="line">    <span class="keyword">if</span> (GLEW_OK != status) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;GLEW Error:%s\n&quot;</span>,<span class="built_in">glewGetErrorString</span>(status));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备我们需要渲染的数据</span></span><br><span class="line">    <span class="built_in">setupRC</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启事件循环，相当于iOS的runloop</span></span><br><span class="line">    <span class="built_in">glutMainLoop</span>();</span><br><span class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setupRC"><a href="#setupRC" class="headerlink" title="setupRC"></a>setupRC</h3><p>我们要画一个<code>三角形</code>，可以在这里做一些准备工作</p><ul><li>设置清屏颜色</li><li>初始化着色器</li><li>初始化顶点数据</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">setupRC</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置清屏颜色（背景颜色，白色）</span></span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有着色器，在OpenGL 核心框架中是无法进行任何渲染的。这里初始化一个渲染管理器，在renderSence会用到。这里使用固定管线着色器</span></span><br><span class="line">    shaderManager.<span class="built_in">InitializeStockShaders</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 三角形顶点</span></span><br><span class="line">    GLfloat vVerts[] = &#123;</span><br><span class="line">        <span class="number">-0.5f</span>,<span class="number">0.0f</span>,<span class="number">0.0f</span>,</span><br><span class="line">        <span class="number">0.5f</span>,<span class="number">0.0f</span>,<span class="number">0.0f</span>,</span><br><span class="line">        <span class="number">0.0f</span>,<span class="number">0.5f</span>,<span class="number">0.0f</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将顶点数据传递到三角形批次类中</span></span><br><span class="line">    triangleBatch.<span class="built_in">Begin</span>(GL_TRIANGLES, <span class="number">3</span>);</span><br><span class="line">    triangleBatch.<span class="built_in">CopyVertexData3f</span>(vVerts);</span><br><span class="line">    triangleBatch.<span class="built_in">End</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>triangleBatch</code>在Begin的时候设置了一个图元装配方式为<code>GL_TRIANGLES</code>，在OpenGL中，相同的顶点可以有不同的装配方式，如下图</p><img src="/images/post/opengl/primitive-assembly.jpg" class="" width="800"><table><thead><tr><th>图元</th><th>描述</th></tr></thead><tbody><tr><td>GL_POINTS</td><td>每个顶点在屏幕上都是单独点</td></tr><tr><td>GL_LINES</td><td>每⼀对顶点定义⼀个线段</td></tr><tr><td>GL_LINE_STRIP</td><td>一个从第⼀个顶点依次经过每⼀个后续顶点而绘制的线条</td></tr><tr><td>GL_LINE_LOOP</td><td>和GL_LINE_STRIP相同，但是最后⼀个顶点和第⼀个顶点连接起来了</td></tr><tr><td>GL_TRIANGLES</td><td>每3个顶点定义⼀个新的三角形</td></tr><tr><td>GL_TRIANGLE_STRIP</td><td>共⽤一个条带(strip)上的顶点的一组三⻆形</td></tr><tr><td>GL_TRIANGLE_FAN</td><td>以⼀个圆点为中⼼呈扇形排列，共⽤相邻顶点的⼀组三⻆形</td></tr></tbody></table><h3 id="renderSence"><a href="#renderSence" class="headerlink" title="renderSence"></a>renderSence</h3><p>准备好数据之后，就可以开始绘制了，核心代码在之前注册的<code>renderSence</code>里面</p><ul><li>清空缓冲区（颜色缓冲区，深度缓冲区，模板缓冲区），避免脏数据</li><li>使用<code>着色器</code>填充颜色</li><li>批次类将<code>顶点数据</code>提交到<code>着色器</code>上绘制</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">RenderScene</span><span class="params">(<span class="type">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1.清除一个或者一组特定的缓存区，如果后面需要用到这些缓冲区，就需要清空，不然会出现之前使用的脏数据（如深度缓冲区，颜色缓冲区，模板缓冲区等）</span></span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT|GL_STENCIL_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.设置一个颜色用来填充三角形</span></span><br><span class="line">    GLfloat vRed[] = &#123;<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0f</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 使用单元着色器，来对图形进行着色，即GLT_SHADER_IDENTITY着色器，这个着色器只是使用指定颜色以默认笛卡尔坐标第在屏幕上渲染几何图形</span></span><br><span class="line">    shaderManager.<span class="built_in">UseStockShader</span>(GLT_SHADER_IDENTITY, vRed);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 提交顶点数据到着色器，进行绘制</span></span><br><span class="line">    triangleBatch.<span class="built_in">Draw</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在开始的设置openGL 窗口的时候，我们指定要一个双缓冲区的渲染环境。这就意味着将在后台缓冲区进行渲染，渲染结束后交换给前台。</span></span><br><span class="line">    <span class="built_in">glutSwapBuffers</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="changeSize"><a href="#changeSize" class="headerlink" title="changeSize"></a>changeSize</h3><p>当窗口大小改变的时候，我们需要重新调整视口大小</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">changeSize</span><span class="params">(<span class="type">int</span> w,<span class="type">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// x,y 参数代表窗口中视图的左下角坐标，而宽度、高度是像素为表示，通常x,y 都是为0</span></span><br><span class="line">    <span class="built_in">glViewport</span>(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><img src="/images/post/opengl/triangle-demo.png" class="" width="600" title="三角形"><p>完整demo在<a href="https://github.com/zhengbomo/OpenGLDemo/tree/master/001--%E5%AE%8C%E6%95%B4%E6%B8%B2%E6%9F%93%E4%B8%89%E8%A7%92%E5%BD%A2">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS图像渲染原理解析</title>
      <link href="/2020-07-10/ios-render/"/>
      <url>/2020-07-10/ios-render/</url>
      
        <content type="html"><![CDATA[<h2 id="CPU和GPU"><a href="#CPU和GPU" class="headerlink" title="CPU和GPU"></a>CPU和GPU</h2><img src="/images/post/opengl/cpu-gpu.png" class="" width="800"><p>从图中结构可以看出</p><ul><li><code>CPU</code>的处理单元少，由控制器和缓存单元，擅长处理复杂的逻辑以及数据结构，CPU中的并行其实是通过时间切片完成的。任务之间依赖性高，<code>擅长逻辑控制</code>  </li><li><code>GPU</code>是由许多计算单元组成，每个计算单元可以独立工作，任务之间依赖性低，擅长浮点运算，<code>擅长并发计算</code></li></ul><span id="more"></span><h2 id="计算机渲染原理"><a href="#计算机渲染原理" class="headerlink" title="计算机渲染原理"></a>计算机渲染原理</h2><h3 id="⾼级光栅扫描显示系统结构"><a href="#⾼级光栅扫描显示系统结构" class="headerlink" title="⾼级光栅扫描显示系统结构"></a>⾼级光栅扫描显示系统结构</h3><img src="/images/post/opengl/print-structure.png" class="" width="700"><h3 id="屏幕扫描"><a href="#屏幕扫描" class="headerlink" title="屏幕扫描"></a>屏幕扫描</h3><p><code>视频控制器/显示控制器</code>从<code>帧缓冲区</code>中读取图像信息（位图），经过数模转换（数字信号处-&gt;模拟型号）后通过<code>逐行扫描</code>把图像显示到显示器上的</p><img src="/images/post/opengl/screen-scan.png" class="" width="500"><h4 id="撕裂问题"><a href="#撕裂问题" class="headerlink" title="撕裂问题"></a>撕裂问题</h4><p>显示一个完整画面是需要一定时间的，视频控制器在显示图像的过程中，如果这时候帧缓冲区的数据被刷新了，就会造成<code>撕裂</code>的问题，上面部分显示前面一帧的数据，下面部分为新的数据</p><img src="/images/post/opengl/image-tear.png" class="" width="500"><h4 id="双缓冲区和垂直同步"><a href="#双缓冲区和垂直同步" class="headerlink" title="双缓冲区和垂直同步"></a>双缓冲区和垂直同步</h4><p>为了解决撕裂，苹果引入了<code>垂直同步</code>（VSync） + <code>双缓存区</code>（DoubleBuffering）来解决撕裂的问题（苹果使用的就是这个策略）</p><ol><li>垂直同步Vsync：每隔1&#x2F;60s就会发出一个信号，让GPU开始渲染图像，而这个时间间隔足够视频控制器显示图像了，App启动后，会在Runloop注册对应的CFRunLoopSource，通过mach_port，接受来自系统的Vsync事件（实际上是由硬件发出的，每秒钟发60次），CADisplayLink也是同样的原理</li><li>双缓存区 DoubleBuffering，使用两个帧缓冲区，视频控制器使用的帧缓冲区和GPU使用的分开，避免视频控制器正在使用的缓冲区被修改，避免撕裂问题，在GPU把帧数据写到帧缓冲区后，会和视频控制器使用的帧缓冲区进行交换，然后等待下一帧的渲染</li></ol><img src="/images/post/opengl/double-buffer.png" class="" width="800"><h4 id="掉帧"><a href="#掉帧" class="headerlink" title="掉帧"></a>掉帧</h4><p>上面解决了撕裂的问题，但是还有一个掉帧的问题，如下图</p><img src="/images/post/opengl/jank.png" class="" width="800"><p>当CPU和GPU渲染图像的时间过长，在下一个垂直同步信号来的时候，GPU并没有处理完一帧的数据，帧缓冲区也就没有交换，视频控制器就会显示原来缓冲区的内容</p><h4 id="三缓冲区"><a href="#三缓冲区" class="headerlink" title="三缓冲区"></a>三缓冲区</h4><p>从上图可以看出，CPU和GPU是在垂直同步信号到来的时候才开始渲染的工作，为了<code>减少掉帧</code>的情况，引入了<code>三缓冲区</code></p><p>A：显示到屏幕<br>B：提前渲染号<br>C：正在渲染</p><p>其实相当于预加载，充分利用CPU和GPU的空闲时间，提前渲染好一帧B（同时也会带来画面延迟，当然1帧的延迟是可以接受的），多留出了一帧的时间，即使在渲染C的时候出现了一次掉帧，依然能刘畅渲染，这种情况大大减小了掉帧的可能</p><p>但如果渲染C的时间过长（掉多帧），依然会带来掉帧的问题，三缓冲区本质上并不解决掉帧的问题，只是缓解</p><blockquote><p>为了解决掉帧的问题，我们只能尽可能优化我们的代码，减少CPU和GPU的渲染时间</p></blockquote><h2 id="iOS的渲染框架"><a href="#iOS的渲染框架" class="headerlink" title="iOS的渲染框架"></a>iOS的渲染框架</h2><h3 id="渲染框架"><a href="#渲染框架" class="headerlink" title="渲染框架"></a>渲染框架</h3><img src="/images/post/opengl/ios-render-structure.png" class="" width="800"><p>可以看到在iOS中的<code>CoreGraphics</code>, <code>CoreAnimation</code>, <code>CoreImage</code>都是通过OpenGL&#x2F;Metal进行渲染的，我们的App也可以使用OpenGL&#x2F;Metal来操作GPU进行渲染</p><h3 id="CoreAnimation-渲染流⽔线"><a href="#CoreAnimation-渲染流⽔线" class="headerlink" title="CoreAnimation 渲染流⽔线"></a>CoreAnimation 渲染流⽔线</h3><img src="/images/post/opengl/coreanimation-pipe.png" class="" width="1000"><p><code>CoreAnimation</code>会在<code>Runloop</code>注册一个<code>Observer</code>监听触摸事件，当点击事件到来的时候，Runloop会被唤醒处理相关的业务逻辑（UIView的创建，修改，添加动画等）</p><p>最终会在CALayer通过<code>CATransaction</code>提交到<code>RenderServer</code>中，RenderServer会对图片进行解码，并等待下一个<code>VSync</code>的到来</p><p>VSync信号到来后，<code>RenderService</code>会通过OpenGL&#x2F;Metal做一些绘制操作，然后把处理完的数据（纹理，顶点，着色器等）提交给<code>GPU</code></p><p>GPU通过下面渲染流程程（顶点数据-&gt;顶点着⾊器-&gt;⽚元着⾊器），渲染到<code>帧缓冲区</code>，然后交换<code>帧缓冲区</code>（双缓冲区）</p><p>下一个VSync信号到来的时候，视频控制器读取帧缓冲区的数据显示到屏幕上</p><p>如果此处有动画，CoreAnimation会通过<code>DisplayLink</code>等机制多次触发相关流程</p><img src="/images/post/opengl/renderservice.png" class="" width="800"><h3 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h3><ol><li><p><code>CPU</code>阶段</p><ul><li>布局（Frame）: <code>layoutSubviews</code>, <code>addSubview</code></li><li>显示（Core Graphics）: <code>drawRect</code>, 绘制字符串</li><li>准备（QuartzCore&#x2F;Core Animation）：图片<code>decode</code></li><li>提交：通过<code>IPC</code>提交(打包好的layers以及动画属性)给OpenGL&#x2F;Metal，递归提交subview的layers</li></ul></li><li><p><code>OpenGL ES/Metal</code>阶段，主要是对图层进行取色，采样，生成纹理，绑定数据，生成前后帧缓存，为GPU渲染做准备</p><ul><li>生成(Generate)</li><li>绑定(Bind)</li><li>缓存数据(Buffer Data)</li><li>启用(Enable)</li><li>设置指针(Set Pointers)</li><li>绘图(Draw)</li><li>清除(Delete)</li></ul></li><li><p><code>GPU</code>阶段</p><ul><li>接收提交的纹理（Texture）和顶点描述（三角形）</li><li>应用变换（transform）</li><li>合并渲染（离屏渲染等）</li></ul></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.jianshu.com/p/39b91ecaaac8">iOS界面渲染流程分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解flutter中的Key</title>
      <link href="/2020-07-04/flutter-key/"/>
      <url>/2020-07-04/flutter-key/</url>
      
        <content type="html"><![CDATA[<p>我们知道，flutter有三颗树，widget树在每次setState的时候都会重建，而element树不会，而是会通过diff算法，计算出哪些element需要重建，哪些element可以重用，我们通过一个例子来开始</p><span id="more"></span><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageState createState() =&gt; _HomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> _random = Random();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _items = [</span><br><span class="line">    ListItem(title: <span class="string">&quot;aaa&quot;</span>),</span><br><span class="line">    ListItem(title: <span class="string">&quot;bbb&quot;</span>),</span><br><span class="line">    ListItem(title: <span class="string">&quot;ccc&quot;</span>),</span><br><span class="line">  ];</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;key demo&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">        children: _items,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="comment">// 删除第一个元素</span></span><br><span class="line">          _items.removeAt(<span class="number">0</span>);</span><br><span class="line">          setState(() &#123;&#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">定义一个item</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line">  <span class="comment">// color放在widget</span></span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromARGB(</span><br><span class="line">      <span class="number">255</span>, _random.nextInt(<span class="number">256</span>), _random.nextInt(<span class="number">256</span>), _random.nextInt(<span class="number">256</span>));</span><br><span class="line"></span><br><span class="line">  ListItem(&#123;<span class="keyword">this</span>.title&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      child: Text(</span><br><span class="line">        <span class="keyword">this</span>.title,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">      color: <span class="keyword">this</span>.color,</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/flutter/flutter-key-stateless.gif" class="" width="300"><p>运行正常，接下来我们把<code>ListItem</code>换成stateful</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  ListItem(&#123;<span class="keyword">this</span>.title&#125;);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ListItemState createState() =&gt; _ListItemState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ListItemState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ListItem</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// color放在state</span></span><br><span class="line">  <span class="keyword">final</span> Color color = Color.fromARGB(</span><br><span class="line">      <span class="number">255</span>, _random.nextInt(<span class="number">256</span>), _random.nextInt(<span class="number">256</span>), _random.nextInt(<span class="number">256</span>));</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      alignment: Alignment.center,</span><br><span class="line">      child: Text(</span><br><span class="line">        widget.title,</span><br><span class="line">        style: TextStyle(color: Colors.white, fontSize: <span class="number">20</span>),</span><br><span class="line">      ),</span><br><span class="line">      color: <span class="keyword">this</span>.color,</span><br><span class="line">      width: <span class="number">100</span>,</span><br><span class="line">      height: <span class="number">100</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/flutter/flutter-key-stateful.gif" class="" width="300"><p>从上图可以看出，颜色和文字混了，这是由于element树判断增量更新重用element导致的</p><img src="/images/post/flutter/flutter-widget-element-tree.png" class="" width="800" title="删除前"><img src="/images/post/flutter/flutter-widget-element-tree2.png" class="" width="800" title="删除后"><p>当widget重建的时候，element通过对比新旧两个widget是否需要更新，从而判断是否重用，默认的逻辑是对比<code>runtimeType</code>和<code>key</code>，我们上面的例子中显然会返回true（我们没有定义key），则表示可以element可以直接使用新的widget</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">bool</span> canUpdate(Widget oldWidget, Widget newWidget) &#123;</span><br><span class="line">    <span class="keyword">return</span> oldWidget.runtimeType == newWidget.runtimeType</span><br><span class="line">        &amp;&amp; oldWidget.key == newWidget.key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于颜色是state持有的，没有变化，所以蓝色的element，直接使用了灰色的widget，而最后一个绿色的element，没有用到，会被释放</p><p>通过<code>canUpdate</code>方法可以看到，我们可以设置key来标识element是否可以直接更新widget，flutter中的key有两种</p><ul><li>LocalKey</li><li>GlobalKey</li></ul><h2 id="LocalKey"><a href="#LocalKey" class="headerlink" title="LocalKey"></a>LocalKey</h2><p>LocalKey有下面三种，其成员key用于比较，使用起来类似</p><ul><li>ValueKey: 使用一个泛型数据作为key</li><li>ObjectKey: 使用一个对象作为key</li><li>UniqueKey: 自动生成key，并且保证唯一，比较少用</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在StatefulWidget构造方法添加参数key，并传给super</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListItem</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  ListItem(&#123;<span class="keyword">this</span>.title, Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _ListItemState createState() =&gt; _ListItemState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用ListItem的时候，传入key</span></span><br><span class="line"><span class="keyword">var</span> _items = [</span><br><span class="line">    ListItem(title: <span class="string">&quot;aaa&quot;</span>, key: ValueKey&lt;<span class="built_in">String</span>&gt;(<span class="string">&quot;aaa&quot;</span>)),</span><br><span class="line">    ListItem(title: <span class="string">&quot;bbb&quot;</span>, key: ValueKey&lt;<span class="built_in">String</span>&gt;(<span class="string">&quot;bbb&quot;</span>)),</span><br><span class="line">    ListItem(title: <span class="string">&quot;ccc&quot;</span>, key: ValueKey&lt;<span class="built_in">String</span>&gt;(<span class="string">&quot;ccc&quot;</span>)),</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这样在判断的时候不同的ListItem会在canUpdate方法就会返回false，就不会重用了</p><blockquote><p>通常我们在自定义<code>StatefulWidget</code>的时候，需要在构造函数添加可选参数key</p></blockquote><h2 id="GlobalKey"><a href="#GlobalKey" class="headerlink" title="GlobalKey"></a>GlobalKey</h2><p>GlobalKey可以获取到context（element），widget，和state，通常用于在父widget操作子widget</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> GlobalKey&lt;_TestWidgetState&gt; _globalKey = GlobalKey();</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;global key&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">          child: TestWidget(</span><br><span class="line">        key: _globalKey,</span><br><span class="line">      )),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        child: Icon(Icons.add),</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          <span class="comment">// 直接操作子widget的state</span></span><br><span class="line">          _globalKey.currentState.increseCount();</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  TestWidget(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TestWidgetState createState() =&gt; _TestWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TestWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  increseCount() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _count = _count + <span class="number">1</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Text(<span class="string">&quot;<span class="subst">$_count</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
            <tag> key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenGL名词解释</title>
      <link href="/2020-07-01/opengl-words/"/>
      <url>/2020-07-01/opengl-words/</url>
      
        <content type="html"><![CDATA[<p>为了更好的学习 OpenGL，我们需要对部分专业属于有一些基本认识，本文介绍在计算机图形学常用的一些专业名词</p><span id="more"></span><h2 id="图形API"><a href="#图形API" class="headerlink" title="图形API"></a>图形API</h2><p><code>OpenGL</code>（Open Graphics Library）是⼀个跨编程语⾔、跨平台的编程图形程序接⼝，它将计算机的资源抽象称为⼀个OpenGL的对象，对这些资源的操作抽象为⼀个个的OpenGL指令</p><p><code>OpenGL ES</code>（OpenGL for Embedded Systems）是OpenGL的API子集，针对⼿机、PDA和游戏主机等嵌⼊式设备⽽设计，去除了许多不必要和性能较低的API接⼝</p><p><code>DirectX</code>是Windows平台的多媒体处理工具，包含图形API，功能比较多，按性质分类，可以分为四⼤部分，显示部分、声⾳部分、输⼊部分和⽹络部分</p><p><code>Metal</code>是Apple为游戏开发者推出了新的平台技术，苹果宣称该技术能够为 3D 图像提⾼ 10 倍的渲染性能，是Apple为了解决3D渲染⽽推出的框架</p><h3 id="图形API的作用"><a href="#图形API的作用" class="headerlink" title="图形API的作用"></a>图形API的作用</h3><p>图形API用于实现图形的底层渲染，最终输出到显示屏上，例如，图形从点线面，再到3D图形，最终渲染称屏幕上看到的2D图像这个过程</p><ul><li>⽐如在游戏开发中,对于游戏场景&#x2F;游戏⼈物的渲染</li><li>⽐如在⾳视频开发中,对于视频解码后的数据渲染</li><li>⽐如在地图引擎,对于地图上的数据渲染</li><li>⽐如在动画中,实现动画的绘制</li><li>⽐如在视频处理中,对于视频加上滤镜效果</li></ul><p>OpenGL &#x2F;OpenGL ES&#x2F; Metal 在任何项⽬中解决问题的本质就是利⽤<code>GPU芯⽚</code>来⾼效渲染图形图像，开发者可以通过这些图形API间接利用GPU</p><blockquote><p>OpenGL只是协议层，而具体的实现是由硬件厂商完成的，不同厂商实现上有差异，通常都是高度优化过的</p></blockquote><h2 id="OpenGL上下⽂（Context）"><a href="#OpenGL上下⽂（Context）" class="headerlink" title="OpenGL上下⽂（Context）"></a>OpenGL上下⽂（Context）</h2><p>在使用OpenGL操作之前，需要先创建一个OpenGL上下文，这是一个<code>状态机</code>，保存了各种用于描述OpenGL如何运行的状态，例如拍照的时候开启滤镜等，上下文是OpenGL所有操作的基础</p><ul><li>OpenGL API是面向过程的，本质上是对OpenGL上下文状态机的某个状态或对象进行操作</li><li>应用程序中可以创建多个不同的上下文，他们分别在各自的线程中使用。上下文之间共享纹理，缓冲区等资源，采用这中方案更为高效，因为它避免了反复切换上下文，或者大量修改渲染状态所造成的较大的开销。</li></ul><p>iOS中的<code>CoreGraphics</code>里面的API就与OpenGL的API有些类似，面向过程</p><p>假设当我们想告诉OpenGL去画线段而不是三角形的时候，我们通过改变一些上下文变量来改变OpenGL状态，从而告诉OpenGL如何去绘图。一旦我们改变了OpenGL的状态为绘制线段，下一个绘制命令就会画出线段而不是三角形。</p><ul><li>上下文OpenGL指令执⾏的基础，所有绘制操作都需要通过上下文进行</li><li>OpenGL上下文对象切换操作开销大</li><li>OpenGL的函数虽然是面向过程的，但可以把相关的调用封装为面向过程的图形API。</li></ul><h2 id="OpenGL状态机"><a href="#OpenGL状态机" class="headerlink" title="OpenGL状态机"></a>OpenGL状态机</h2><p>状态机描述了⼀个对象在其⽣命周期内的各种状态变化，和响应事件，体现在代码中就是<code>上下文</code></p><ul><li>有<code>状态</code>，能保存当前的状态</li><li>有<code>输⼊</code>和<code>输出</code>，根据输⼊的内容和⾃⼰的原先状态，修改⾃⼰当前状态，并且可以有对应输出</li><li>能<code>关闭</code>，当进⼊特殊状态（停机状态）的时候，就不再接收输⼊，停⽌⼯作</li></ul><h2 id="渲染（Rendering）"><a href="#渲染（Rendering）" class="headerlink" title="渲染（Rendering）"></a>渲染（Rendering）</h2><p>将图形&#x2F;图像数据转换成3D空间图像操作，从图元到图像的过程</p><h2 id="图元"><a href="#图元" class="headerlink" title="图元"></a>图元</h2><p>图元可以理解为组成图形的基本单元，比如点、线、三角形。 我们可以通过一系列函数或顶点数据帮助我们实现多种多样的图形</p><blockquote><p>在<code>OpenGL ES</code>有三种图元：<code>点</code>，<code>线</code>，<code>三角形</code>，其他所有图形都是由这三种图形组合而成的</p></blockquote><h2 id="顶点数组和顶点缓冲区（VertexArray-amp-VertexBuffer）"><a href="#顶点数组和顶点缓冲区（VertexArray-amp-VertexBuffer）" class="headerlink" title="顶点数组和顶点缓冲区（VertexArray &amp; VertexBuffer）"></a>顶点数组和顶点缓冲区（VertexArray &amp; VertexBuffer）</h2><p><code>顶点数组</code>用于描述图形的轮廓（如三个顶点可以描述一个三角形），图元是由顶点组成的，顶点数组通常存放在显存上（性能更高），而这部分内存称为<code>顶点缓冲区</code></p><h2 id="管线"><a href="#管线" class="headerlink" title="管线"></a>管线</h2><p>在OpenGL下渲染图形,就会有经历⼀个⼀个节点步骤，⽽这样的操作可以理解管线。管线是⼀个抽象的概念，之所以称之为管线是因为显卡在处理数据的时候是按照⼀个固定的顺序来的，⽽且严格按照这个顺序。就像⽔从⼀根管⼦的⼀端流到另⼀端，这个顺序<code>固定的</code>，<code>不能修改</code></p><h2 id="固定管线"><a href="#固定管线" class="headerlink" title="固定管线"></a>固定管线</h2><p>在早期的OpenGL版本中，封装了很多API，用于完成特定的功能，例如光照，坐标变换，裁切等，这些API被称为固定管线，而对于一些特殊需求的场景，固定管线无法实现，这部分可以通过<code>可编程管线</code>来实现</p><blockquote><p>固定管线在实际开发中用的少，大多已经废弃，基本都是通过编程来实现需求</p></blockquote><h2 id="着⾊器程序（Shader）"><a href="#着⾊器程序（Shader）" class="headerlink" title="着⾊器程序（Shader）"></a>着⾊器程序（Shader）</h2><p>将<code>固定渲染管线架构</code>变为<code>可编程渲染管线</code></p><p>OpenGL在实际调⽤绘制函数之前，还需要指定⼀个由shader编译成的着⾊器程序。常⻅的着⾊器主要有</p><ul><li><code>顶点着⾊器</code>（VertexShader）</li><li><code>⽚段着⾊器</code>&#x2F;<code>像素着⾊器</code>（FragmentShader&#x2F;PixelShader）</li><li><code>⼏何着⾊器</code>（GeometryShader）</li><li><code>曲⾯细分着⾊器</code>（TessellationShader）。</li></ul><p><code>OpenGL ES</code>只⽀持了<code>顶点着⾊器</code>和<code>⽚段着⾊器</code>两个着⾊器</p><p>着色器程序处理流程</p><ol><li>OpenGL在处理shader时，和其他编译器⼀样。通过编译、链接等步骤，⽣成了<code>着⾊器程序</code>（glProgram），着⾊器程序同时包含了顶点着⾊器和⽚段着⾊器的运算逻辑</li><li>在OpenGL进⾏绘制的时候，⾸先由顶点着⾊器对传⼊的顶点数据进⾏运算。再通过图元装配，将顶点转换为图元</li><li>然后进⾏<code>光栅化</code>，将图元这种⽮量图形，转换为栅格化数据</li><li>将栅格化数据传⼊<code>⽚段着⾊器</code>中进⾏运算。⽚段着⾊器会对栅格化数据中的每⼀个像素进⾏运算，并决定像素的颜⾊</li></ol><h3 id="顶点着⾊器（VertexShader）"><a href="#顶点着⾊器（VertexShader）" class="headerlink" title="顶点着⾊器（VertexShader）"></a>顶点着⾊器（VertexShader）</h3><ul><li>⼀般⽤来处理图形每个顶点变换(<code>旋转</code>&#x2F;<code>平移</code>&#x2F;<code>投影</code>等)，顶点坐标由⾃身坐标系转换到归⼀化坐标系的运算</li><li>顶点着⾊器是OpenGL中⽤于计算顶点属性的程序。顶点着⾊器是逐顶点运算的程序，这个过程是<code>并⾏的</code>，并且顶点着⾊器运算过程中⽆法访问其他顶点的数据</li></ul><p>过程</p><ol><li>确定位置</li><li>缩放&#x2F;平移&#x2F;旋转位置换算</li><li>3D图形数据-&gt;2D(投影换算)</li></ol><h3 id="⽚段着⾊器-x2F-片元着色器（FragmentShader）"><a href="#⽚段着⾊器-x2F-片元着色器（FragmentShader）" class="headerlink" title="⽚段着⾊器&#x2F;片元着色器（FragmentShader）"></a>⽚段着⾊器&#x2F;片元着色器（FragmentShader）</h3><ul><li>⼀般⽤来处理图形中每个像素点<code>颜⾊计算和填充</code></li><li>⽚段着⾊器是OpenGL中⽤于计算⽚段（像素）颜⾊的程序。⽚段着⾊器是逐像素运算的程序，也就是说每个像素都会执⾏⼀次⽚段着⾊器，也是<code>并⾏的</code></li></ul><h3 id="GLSL（OpenGL-Shading-Language）"><a href="#GLSL（OpenGL-Shading-Language）" class="headerlink" title="GLSL（OpenGL Shading Language）"></a>GLSL（OpenGL Shading Language）</h3><p><code>GLSL</code>是OpenGL着⾊语⾔，是⽤来在OpenGL中着⾊编程的语⾔，运行在GPU上，代替了固定的渲染管线的⼀部分，⽐如：视图转换、投影转换等。GLSL（GL Shading Language）的着⾊器代码分成2个部分：</p><ul><li>Vertex Shader（顶点着⾊器）</li><li>Fragment Shader（⽚断着⾊器&#x2F;片元着色器）</li></ul><h3 id="光栅化（Rasterization）"><a href="#光栅化（Rasterization）" class="headerlink" title="光栅化（Rasterization）"></a>光栅化（Rasterization）</h3><p>栅格化或者像素化，就是把矢量图形转化成像素点的过程，该过程包含了两部分的工作</p><ol><li>决定窗口坐标中的哪些整型栅格区域被基本图元占用</li><li>分配一个颜色值和一个深度值到各个区域。光栅化过程产生的是片元。</li></ol><h3 id="纹理（Texture）"><a href="#纹理（Texture）" class="headerlink" title="纹理（Texture）"></a>纹理（Texture）</h3><p>纹理可以理解为图⽚，在OpenGL习惯叫纹理</p><h3 id="混合（Blending）"><a href="#混合（Blending）" class="headerlink" title="混合（Blending）"></a>混合（Blending）</h3><p>不同图层进行<code>颜色混合</code>，例如<code>组透明度</code>（例如将两个图层（透明度0.2的红色图层和透明度0.5的绿色图层）混合叠加在一起，这个过程就叫做混合），OpenGL提供的默认的混合算法混合算法，如果需要更加复杂的混合算法，⼀般可以通过像素着⾊器进⾏实现，当然性能会⽐原⽣的混合算法差⼀些</p><h3 id="变换矩阵（Transformation）"><a href="#变换矩阵（Transformation）" class="headerlink" title="变换矩阵（Transformation）"></a>变换矩阵（Transformation）</h3><p>用于对图形进行平移，缩放，旋转变换操作时使用</p><h3 id="投影矩阵（Projection）"><a href="#投影矩阵（Projection）" class="headerlink" title="投影矩阵（Projection）"></a>投影矩阵（Projection）</h3><p>⽤于将3D坐标转换为⼆维屏幕坐标时使用</p><h3 id="渲染上屏-x2F-交换缓冲区-SwapBuffer"><a href="#渲染上屏-x2F-交换缓冲区-SwapBuffer" class="headerlink" title="渲染上屏&#x2F;交换缓冲区(SwapBuffer)"></a>渲染上屏&#x2F;交换缓冲区(SwapBuffer)</h3><ol><li>渲染缓冲区⼀般映射的是系统的资源⽐如窗⼝。如果将图像直接渲染到窗⼝对应的渲染缓冲区，则可以将图像显示到屏幕上。</li><li>但是，如果每个窗⼝只有⼀个缓冲区，那么在绘制过程中屏幕进⾏了刷新，窗⼝可能显示出不完整的图像，前后两次绘制重叠</li><li>为了解决这个问题，常规的OpenGL程序⾄少都会有两个缓冲区。显示在屏幕上的称为屏幕缓冲区，没有显示的称为离屏缓冲区。在⼀个缓冲区渲染完成之后，通过将屏幕缓冲区和离屏缓冲区交换，实现图像在屏幕上的显示，就是<code>双缓冲</code></li><li>由于显示器的刷新⼀般是逐⾏进⾏的，因此为了防⽌交换缓冲区的时候屏幕上下区域的图像分属于两个不同的帧，因此交换⼀般会等待显示器刷新完成的信号，在显示器两次刷新的间隔中进⾏交换，这个信号就被称为垂直同步信号（VSync），这个技术被称为<code>垂直同步</code></li><li>使⽤了双缓冲区和垂直同步技术之后，由于总是要等待缓冲区交换之后再进⾏下⼀帧的渲染，使得帧率⽆法完全达到硬件允许的最⾼⽔平。为了解决这个问题，引⼊了<code>三缓冲区技术</code>，在等待垂直同步时，来回交替渲染两个离屏的缓冲区，⽽垂直同步发⽣时，屏幕缓冲区和最近渲染完成的离屏缓冲区交换，实现充分利⽤硬件性能的⽬的</li></ol>]]></content>
      
      
      <categories>
          
          <category> OpenGL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter仿微信聊天交互</title>
      <link href="/2020-06-30/flutter-chat-listview/"/>
      <url>/2020-06-30/flutter-chat-listview/</url>
      
        <content type="html"><![CDATA[<p>最近在做一个聊天的页面，参考微信的聊天页面，对<code>ListView</code>有下面几个需求</p><ol><li>使用列表Widget，例如：ListView, CustomScrollView等</li><li>支持<code>scrollToEnd</code>，当键盘，表情面板，工具面板弹出时，消息滑动到底部</li><li>支持获取位置用于跳转<code>getCurrentIndexInfo</code>，用于保持加载数据时候的位置不变</li><li>支持<code>jumpToIndex</code>和<code>scrollToIndex</code>，避免手动计算位置</li><li>滑动位置要准确，没有误差</li><li>滑动到底部不会出现bounce</li><li>由于键盘上移的时候scrollToEnd</li></ol><span id="more"></span><img src="/images/post/flutter/flutter-chat-message-list.gif" class="" width="300"><h2 id="scrollToEnd"><a href="#scrollToEnd" class="headerlink" title="scrollToEnd"></a>scrollToEnd</h2><p>以<code>ListView</code>为例，网上推荐的做法是</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">滑动到底部</span></span></span><br><span class="line"><span class="keyword">void</span> _scrollToEnd() &#123;</span><br><span class="line">  <span class="keyword">final</span> offset = _scrollController.position.maxScrollExtent;</span><br><span class="line">    _scrollController.animateTo(offset,</span><br><span class="line">    duration: <span class="built_in">Duration</span>(milliseconds: <span class="number">250</span>),</span><br><span class="line">    curve: Curves.easeInOut</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但上面做法存在一个问题，就是误差，当内容是高度可变的时候就会有误差，如下面例子</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> _random = Random();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TestPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; _items =</span><br><span class="line">      <span class="built_in">List</span>.generate(<span class="number">180</span>, (index) =&gt; _random.nextInt(<span class="number">100</span>) + <span class="number">100.0</span>);</span><br><span class="line">  ScrollController _scrollController = ScrollController();</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;scrollToEnd&quot;</span>),</span><br><span class="line">        actions: &lt;Widget&gt;[</span><br><span class="line">          IconButton(</span><br><span class="line">            icon: Icon(Icons.add),</span><br><span class="line">            onPressed: _scrollToEnd,</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">      body: ListView.builder(</span><br><span class="line">          controller: _scrollController,</span><br><span class="line">          itemBuilder: (c, i) &#123;</span><br><span class="line">            <span class="keyword">return</span> Container(</span><br><span class="line">              margin: EdgeInsets.all(<span class="number">8</span>),</span><br><span class="line">              height: _items[i],</span><br><span class="line">              color: Colors.orange,</span><br><span class="line">              child: Text(<span class="string">&quot;<span class="subst">$i</span>&quot;</span>),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">          itemCount: _items.length),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/flutter/scroll_controller_scroll_to_end.gif" class="" width="300"><h3 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h3><p>从截图中可以看到，<code>maxScrollExtent</code>有时候偏小，有时候偏大，如果是偏大的情况，scrollView在scroll到屏幕外后再反弹（bounce的效果），这是由于ListView在渲染的时候，没出现在屏幕的Widget是不会被渲染的，这个时候还不能确定所有Widget的实际高度，ScrollView会根据当前渲染的Widget估算其他Widget的高度，所以带来误差，而如果widget是等高的，则不会有误差问题</p><p>如果能<code>scrollToIndex</code>应该可以解决问题，直接滑动到某一项</p><h2 id="scrollToIndex"><a href="#scrollToIndex" class="headerlink" title="scrollToIndex"></a>scrollToIndex</h2><p>自带的ScrollController不支持scrollToIndex，找到下面2个第三方库，支持scrollToIndex，两个库都可以精确滑动到对应的位置</p><ol><li><a href="https://pub.dev/packages/scroll_to_index"><code>scroll_to_index</code></a>: 通过分段滑动，边滑动边计算，在滑动的过程中可以得到widget的高度，达到scrollToIndex的目的</li><li><a href="https://pub.dev/packages/scrollable_positioned_list"><code>scrollable_positioned_list</code></a><ul><li>对于滚动列表进行<code>extendCache</code>，缓存多两个屏幕的widget</li><li>为了计算位置，我们知道滚动到第0项，位置肯定是准的，也就是<code>offset=0</code>，scrollable_positioned_list用一个辅助的列表做滚动位置，让滚动的目标为0，这样就可以避免计算的误差</li><li>保持缓存区间所有Widget的位置信息，当目标位置在当前列表的缓存区间的时候，直接scrollToOffset，否则，使用辅助列表配合滚动，两个列表都只缓存开始和结束位置的widget，而不需要计算中间的widget，当列表增大时，不会带来太大的性能消耗</li></ul></li></ol><h3 id="存在问题-1"><a href="#存在问题-1" class="headerlink" title="存在问题"></a>存在问题</h3><ul><li><code>scroll_to_index</code>: 由于是采用多次滚动的方式，对于数据量大的话滑动会持续时间比较长，而且看起来非常不顺滑，抖动厉害，性能消耗比较大</li><li><code>scrollable_positioned_list</code>: 当滑动到底部（最后一个项）的时候，他会把index项滑动到0的位置再回弹，会出现bounce</li></ul><h2 id="bounce问题"><a href="#bounce问题" class="headerlink" title="bounce问题"></a>bounce问题</h2><p>基于上面问题，考虑对<code>scrollable_positioned_list</code>滑动之前添加溢出检查，避免溢出造成bounce，具体代码见<a href="https://github.com/zhengbomo/flutter.widgets/tree/master/packages/scrollable_positioned_list">这里</a></p><p>scrollable_positioned_list默认使用相对位置alignment，这里改为offset</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里去掉了alignment，改用offset</span></span><br><span class="line"><span class="keyword">void</span> _jumpTo(&#123;<span class="meta">@required</span> <span class="built_in">int</span> index, <span class="built_in">double</span> offset&#125;) &#123;</span><br><span class="line">    cancelScrollCallback?.call();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> controller =</span><br><span class="line">        _showFrontList ? frontScrollController : backScrollController;</span><br><span class="line">    <span class="keyword">final</span> lastTarget = _showFrontList ? frontTarget : backTarget;</span><br><span class="line">    <span class="comment">// 方向</span></span><br><span class="line">    <span class="keyword">final</span> direction = index &gt; lastTarget ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 更新index</span></span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="keyword">if</span> (lastTarget != index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_showFrontList) &#123;</span><br><span class="line">          frontTarget = index;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          backTarget = index;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 加上偏移量offset</span></span><br><span class="line">    <span class="keyword">var</span> jumpOffset = <span class="number">0</span> + offset;</span><br><span class="line">    <span class="keyword">if</span> (direction == <span class="number">-1</span>) &#123;</span><br><span class="line">      controller.jumpTo(jumpOffset);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      controller.jumpTo(jumpOffset);</span><br><span class="line">      <span class="comment">// 渲染后如果发现溢出，马上修正</span></span><br><span class="line">      WidgetsBinding.instance.addPostFrameCallback((timeStamp) &#123;</span><br><span class="line">        <span class="keyword">var</span> offset = min(jumpOffset, controller.position.maxScrollExtent);</span><br><span class="line">        <span class="keyword">if</span> (controller.offset != offset) &#123;</span><br><span class="line">          controller.jumpTo(offset);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于scrollToIndex</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (itemPosition != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 不用切换列表</span></span><br><span class="line">    <span class="keyword">final</span> localScrollAmount = itemPosition.itemLeadingEdge *</span><br><span class="line">        startingScrollController.position.viewportDimension;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> animateOffset =</span><br><span class="line">        startingScrollController.offset + localScrollAmount - offset;</span><br><span class="line">    <span class="comment">// 添加溢出check</span></span><br><span class="line">    animateOffset =</span><br><span class="line">        min(animateOffset, startingScrollController.position.maxScrollExtent);</span><br><span class="line">    <span class="keyword">await</span> startingScrollController.animateTo(animateOffset,</span><br><span class="line">        duration: duration, curve: curve);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 需要切换两个列表</span></span><br><span class="line">    ...</span><br><span class="line">    startAnimationCallback = () &#123;</span><br><span class="line">        SchedulerBinding.instance.addPostFrameCallback((_) <span class="keyword">async</span> &#123;</span><br><span class="line">          frontOpacity.parent = _opacityAnimation(startingListDisplay).animate(</span><br><span class="line">              AnimationController(vsync: <span class="keyword">this</span>, duration: duration)..forward());</span><br><span class="line">          startAnimationCallback = () &#123;&#125;;</span><br><span class="line">          <span class="keyword">var</span> endJump = -direction *</span><br><span class="line">              (_screenScrollCount *</span><br><span class="line">                      startingScrollController.position.viewportDimension -</span><br><span class="line">                  offset);</span><br><span class="line">          <span class="keyword">var</span> startScroll =</span><br><span class="line">              startingScrollController.offset + direction * scrollAmount;</span><br><span class="line"></span><br><span class="line">          endingScrollController.jumpTo(endJump);</span><br><span class="line">          <span class="comment">// 修正位置，避免溢出</span></span><br><span class="line">          <span class="keyword">var</span> endScroll = min(</span><br><span class="line">              <span class="number">0.0</span> + offset, endingScrollController.position.maxScrollExtent);</span><br><span class="line">          endScroll =</span><br><span class="line">              max(endScroll, endingScrollController.position.minScrollExtent);</span><br><span class="line">          endCompleter.complete(endingScrollController.animateTo(endScroll,</span><br><span class="line">              duration: duration, curve: curve));</span><br><span class="line"></span><br><span class="line">          startCompleter.complete(startingScrollController</span><br><span class="line">              .animateTo(startScroll, duration: duration, curve: curve));</span><br><span class="line"></span><br><span class="line">          cancelScrollCallback = () =&gt; _cancelScroll(startingListDisplay);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="获取index位置"><a href="#获取index位置" class="headerlink" title="获取index位置"></a>获取index位置</h2><p>当列表滑动到顶部的时候，需要加载上一页的聊天数据，我们希望加载数据后刷新页面，用户所在的位置不变（不要跳动），可以保留当前位置，在刷新后更新位置</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个为index，第二个为offset</span></span><br><span class="line"><span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; _getCurrentIndexInfo(<span class="built_in">bool</span> wholeVisible) &#123;</span><br><span class="line">    <span class="keyword">final</span> controller =</span><br><span class="line">        _showFrontList ? frontScrollController : backScrollController;</span><br><span class="line">    <span class="keyword">final</span> notifier =</span><br><span class="line">        _showFrontList ? frontItemPositionNotifier : backItemPositionNotifier;</span><br><span class="line">    <span class="comment">/// <span class="language-markdown">获取viewport上元素的Position信息</span></span></span><br><span class="line">    <span class="keyword">var</span> visibleItems = notifier.itemPositions.value.where((i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (wholeVisible) &#123;</span><br><span class="line">        <span class="keyword">return</span> i.itemLeadingEdge &gt;= <span class="number">0</span> &amp;&amp; i.itemTrailingEdge &lt;= <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> i.itemTrailingEdge &gt; <span class="number">0</span> &amp;&amp; i.itemLeadingEdge &lt; <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/// <span class="language-markdown">取最小index</span></span></span><br><span class="line">    ItemPosition firstVisibleItem = visibleItems.fold(<span class="keyword">null</span>, (v, i) &#123;</span><br><span class="line">      <span class="keyword">if</span> (v == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i.index &lt; v.index) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 计算偏移量</span></span><br><span class="line">    <span class="keyword">var</span> offset = controller.position.viewportDimension *</span><br><span class="line">        firstVisibleItem.itemLeadingEdge;</span><br><span class="line">    <span class="keyword">return</span> [firstVisibleItem.index, offset];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/flutter/flutter-listview-insert-keep-position.gif" class="" width="300"><h2 id="键盘处理"><a href="#键盘处理" class="headerlink" title="键盘处理"></a>键盘处理</h2><p>键盘弹出的时候，我们希望ChatBar是动画上移的，并且listview需要scrollToEnd，<code>Scaffold</code>有个属性<code>resizeToAvoidBottomInset</code>用于控制键盘弹出时的内容区域，但是没有动画，直接变化看起来非常突兀，这里关掉了这个属性，我们自己来控制键盘弹出时的UI变化</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">    resizeToAvoidBottomInset: <span class="keyword">false</span>,</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>如果使用动画修改ListView的高度，则无法和scrollToEnd配合起来，应为scrollToEnd无法根据动画一致滚动，这样性能上会比较差，这里采用占位的方式，键盘弹出的时候，不修改ListView的高度，而是在ListView底部添加一个<code>占位item</code>，修改这个占位item高度（不需要动画），然后scrollToEnd，这个滚动可以做到平滑，另外ChatBar键盘弹出时添加上动画即可</p><p>仿写微信项目在<a href="https://github.com/zhengbomo/flutter_wechat">这里</a></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS性能优化</title>
      <link href="/2020-06-19/ios-performance/"/>
      <url>/2020-06-19/ios-performance/</url>
      
        <content type="html"><![CDATA[<p>性能优化是一个开发者不可避开的话题，本文讨论iOS的性能体现在以下几个方面</p><ul><li>CPU占用率</li><li>内存占用率</li><li>卡顿监控&#x2F;FPS</li><li>GPU离屏渲染</li><li>耗电监控</li><li>启动时间</li></ul><span id="more"></span><h2 id="CPU占用率"><a href="#CPU占用率" class="headerlink" title="CPU占用率"></a>CPU占用率</h2><p>CPU占用率是测试性能的其中一个指标，CPU作为手机最重要的组成部分，所有计算都是通过CPU进行，手机上耗电最大的应该就是CPU了，如果我们的App设计不当，会出现</p><ul><li>界面卡顿</li><li>电量消耗过快</li><li>手机发热发烫</li></ul><p>Xcode可以直接看到App的内存占用，我们也可以通过系统方法获取到CPU占用率</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;mach/task.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;mach/vm_map.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;mach/mach_init.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;mach/thread_act.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;mach/thread_info.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">+ (<span class="type">double</span>)getCpuUsage &#123;</span><br><span class="line">    kern_return_t           kr;</span><br><span class="line">    thread_array_t          threadList;         <span class="comment">// 保存当前Mach task的线程列表</span></span><br><span class="line">    mach_msg_type_number_t  threadCount;        <span class="comment">// 保存当前Mach task的线程个数</span></span><br><span class="line">    thread_info_data_t      threadInfo;         <span class="comment">// 保存单个线程的信息列表</span></span><br><span class="line">    mach_msg_type_number_t  threadInfoCount;    <span class="comment">// 保存当前线程的信息列表大小</span></span><br><span class="line">    thread_basic_info_t     threadBasicInfo;    <span class="comment">// 线程的基本信息</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过“task_threads”API调用获取指定 task 的线程列表</span></span><br><span class="line">    <span class="comment">//  mach_task_self_，表示获取当前的 Mach task</span></span><br><span class="line">    kr = task_threads(mach_task_self(), &amp;threadList, &amp;threadCount);</span><br><span class="line">    <span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">double</span> cpuUsage = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">        threadInfoCount = THREAD_INFO_MAX;</span><br><span class="line">        <span class="comment">// 通过“thread_info”API调用来查询指定线程的信息</span></span><br><span class="line">        <span class="comment">//  flavor参数传的是THREAD_BASIC_INFO，使用这个类型会返回线程的基本信息，</span></span><br><span class="line">        <span class="comment">//  定义在 thread_basic_info_t 结构体，包含了用户和系统的运行时间、运行状态和调度优先级等</span></span><br><span class="line">        kr = thread_info(threadList[i], THREAD_BASIC_INFO, (thread_info_t)threadInfo, &amp;threadInfoCount);</span><br><span class="line">        <span class="keyword">if</span> (kr != KERN_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        threadBasicInfo = (thread_basic_info_t)threadInfo;</span><br><span class="line">        <span class="keyword">if</span> (!(threadBasicInfo-&gt;flags &amp; TH_FLAGS_IDLE)) &#123;</span><br><span class="line">            cpuUsage += threadBasicInfo-&gt;cpu_usage;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回收内存，防止内存泄漏</span></span><br><span class="line">    vm_deallocate(mach_task_self(), (vm_offset_t)threadList, threadCount * <span class="keyword">sizeof</span>(thread_t));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cpuUsage / (<span class="type">double</span>)TH_USAGE_SCALE * <span class="number">100.0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存占用率"><a href="#内存占用率" class="headerlink" title="内存占用率"></a>内存占用率</h2><p>常见的内存问题是内存泄露，内存只增不减，严重时，造成OOM被系统杀掉，在iOS开发中常见的是<code>循环引用</code>，对于大内存的对象（例如图片）在不需要的时候应该及时释放，避免内存长期占用，内存泄露还可能带来一些业务上的问题</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">double</span>)getMemoryUsage &#123;</span><br><span class="line">    task_vm_info_data_t vmInfo;</span><br><span class="line">    mach_msg_type_number_t count = TASK_VM_INFO_COUNT;</span><br><span class="line">    <span class="keyword">if</span>(task_info(mach_task_self(), TASK_VM_INFO, (task_info_t) &amp;vmInfo, &amp;count) == KERN_SUCCESS) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">double</span>)vmInfo.phys_footprint / (<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="卡顿"><a href="#卡顿" class="headerlink" title="卡顿"></a>卡顿</h2><p>屏幕控制器，根据屏幕刷新率，每隔一段时间就会发送一个屏幕垂直信号<code>VSync</code>，在VSync到来的时候</p><ol><li>CPU计算图层树布局，图片解码，文字渲染，然后交给GPU</li><li>GPU渲染图层树，然后放到屏幕缓冲区上</li></ol><p>下一个VSync到来的时候，如果CPU或GPU消耗的时间过长，GPU还来不及渲染到缓冲区中，视频控制器从屏幕缓冲区读不到数据，就会导致掉帧卡顿</p><img src="/images/post/ios_frame_drop.png" class=""><h3 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h3><p><code>FPS</code>是卡顿的监控指标，FPS如果能稳定在50-60帧，基本可以认为是流畅的，通常我们通过<code>CADisplayLink</code>来监听页面刷新率，可以参考<a href="https://github.com/zhengbomo/FluencyMonitor/blob/master/Demo/Demo/Utils/FPS.swift">这里</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每秒回调一次</span></span><br><span class="line"><span class="keyword">let</span> fps <span class="operator">=</span> <span class="type">FPS</span> &#123; fps <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前帧率为<span class="subst">\(fps)</span>fps&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Runloop"><a href="#Runloop" class="headerlink" title="Runloop"></a>Runloop</h3><p>FPS只是一个宏观的指标，而对于开发者来说，除了知道FPS，我们是希望定位到卡顿的位置，这个时候我们可以通过监听Runloop事件循环来实现，当发现卡顿的时候，获取主线程的调用堆栈，能获得卡顿的函数</p><p>卡顿监控还可以通过监听Runloop事件来实现，具体可以参考<a href="https://github.com/zhengbomo/FluencyMonitor/blob/master/Demo/Demo/Utils/FluencyMonitor.swift">这里</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启监控</span></span><br><span class="line"><span class="type">FluencyMonitor</span>.shared.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭监控</span></span><br><span class="line"><span class="type">FluencyMonitor</span>.shared.stop()</span><br></pre></td></tr></table></figure><p>出现卡顿时输出</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">0   libsystem_c.dylib                   0x00007fff51aed510 usleep + 53</span><br><span class="line">1   Demo                                0x000000010fab7479 Demo.ViewController.tableView(_: __C.UITableView, cellForRowAt: Foundation.IndexPath) -&gt; __C.UITableViewCell + 1193</span><br><span class="line">2   Demo                                0x000000010fab7545 @objc Demo.ViewController.tableView(_: __C.UITableView, cellForRowAt: Foundation.IndexPath) -&gt; __C.UITableViewCell + 165</span><br><span class="line">3   UIKitCore                           0x00007fff48ea3f1a -[UITableView _createPreparedCellForGlobalRow:withIndexPath:willDisplay:] + 867</span><br><span class="line">4   UIKitCore                           0x00007fff48e6d5a6 -[UITableView _updateVisibleCellsNow:] + 3010</span><br><span class="line">5   UIKitCore                           0x00007fff48e8d2d2 -[UITableView layoutSubviews] + 194</span><br><span class="line">6   UIKitCore                           0x00007fff49193678 -[UIView(CALayerDelegate) layoutSublayersOfLayer:] + 2478</span><br><span class="line">7   QuartzCore                          0x00007fff2b4c6398 -[CALayer layoutSublayers] + 255</span><br><span class="line">8   QuartzCore                          0x00007fff2b4cc523 _ZN2CA5Layer16layout_if_neededEPNS_11TransactionE + 523</span><br><span class="line">9   QuartzCore                          0x00007fff2b4d7bba _ZN2CA5Layer28layout_and_display_if_neededEPNS_11TransactionE + 80</span><br><span class="line">10  QuartzCore                          0x00007fff2b420c04 _ZN2CA7Context18commit_transactionEPNS_11TransactionEd + 324</span><br><span class="line">11  QuartzCore                          0x00007fff2b4545ef _ZN2CA11Transaction6commitEv + 649</span><br><span class="line">12  QuartzCore                          0x00007fff2b381645 _ZN2CA7Display11DisplayLink14dispatch_itemsEyyy + 921</span><br><span class="line">13  QuartzCore                          0x00007fff2b4588f0 _ZL22display_timer_callbackP12__CFMachPortPvlS1_ + 299</span><br><span class="line">14  CoreFoundation                      0x00007fff23d6187d __CFMachPortPerform + 157</span><br><span class="line">15  CoreFoundation                      0x00007fff23da14e9 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 41</span><br><span class="line">16  CoreFoundation                      0x00007fff23da0ae8 __CFRunLoopDoSource1 + 472</span><br><span class="line">17  CoreFoundation                      0x00007fff23d9b514 __CFRunLoopRun + 2228</span><br><span class="line">18  CoreFoundation                      0x00007fff23d9a944 CFRunLoopRunSpecific + 404</span><br><span class="line">19  GraphicsServices                    0x00007fff38ba6c1a GSEventRunModal + 139</span><br><span class="line">20  UIKitCore                           0x00007fff48c8b9ec UIApplicationMain + 1605</span><br><span class="line">21  Demo                                0x000000010fabaf4b main + 75</span><br><span class="line">22  libdyld.dylib                       0x00007fff51a231fd start + 1</span><br></pre></td></tr></table></figure><h3 id="离屏渲染（Offscreen-Rrendering）"><a href="#离屏渲染（Offscreen-Rrendering）" class="headerlink" title="离屏渲染（Offscreen Rrendering）"></a>离屏渲染（Offscreen Rrendering）</h3><p>这里只讨论GPU上的离屏渲染</p><ul><li>离屏渲染是屏幕缓冲区外的渲染</li><li>GPU渲染图层是一层一层渲染的，下面的图层先渲染，上面的图层后渲染</li><li>GPU渲染图层时，当上面的图层渲染时，不能再去修改下面图层的</li><li>所以当遇到superlayer依赖sublayer的时候，例如阴影（依赖sublayer的形状），就无法直接渲染到屏幕缓冲区，这个时候，GPU就会在内存中另外开辟一个缓冲区，用于渲染阴影，渲染完成后再放回到屏幕缓冲区，这个渲染操作称为离屏渲染</li><li>GPU渲染的时候，只有一个上下文，当出现离屏渲染的时候，需要进行上下文的切换，由于上下文对象比较大，这个成本会比较高，开辟内存空间也需要消耗性能，离屏渲染多了就会导致每一帧渲染时间过长，造成卡顿</li><li>由于物理限制，某些场景下离屏渲染是不可避免，我们可以通过一些手段避免</li></ul><p>在iOS上，下面操作会导致离屏渲染</p><ul><li>圆角（<code>masksToBounds+cornerRadius</code>），在iOS9之后，UIImageView使用<code>masksToBounds+cornerRadius</code>不会触发离屏渲染，其他View仍然会，避免两个属性组合使用，例如图片在内存中切好后再放到View上，对于不需要背景透明的地方，可以放一张图片罩着实现圆角</li><li>光栅化（<code>shouldRasterize</code>）：会触发离屏渲染，并且会缓存结果，避免每一帧都触发离屏渲染，可以用于优化离屏渲染</li><li>遮罩（<code>masks</code>）：尽量减少使用</li><li>阴影（<code>shadow</code>）：如果设置了<code>shadowPath</code>，则不会触发离屏渲染</li><li>抗锯齿（<code>allowsEdgeAntialiasing</code>）：默认关闭抗锯齿，开启会触发离屏渲染</li><li>组透明度（<code>allowsGroupOpacity</code>）: 默认开启，可以关闭来避免离屏渲染</li></ul><h3 id="卡顿优化"><a href="#卡顿优化" class="headerlink" title="卡顿优化"></a>卡顿优化</h3><p>卡顿优化方向主要是减少CPU和GPU的处理时间</p><ol><li><p><code>CPU优化</code></p><ul><li>使用CALayer代替UIView，不用响应事件的View设置<code>isUserInteractionEnabled = true</code></li><li>不要频繁地修改UIView的位置，和变换属性，比如frame、bounds、transform等</li><li>对于复杂的布局，尽量提前计算好布局，并且使用缓存，集中计算，不要频繁改动</li><li>Autolayout会比直接设置frame消耗更多的CPU资源，对于复杂的布局，使用frame替代autolayout</li><li>图片的size最好刚好跟UIImageView的size保持一致，或者不要差太多</li><li>减少一下线程的最大并发数量</li><li>尽量把耗时的操作放到子线程（文本处理，图片编解码）</li></ul></li><li><p><code>GPU优化</code></p><ul><li>尽量减少视图数量和嵌套层次</li><li>GPU能处理的最大纹理尺寸是4096x4096，一旦超过这个尺寸，就会占用CPU资源进行处理，所以纹理尽量不要超过这个尺寸</li><li>尽量避免短时间内大量图片的显示，尽可能将多张图片合成一张图片显示</li><li>减少透明的视图（alpha&lt;1），不透明的就设置opaque为yes，减少颜色混合操作</li><li>尽量避免出现离屏渲染</li></ul></li></ol><h2 id="耗电优化"><a href="#耗电优化" class="headerlink" title="耗电优化"></a>耗电优化</h2><ul><li>优化代码逻辑，减少不必要的计算</li><li>减少使用定时器</li></ul><h3 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h3><ul><li>避免频繁的I&#x2F;O操作，考虑批量操作</li><li>数据量比较大的局部读写，建议使用数据库，数据库对局部读写有专门的优化</li><li>对于读写比较大的文件数据的时候，可以考虑使用<code>dispatch_io</code>，使用GCD异步并行读写，速度更快</li></ul><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><ul><li>大文件使用断点续传，减少重复传输</li><li>及时<code>cancel</code>掉不使用的网络请求（如当离开ViewController的时候，cancel在ViewController中产生的异步请求）</li><li>使用缓存，避免重复请求</li><li>压缩数据</li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul><li>如果只是需要快速确定用户位置，用<code>CLLocationManager.requestLocation</code>方法。定位完成后，会自动让定位硬件断电</li><li>如果不是导航应用，尽量不要实时更新位置，定位完毕就关掉定位服务</li><li>尽量降低定位精度，比如尽量不要使用精度最高的<code>kCLLocationAccuracyBest</code></li><li>需要后台定位时，尽量设置<code>pausesLocationUpdatesAutomatically = true</code>，系统会根据情况自动暂停位置更新</li></ul><h3 id="硬件检测优化"><a href="#硬件检测优化" class="headerlink" title="硬件检测优化"></a>硬件检测优化</h3><p>用户移动、摇晃、倾斜设备时，会产生动作(motion)事件，这些事件由加速度计、陀螺仪、磁力计等硬件检测。在不需要检测的场合，应该及时关闭这些硬件</p><blockquote><p>做到用到的时候才申请，用完就关闭</p></blockquote><h2 id="启动优化"><a href="#启动优化" class="headerlink" title="启动优化"></a>启动优化</h2><p>iOS应用的启动可以分为三个阶段</p><ol><li><code>dyld</code>: 加载可执行文件，递归加载依赖库，符号绑定<ul><li>减少动态库</li><li>去掉不用的类，方法和分类，减少数量</li><li>Swift优先使用<code>Struct</code>（结构体分配在栈上，不需要动态管理内存，性能优）</li></ul></li><li><code>runtime</code>: 初始化OC的类，category，load方法，C++静态初始化器，<code>__attribute__((constructor))</code><ul><li>减少load方法</li></ul></li><li><code>main</code><ul><li>只初始化必要的方法，能延后执行的延后执行，按需加载</li><li>二进制重排</li></ul></li></ol><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/72653360">https://zhuanlan.zhihu.com/p/72653360</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter禁用水波纹</title>
      <link href="/2020-06-12/flutter-disable-ripple/"/>
      <url>/2020-06-12/flutter-disable-ripple/</url>
      
        <content type="html"><![CDATA[<p>在做Flutter开发的时候，通常我们都使用MaterialApp来开发，最典型的样式就是点击会有水波纹效果，但有时候我们不希望有水波纹效果，例如在iOS上，使用TextFiled的时候禁用水波纹效果，让体验看起来更像原生</p><span id="more"></span><p>搜索了一番，没有特别好的方法，基本上是修改<code>splashColor</code>，感觉不够彻底，于是从源码入手看下，我们知道水波纹效果的Widget为<code>InkWell</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">InkWell(</span><br><span class="line">    onTap: () &#123;&#125;,</span><br><span class="line">    child: Text(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>InkWell</code>继承自<code>InkResponse</code>，在<code>_InkResponseState</code>中的方法<code>_handleTapDown</code>可以看到，在点击的时候会开启splash</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _handleTapDown(TapDownDetails details) &#123;</span><br><span class="line">    _startSplash(details: details);</span><br><span class="line">    <span class="keyword">if</span> (widget.onTapDown != <span class="keyword">null</span>) &#123;</span><br><span class="line">        widget.onTapDown(details);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>_startSplash</code>创建了<code>InteractiveInkFeature</code>对象splash</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _startSplash(&#123;TapDownDetails details, BuildContext context&#125;) &#123;</span><br><span class="line">    <span class="keyword">assert</span>(details != <span class="keyword">null</span> || context != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    Offset globalPosition;</span><br><span class="line">    <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> RenderBox referenceBox = context.findRenderObject() <span class="keyword">as</span> RenderBox;</span><br><span class="line">      <span class="keyword">assert</span>(referenceBox.hasSize, <span class="string">&#x27;InkResponse must be done with layout before starting a splash.&#x27;</span>);</span><br><span class="line">      globalPosition = referenceBox.localToGlobal(referenceBox.paintBounds.center);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      globalPosition = details.globalPosition;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> InteractiveInkFeature splash = _createInkFeature(globalPosition);</span><br><span class="line">    _splashes ??= HashSet&lt;InteractiveInkFeature&gt;();</span><br><span class="line">    _splashes.add(splash);</span><br><span class="line">    _currentSplash = splash;</span><br><span class="line">    updateKeepAlive();</span><br><span class="line">    updateHighlight(_HighlightType.pressed, value: <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">InteractiveInkFeature _createInkFeature(Offset globalPosition) &#123;</span><br><span class="line">    <span class="keyword">final</span> MaterialInkController inkController = Material.of(context);</span><br><span class="line">    <span class="keyword">final</span> RenderBox referenceBox = context.findRenderObject() <span class="keyword">as</span> RenderBox;</span><br><span class="line">    <span class="keyword">final</span> Offset position = referenceBox.globalToLocal(globalPosition);</span><br><span class="line">    <span class="keyword">final</span> Color color = widget.splashColor ?? Theme.of(context).splashColor;</span><br><span class="line">    <span class="keyword">final</span> RectCallback rectCallback = widget.containedInkWell ? widget.getRectCallback(referenceBox) : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">final</span> BorderRadius borderRadius = widget.borderRadius;</span><br><span class="line">    <span class="keyword">final</span> ShapeBorder customBorder = widget.customBorder;</span><br><span class="line"></span><br><span class="line">    InteractiveInkFeature splash;</span><br><span class="line">    <span class="keyword">void</span> onRemoved() &#123;</span><br><span class="line">      <span class="keyword">if</span> (_splashes != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">assert</span>(_splashes.contains(splash));</span><br><span class="line">        _splashes.remove(splash);</span><br><span class="line">        <span class="keyword">if</span> (_currentSplash == splash)</span><br><span class="line">          _currentSplash = <span class="keyword">null</span>;</span><br><span class="line">        updateKeepAlive();</span><br><span class="line">      &#125; <span class="comment">// else we&#x27;re probably in deactivate()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    splash = (widget.splashFactory ?? Theme.of(context).splashFactory).create(</span><br><span class="line">      controller: inkController,</span><br><span class="line">      referenceBox: referenceBox,</span><br><span class="line">      position: position,</span><br><span class="line">      color: color,</span><br><span class="line">      containedInkWell: widget.containedInkWell,</span><br><span class="line">      rectCallback: rectCallback,</span><br><span class="line">      radius: widget.radius,</span><br><span class="line">      borderRadius: borderRadius,</span><br><span class="line">      customBorder: customBorder,</span><br><span class="line">      onRemoved: onRemoved,</span><br><span class="line">      textDirection: Directionality.of(context),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> splash;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>该类为抽象类，看名字像是水波纹的实现，主要逻辑就在这里面，<code>InkResponse</code>通过自身属性或从主题中取到<code>Theme.of(context).splashFactory</code>，然后创建<code>InteractiveInkFeature</code>，我们把主题中的factory换成自己实现一个没有水波纹的<code>InteractiveInkFeature</code>对象，就可以间接的关闭掉水波纹的效果了</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空水纹实现工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoSplashFactory</span> <span class="keyword">extends</span> <span class="title">InteractiveInkFeatureFactory</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  InteractiveInkFeature create(&#123;<span class="keyword">required</span> MaterialInkController controller, <span class="keyword">required</span> RenderBox referenceBox, <span class="keyword">required</span> Offset position, <span class="keyword">required</span> Color color, <span class="keyword">required</span> TextDirection textDirection, <span class="built_in">bool</span> containedInkWell = <span class="keyword">false</span>, RectCallback? rectCallback, BorderRadius? borderRadius, ShapeBorder? customBorder, <span class="built_in">double?</span> radius, VoidCallback? onRemoved&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> _NoInteractiveInkFeature(controller: controller, referenceBox: referenceBox, color: color, onRemoved: onRemoved);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// // InkFeature空实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_NoInteractiveInkFeature</span> <span class="keyword">extends</span> <span class="title">InteractiveInkFeature</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paintFeature(Canvas canvas, Matrix4 transform) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  _NoInteractiveInkFeature(&#123;</span><br><span class="line">    <span class="keyword">required</span> MaterialInkController controller,</span><br><span class="line">    <span class="keyword">required</span> RenderBox referenceBox,</span><br><span class="line">    <span class="keyword">required</span> Color color,</span><br><span class="line">    VoidCallback? onRemoved,</span><br><span class="line">  &#125;) : <span class="keyword">super</span>(controller: controller, referenceBox: referenceBox, color: color, onRemoved: onRemoved);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把widget包到<code>Theme</code>中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Theme(</span><br><span class="line">    data: ThemeData(</span><br><span class="line">        splashFactory: Shares.noInkFeatureFactory</span><br><span class="line">    ),</span><br><span class="line">    child: FlatButton(</span><br><span class="line">        child: Text(<span class="string">&quot;点击了&quot;</span>),</span><br><span class="line">        onPressed: () &#123;&#125;,</span><br><span class="line">    ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>默认还有点击背景，如果需要把点击的背景也去掉，highlightedColor设置为透明即可</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThemeData(</span><br><span class="line">    splashFactory: Shares.noInkFeatureFactory,</span><br><span class="line">    highlightColor: Colors.transparent,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>放到NavigationBottomTabBar</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">  bottomNavigationBar: Theme(</span><br><span class="line">    data: ThemeData(</span><br><span class="line">      <span class="comment">// 去掉水波纹效果</span></span><br><span class="line">      splashFactory: Shares.noInkFeatureFactory,</span><br><span class="line">      <span class="comment">// 去掉点击效果</span></span><br><span class="line">      highlightColor: Colors.transparent,</span><br><span class="line">    ),</span><br><span class="line">    child: BottomNavigationBar(</span><br><span class="line">      ...</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/images/post/flutter/flutter_disable_ripple.gif" class="" width="500">]]></content>
      
      
      <categories>
          
          <category> Flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter异步编程</title>
      <link href="/2020-06-10/flutter-thread/"/>
      <url>/2020-06-10/flutter-thread/</url>
      
        <content type="html"><![CDATA[<p>Flutter是基于Dart语言，而Dart是单线程语言，通常情况下，任务都在主线程（这里的主线程不同于Native的主线程）里面执行</p><span id="more"></span><h2 id="事件循环（event-loop）"><a href="#事件循环（event-loop）" class="headerlink" title="事件循环（event loop）"></a>事件循环（event loop）</h2><p>和iOS的Runloop类似，Dart中的线程也使用事件循环和消息队列的方式执行任务，在Dart中，线程叫做<code>isolate</code>，而这个更像是进程的概念（不同的<code>isolate</code>不共享状态，不存在锁的问题，并且通过port进行通信）</p><img src="/images/post/flutter/flutter-eventloop.jpeg" class="" width="500"><p>应用程序启动后，执行main函数，然后会开始运行<code>main isolate</code>，每个isolate都有两个事件队列，分别是<code>event queue</code>和<code>microtask queue</code>，有点类似iOS中的<code>sourcd0</code>, <code>source1</code>，<code>micro queue</code>优先级高于<code>event queue</code>，只有microtask queu为空时，才会执行event queue</p><ul><li><code>event queue</code>: 负责处理I&#x2F;O事件，手势，Timer，绘制，其他外部事件（如通过Future添加的事件）</li><li><code>microtask queue</code>: 负责处理优先级更高的事件</li></ul><blockquote><p>由于microtask queue会优先执行，为了避免渲染，和手势处理的延迟，对于复杂的计算，不应该放在<code>microtask queue</code>里面，应该放到<code>event queue</code>，而对于相对比较耗时的计算，应该考虑放到其他<code>isolate</code>运行（多线程），避免界面卡顿</p></blockquote><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> testFuture() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// 将任务放到事件队列，默认使用异步</span></span><br><span class="line">    Future(()&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Future event 1&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 同步执行，不会放入队列</span></span><br><span class="line">    Future.<span class="keyword">sync</span>(() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Future sync microtask event 2&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 将任务放到微任务队列</span></span><br><span class="line">    Future.microtask(()&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;microtask event&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testFuture();</span><br><span class="line"><span class="comment">// 执行完成testFuture后，event1和micro event会被放到队列里面</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;testFuture()执行完了&quot;</span>);</span><br><span class="line"><span class="comment">// 执行完了之后，开始从队列取出任务执行</span></span><br></pre></td></tr></table></figure><p>上面代码输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Future <span class="built_in">sync</span> microtask event 2</span><br><span class="line">testFuture()执行完了</span><br><span class="line">microtask event</span><br><span class="line">Future event 1</span><br></pre></td></tr></table></figure><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><h3 id="await-async"><a href="#await-async" class="headerlink" title="await, async"></a>await, async</h3><p>await和async用于等待Future完成，并且不会阻塞当前执行</p><ul><li><code>await</code>: 作用于Future对象，用于异步等待<code>Future&lt;T&gt;</code>完成，并且返回<code>T</code></li><li><code>async</code>: 作用于方法，与await配合使用，用于声明方法需要等待</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">String</span>&gt; dataReqeust() &#123;</span><br><span class="line">    <span class="keyword">return</span> Future&lt;<span class="built_in">String</span>&gt;(() &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;request begin&quot;</span>);</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;request end&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;data&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">String</span>&gt; loadData() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">await</span> dataReqeust();</span><br><span class="line">  <span class="keyword">return</span> data;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="keyword">await</span> loadData();</span><br><span class="line">  <span class="built_in">print</span>(data);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;testFuture()执行完了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">request begin</span><br><span class="line">request end</span><br><span class="line">data</span><br><span class="line">testFuture()执行完了</span><br></pre></td></tr></table></figure><blockquote><p>由于Dart是单线程的，如果创建一个耗时的Future，则可能会导致后面的任务延后执行</p></blockquote><p>async和await的本质是<code>协程</code>(<code>coroutine</code>)的语法糖，协程可以让单线程支持异步调度的，减少进程调度带来的开销</p><h3 id="then-catchError-whenComplete"><a href="#then-catchError-whenComplete" class="headerlink" title="then, catchError, whenComplete"></a>then, catchError, whenComplete</h3><ul><li><code>then</code>: 在Future执行完成后立即调用</li><li><code>catchError</code>: 在Future执行过程中，出现异常时调用（throw error）</li><li><code>whenComplete</code>: 当Future完成（包括抛出异常）都会走到这个方法</li></ul><p>上面三个方法都会返回一个Future，Dart会把任务放到回调队列里面，返回值又可以视为一个新的Future<br>当调用上面三个方法，这时候Dart会把方法注册到zone中的回调方法里面，而如果这时候Future已经执行完了，那么方法会被放到<code>microtask queu</code>里面）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> testFuture() <span class="keyword">async</span> &#123;</span><br><span class="line">  Future x1 = Future(() &#123;</span><br><span class="line">    <span class="comment">// throw &quot;error&quot;;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  x1.then((value) &#123;</span><br><span class="line">    <span class="comment">// 如果x1没有抛出异常，会先走到这里</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">  &#125;).then((v) &#123;</span><br><span class="line">    <span class="comment">// 在上一个then执行完后，走到这里</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">  &#125;).catchError((e) &#123;</span><br><span class="line">    <span class="comment">// 在x1抛出异常时，走到这里</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">  &#125;).whenComplete(()&#123;</span><br><span class="line">    <span class="comment">// 当then3或catchError执行完后走到这里</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">  &#125;).then((v) &#123;</span><br><span class="line">    <span class="comment">// whenComplete执行完后走到这里</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;error2&quot;</span>;</span><br><span class="line">  &#125;).catchError((e) &#123;</span><br><span class="line">    <span class="comment">// 当上一个then抛出异常的时，走到这里</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 执行</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  testFuture();</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;testFuture()执行完了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">testFuture()执行完了</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>结合<code>microtask queue</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> testFuture() <span class="keyword">async</span> &#123;</span><br><span class="line">  Future x1 = Future(() =&gt; <span class="keyword">null</span>);</span><br><span class="line">  x1.then((value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;6&#x27;</span>);</span><br><span class="line">    Future.microtask(() =&gt; <span class="built_in">print</span>(<span class="string">&#x27;7&#x27;</span>));</span><br><span class="line">  &#125;).then((value) =&gt; <span class="built_in">print</span>(<span class="string">&#x27;8&#x27;</span>));</span><br><span class="line">  Future x = Future(() =&gt; <span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>));</span><br><span class="line">  x.then((value) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line">    Future(() =&gt; <span class="built_in">print</span>(<span class="string">&#x27;9&#x27;</span>));</span><br><span class="line">  &#125;).then((value) =&gt; <span class="built_in">print</span>(<span class="string">&#x27;10&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  Future(() =&gt; <span class="built_in">print</span>(<span class="string">&#x27;2&#x27;</span>));</span><br><span class="line">  Future.microtask(() =&gt; <span class="built_in">print</span>(<span class="string">&#x27;3&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testFuture();</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;testFuture()执行完了&quot;</span>);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">testFuture()执行完了</span><br><span class="line">3</span><br><span class="line">6</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">1</span><br><span class="line">4</span><br><span class="line">10</span><br><span class="line">2</span><br><span class="line">9</span><br></pre></td></tr></table></figure><h2 id="Isolate"><a href="#Isolate" class="headerlink" title="Isolate"></a>Isolate</h2><p>Isolate是dart的<code>进程模型</code>，有独立的存储空间，独立的运行环境，不像线程可以直接共享内存状态，基于port通信，除了main isolate，其他isolate不支持UI相关的操作，通常用于计算密集型的任务，这里说的进程指的是在Dart环境下的进程，不是平台的进程，从平台的角度来看还是线程</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:isolate&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子进程任务</span></span><br><span class="line"><span class="keyword">void</span> func(<span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; argument) &#123;</span><br><span class="line">  SendPort send = argument[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">int</span> value = argument[<span class="number">1</span>];</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;进入子进程任务!!，收到参数 <span class="subst">$value</span>&#x27;</span>);</span><br><span class="line">  <span class="comment">// 向端口发送数据</span></span><br><span class="line">  send.send(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> testIsolate() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// 创建端口</span></span><br><span class="line">  ReceivePort port = ReceivePort();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数</span></span><br><span class="line">  <span class="built_in">int</span> value = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建isolate</span></span><br><span class="line">  Isolate iso = <span class="keyword">await</span> Isolate.spawn(func, [port.sendPort, value]);</span><br><span class="line"></span><br><span class="line">  port.listen((message) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;收到子进程的消息：<span class="subst">$message</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭端口</span></span><br><span class="line">    port.close();</span><br><span class="line">    <span class="comment">// 杀死iso进程</span></span><br><span class="line">    iso.kill();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  testIsolate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dart提供了一个方法<code>compute</code>封装了一个方法，可以使用Future很方便的执行，内部是对isolate的封装</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/foundation.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> func2(<span class="built_in">int</span> v) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;子进程收到参数：<span class="subst">$v</span>&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;子进程执行耗时操作&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9999999</span>; i++) &#123;</span><br><span class="line">    sum = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> computeTest() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;外部代码1&#x27;</span>);</span><br><span class="line">  <span class="comment">// 这里需要使用外部方法，不能使用匿名函数，不能使用闭包</span></span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">await</span> compute(func2, <span class="number">10</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;执行完成：<span class="subst">$result</span>&quot;</span>);</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;外部代码2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  computeTest();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">flutter: 外部代码1</span><br><span class="line">flutter: 子进程收到参数：10</span><br><span class="line">flutter: 子进程执行耗时操作</span><br><span class="line">flutter: 执行完成：9999998</span><br><span class="line">flutter: 外部代码2</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://juejin.im/post/5cc311695188252e83434aba">深入理解Flutter多线程</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter_boost混编实践</title>
      <link href="/2020-06-07/flutter-boost-integration/"/>
      <url>/2020-06-07/flutter-boost-integration/</url>
      
        <content type="html"><![CDATA[<p>基于现有的项目接入flutter，官方提供的一个比较完整的接入方案，但是存在一个问题，由于<code>FlutterEngine</code>很重，而多个<code>FlutterViewController</code>共享一个Engine，并且同一时间下，一个engine只能与一个viewcontroller绑定，在管理起来，特别是对于多层跳转（native-&gt;flutter-&gt;native-&gt;flutter）非常麻烦，而如果创建多个<code>FlutterEngine</code>，就会带来很大的开销，导致内存暴涨，而<code>flutter_boost</code>提供了像WebView的方式操作FlutterViewController，可以存在多个FlutterViewController，这里基于一个现有的demo继承flutter_boost并解决侧滑手势冲突的问题</p><span id="more"></span><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><a href="https://flutter.dev/docs/development/add-to-app/ios/project-setup">官方</a>的流程的教程很详细，这里简单说明</p><ol><li><p>创建flutter模块（这里取为<code>my_flutter</code>）</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> some/path/</span><br><span class="line">flutter create --template module my_flutter</span><br></pre></td></tr></table></figure></li><li><p>从原来的项目的<code>Podfile</code>添加引用</p> <figure class="highlight rb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">source <span class="string">&#x27;https://github.com/CocoaPods/Specs.git&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">platform:</span>ios,<span class="string">&#x27;10.0&#x27;</span></span><br><span class="line"><span class="comment"># 不用动态库，动态库多了影响启动速度</span></span><br><span class="line"><span class="comment"># use_frameworks!</span></span><br><span class="line">use_modular_headers!</span><br><span class="line">inhibit_all_warnings!</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上flutter脚本</span></span><br><span class="line">flutter_application_path = <span class="string">&#x27;../my_flutter&#x27;</span></span><br><span class="line">load File.join(flutter_application_path, <span class="string">&#x27;.ios&#x27;</span>, <span class="string">&#x27;Flutter&#x27;</span>, <span class="string">&#x27;podhelper.rb&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">target <span class="string">&#x27;Demo&#x27;</span> <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 其他native用到的第三方库</span></span><br><span class="line">    pod <span class="string">&#x27;SnapKit&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># flutter pod</span></span><br><span class="line">    install_all_flutter_pods(flutter_application_path)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>先运行<code>flutter pub get</code>，再运行pod（最好先运行一下<code>my_flutter</code>）</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/flutter_module</span><br><span class="line">flutter pub get</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /path/to/iosproject</span><br><span class="line">pod install</span><br></pre></td></tr></table></figure></li><li><p>接下来就可以直接在Xcode运行了</p></li></ol><blockquote><p>当然还有其他的接入方式，笔者认为这个方式比较简单，具体可以参考<a href="https://flutter.dev/docs/development/add-to-app/ios/project-setup">官方教程</a></p></blockquote><h2 id="开始接入"><a href="#开始接入" class="headerlink" title="开始接入"></a>开始接入</h2><p>为了更方便的管理<code>FlutterEngine</code>和<code>FlutterViewController</code>，这里使用<code>flutter_boost</code>来管理</p><ol><li><p>为了方便管理，我们对<code>FLBFlutterViewContainer</code>进行封装</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FlutterVC</span>: <span class="title class_">FLBFlutterViewContainer</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">loadView</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.loadView()</span><br><span class="line">        <span class="comment">// 隐藏navigationbar</span></span><br><span class="line">        <span class="keyword">self</span>.navigationController<span class="operator">?</span>.navigationBar.isHidden <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现flutter到本地的路由（<code>NavigationHelper</code>为帮助类，具体见后面源码链接）</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PlatformRouterImp</span>: <span class="title class_">NSObject</span>, <span class="title class_">FLBPlatform</span> &#123;</span><br><span class="line">    <span class="comment">// 从flutter传过来的push页面需求</span></span><br><span class="line">    <span class="comment">// await FlutterBoost.singleton.open(&quot;nativePage&quot;, urlParams: &#123;&quot;a&quot;: 1&#125;, exts: &#123;&quot;b&quot;: 2&#125;);</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">open</span>(<span class="keyword">_</span> <span class="params">url</span>: <span class="type">String</span>, <span class="params">urlParams</span>: [<span class="params">AnyHashable</span> : <span class="keyword">Any</span>], <span class="params">exts</span>: [<span class="params">AnyHashable</span> : <span class="keyword">Any</span>], <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> url &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;nativePage&quot;</span>:</span><br><span class="line">            <span class="comment">// 跳转到本地页面</span></span><br><span class="line">            <span class="keyword">let</span> vc <span class="operator">=</span> <span class="type">HomeVC</span>()</span><br><span class="line">            <span class="type">NavigationHelper</span>.nav2VC(vc)</span><br><span class="line">            completion(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            completion(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">present</span>(<span class="keyword">_</span> <span class="params">url</span>: <span class="type">String</span>, <span class="params">urlParams</span>: [<span class="params">AnyHashable</span> : <span class="keyword">Any</span>], <span class="params">exts</span>: [<span class="params">AnyHashable</span> : <span class="keyword">Any</span>], <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> url &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;nativeFlutterPage&quot;</span>:</span><br><span class="line">            <span class="comment">// 创建新的FlutterVC</span></span><br><span class="line">            <span class="keyword">let</span> vc <span class="operator">=</span> <span class="type">FlutterVC</span>();</span><br><span class="line">            vc.setName(<span class="string">&quot;home&quot;</span>, params: urlParams);</span><br><span class="line">            <span class="keyword">let</span> navVC <span class="operator">=</span> <span class="type">UINavigationController</span>(rootViewController: vc)</span><br><span class="line">            <span class="type">NavigationHelper</span>.presentVC(navVC)</span><br><span class="line">            completion(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            completion(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">close</span>(<span class="keyword">_</span> <span class="params">uid</span>: <span class="type">String</span>, <span class="params">result</span>: [<span class="params">AnyHashable</span> : <span class="keyword">Any</span>], <span class="params">exts</span>: [<span class="params">AnyHashable</span> : <span class="keyword">Any</span>], <span class="params">completion</span>: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> topVC <span class="operator">=</span> <span class="type">NavigationHelper</span>.getTopVC()</span><br><span class="line">        <span class="keyword">let</span> presentVC <span class="operator">=</span> topVC.presentingViewController</span><br><span class="line">        <span class="comment">// 判断是否时present</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="keyword">_</span> <span class="operator">=</span> presentVC &#123;</span><br><span class="line">            topVC.dismiss(animated: <span class="literal">true</span>, completion: &#123; [<span class="keyword">unowned</span> topVC] <span class="keyword">in</span></span><br><span class="line">                topVC.removeFromParent()</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            topVC.navigationController<span class="operator">?</span>.popViewController(animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化，可以放在<code>application:didFinishLaunchingWithOptions:</code>，定义一个名为<code>myflutter_method_channel</code>的MethodChannel，用于通信</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于处理flutter发送的页面跳转消息</span></span><br><span class="line"><span class="keyword">let</span> router <span class="operator">=</span> <span class="type">PlatformRouterImp</span>.<span class="keyword">init</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">FlutterBoostPlugin</span>.sharedInstance().startFlutter(with: router, onStart: &#123; (engine) <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// 配置channel，用于通信</span></span><br><span class="line">    <span class="keyword">let</span> batteryChannel <span class="operator">=</span> <span class="type">FlutterMethodChannel</span>(name: <span class="string">&quot;myflutter_method_channel&quot;</span>,</span><br><span class="line">                                                binaryMessenger: engine.binaryMessenger)</span><br><span class="line">    batteryChannel.setMethodCallHandler(&#123; (call: <span class="type">FlutterMethodCall</span>, result: <span class="keyword">@escaping</span> <span class="type">FlutterResult</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">switch</span> call.method &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;alert&quot;</span>:</span><br><span class="line">            <span class="comment">// native弹窗</span></span><br><span class="line">            <span class="keyword">let</span> vc <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;测试弹窗&quot;</span>, message: <span class="string">&quot;弹窗内容&quot;</span>, preferredStyle: .alert)</span><br><span class="line">            vc.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;取消&quot;</span>, style: .cancel, handler: <span class="literal">nil</span>))</span><br><span class="line">            <span class="type">NavigationHelper</span>.getTopVC().present(vc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">            result(<span class="literal">true</span>)</span><br><span class="line">        default:</span><br><span class="line">            result(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在Dart初始化<code>flutter_boost</code></p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">void main() &#123;</span><br><span class="line">    runApp(<span class="type">MyApp</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyApp</span> <span class="title class_">extends</span> <span class="title class_">StatefulWidget</span> &#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    _MyAppState createState() <span class="operator">=&gt;</span> _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">_MyAppState</span> <span class="title class_">extends</span> <span class="title class_">State</span>&lt;<span class="title class_">MyApp</span>&gt; &#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    void initState() &#123;</span><br><span class="line">        <span class="comment">// 注册Page，用于native跳转</span></span><br><span class="line">        <span class="type">FlutterBoost</span>.singleton.registerPageBuilders(<span class="operator">&lt;</span><span class="type">String</span>, <span class="type">PageBuilder</span><span class="operator">&gt;</span>&#123;</span><br><span class="line">            &#x27;home&#x27;: (<span class="type">String</span> pageName, <span class="type">Map</span> params, <span class="type">String</span> uniqueId) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">HomePage</span>();</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;me&quot;</span>: (<span class="type">String</span> pageName, <span class="type">Map</span> params, <span class="type">String</span> uniqueId) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="type">MePage</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">super</span>.initState();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="type">Widget</span> build(<span class="type">BuildContext</span> context) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">MaterialApp</span>(</span><br><span class="line">        title: &#x27;<span class="type">Demo</span>&#x27;,</span><br><span class="line">        theme: <span class="type">ThemeData</span>(</span><br><span class="line">            primarySwatch: <span class="type">Colors</span>.blue,</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// 使用FlutterBoost作为builder</span></span><br><span class="line">        builder: <span class="type">FlutterBoost</span>.<span class="keyword">init</span>(),</span><br><span class="line">        home: <span class="type">HomePage</span>(),</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>flutter给native发消息</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 给native发消息</span></span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">bool</span> result = <span class="keyword">await</span> method_channel.invokeMethod(<span class="string">&quot;alert&quot;</span>, &lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt;&#123; <span class="string">&quot;a&quot;</span>: <span class="number">1</span> &#125;);</span><br><span class="line">    <span class="built_in">print</span>(result);</span><br><span class="line">&#125; <span class="keyword">on</span> Exception <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>native给flutter发消息</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FlutterBoostPlugin</span>.sharedInstance().sendEvent(<span class="string">&quot;showToast&quot;</span>, arguments: [<span class="string">&quot;message&quot;</span>: <span class="string">&quot;native消息&quot;</span>]);</span><br></pre></td></tr></table></figure><p> flutter 监听消息</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监听消息，返回值是个匿名方法，可以取消监听</span></span><br><span class="line">_listenCancelable = FlutterBoost.singleton.channel.addEventListener(<span class="string">&#x27;showToast&#x27;</span>, (name, arguments) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> msg = arguments[<span class="string">&quot;message&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> _hudKey.currentState.showAndDismiss(ProgressHudType.success, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消监听</span></span><br><span class="line">_listenCancelable.call()</span><br></pre></td></tr></table></figure></li><li><p>flutter给native发消息</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> cancelable: <span class="type">FLBVoidCallback</span>?</span><br><span class="line"></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听flutter发来的消息</span></span><br><span class="line">cancelable <span class="operator">=</span> <span class="type">FlutterBoostPlugin</span>.sharedInstance().addEventListener(&#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (name, arguments) <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> <span class="operator">=</span> <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> arguments <span class="operator">=</span> arguments, <span class="keyword">let</span> msg <span class="operator">=</span> arguments[<span class="string">&quot;message&quot;</span>] <span class="keyword">as?</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> vc <span class="operator">=</span> <span class="type">UIAlertController</span>(title: <span class="string">&quot;tip&quot;</span>, message: msg, preferredStyle: .alert)</span><br><span class="line">        vc.addAction(<span class="type">UIAlertAction</span>(title: <span class="string">&quot;cancel&quot;</span>, style: .default, handler: <span class="literal">nil</span>))</span><br><span class="line">        <span class="keyword">self</span>.present(vc, animated: <span class="literal">true</span>, completion: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, forName: <span class="string">&quot;alert&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="operator">...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取消监听</span></span><br><span class="line">cancelable<span class="operator">?</span>()</span><br></pre></td></tr></table></figure><p> flutter发送消息</p> <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FlutterBoost.singleton.channel.sendEvent(<span class="string">&quot;alert&quot;</span>, &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;flutter消息&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>flutter给native发消息交互也可以使用<code>FlutterMethodChannel</code></p></blockquote><h3 id="兼容侧滑返回"><a href="#兼容侧滑返回" class="headerlink" title="兼容侧滑返回"></a>兼容侧滑返回</h3><p>iOS的<code>UINavigationController</code>默认支持侧滑返回，flutter的<code>MaterialApp</code>在iOS上也支持侧滑返回，由于flutter运行在FlutterViewController上，所以默认情况下侧滑走的是UINavigationController，为了让侧滑可以衔接起来，我们需要</p><ul><li>当<code>MaterialApp</code>的只有一个页面的时候，使用native侧滑</li><li>当<code>MaterialApp</code>有不止一个页面的时候，禁用native的侧滑操作</li></ul><p>我们在<code>MaterialApp</code>添加一个observer</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// native通信channel</span></span><br><span class="line"><span class="keyword">const</span> method_channel = <span class="keyword">const</span> MethodChannel(<span class="string">&#x27;myflutter_method_channel&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNavigatorObserver</span> <span class="keyword">extends</span> <span class="title">NavigatorObserver</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在push和pop的时候，更新native的侧滑操作</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> didPush(Route&lt;<span class="built_in">dynamic</span>&gt; route, Route&lt;<span class="built_in">dynamic</span>&gt; previousRoute) &#123;</span><br><span class="line">        method_channel.invokeMethod(<span class="string">&quot;flutter_page_changed&quot;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;push&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;canPop&#x27;</span>: route.navigator.canPop()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> didPop(Route&lt;<span class="built_in">dynamic</span>&gt; route, Route&lt;<span class="built_in">dynamic</span>&gt; previousRoute) &#123;</span><br><span class="line">        method_channel.invokeMethod(<span class="string">&quot;flutter_page_changed&quot;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;canPop&#x27;</span>: route.navigator.canPop()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>flutter_boost</code>会接管<code>MeterialApp</code>自带的observer，并且提供了对应的方法（设置在MaterialApp会无效）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加navigationObserver，用于控制返回操作</span></span><br><span class="line">FlutterBoost.singleton.addBoostNavigatorObserver(myObserver);</span><br></pre></td></tr></table></figure><p>在<code>FlutterVC</code>添加<code>popGestureRecognizerEnabled</code>用于设置native侧滑功能</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FlutterVC</span>: <span class="title class_">FLBFlutterViewContainer</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> popGestureRecognizerEnabled <span class="operator">=</span> <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.navigationController<span class="operator">?</span>.interactivePopGestureRecognizer<span class="operator">?</span>.isEnabled <span class="operator">=</span> popGestureRecognizerEnabled</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于<code>UINavigationController</code>是多个<code>viewController</code>共用的，所以在本地页面跳转的时候，也需要更新<code>popGestureRecognizerEnabled</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">PopGestureEnable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> popGestureRecognizerEnabled: <span class="type">Bool</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlutterVC</span>: <span class="title class_">FLBFlutterViewContainer</span>, <span class="title class_">PopGestureEnable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> popGestureRecognizerEnabled <span class="operator">=</span> <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.navigationController<span class="operator">?</span>.interactivePopGestureRecognizer<span class="operator">?</span>.isEnabled <span class="operator">=</span> popGestureRecognizerEnabled</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于navigationController是多个viewController共享的，所以在页面跳转的时候，也需要进行更新</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidAppear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidAppear(animated)</span><br><span class="line">         <span class="keyword">self</span>.navigationController<span class="operator">?</span>.interactivePopGestureRecognizer<span class="operator">?</span>.isEnabled <span class="operator">=</span> <span class="keyword">self</span>.popGestureRecognizerEnabled</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ViewController</span>: <span class="title class_">UIViewController</span>, <span class="title class_">PopGestureEnable</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> popGestureRecognizerEnabled <span class="operator">=</span> <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.navigationController<span class="operator">?</span>.interactivePopGestureRecognizer<span class="operator">?</span>.isEnabled <span class="operator">=</span> popGestureRecognizerEnabled</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidAppear</span>(<span class="keyword">_</span> <span class="params">animated</span>: <span class="type">Bool</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidAppear(animated)</span><br><span class="line">        <span class="comment">// 页面显示的时候更新一下</span></span><br><span class="line">        <span class="keyword">self</span>.navigationController<span class="operator">?</span>.interactivePopGestureRecognizer<span class="operator">?</span>.isEnabled <span class="operator">=</span> <span class="keyword">self</span>.popGestureRecognizerEnabled</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加消息handle</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置channel</span></span><br><span class="line"><span class="keyword">let</span> batteryChannel <span class="operator">=</span> <span class="type">FlutterMethodChannel</span>(name: <span class="string">&quot;myflutter_method_channel&quot;</span>,</span><br><span class="line">                                            binaryMessenger: engine.binaryMessenger)</span><br><span class="line">batteryChannel.setMethodCallHandler(&#123; (call: <span class="type">FlutterMethodCall</span>, result: <span class="keyword">@escaping</span> <span class="type">FlutterResult</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></span><br><span class="line">    <span class="keyword">switch</span> call.method &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;flutter_page_changed&quot;</span>:</span><br><span class="line">        <span class="comment">// 修改native页面的侧滑</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> argument <span class="operator">=</span> call.arguments <span class="keyword">as?</span> [String: <span class="keyword">Any</span>],</span><br><span class="line">            <span class="keyword">let</span> canPop <span class="operator">=</span> argument[<span class="string">&quot;canPop&quot;</span>] <span class="keyword">as?</span> <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="comment">// 取出最上面的Controller</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> vc <span class="operator">=</span> <span class="type">NavigationHelper</span>.getTopVC() <span class="keyword">as?</span> <span class="type">FlutterVC</span> &#123;</span><br><span class="line">                <span class="comment">// 修改侧滑enabled</span></span><br><span class="line">                vc.popGestureRecognizerEnabled <span class="operator">=</span> <span class="operator">!</span>canPop</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result(<span class="literal">nil</span>)</span><br><span class="line">    default:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img src="/images/post/flutter_boost_demo.gif" class="" width="300"><p>代码在这里: <a href="https://github.com/zhengbomo/flutter_boost_demo">https://github.com/zhengbomo/flutter_boost_demo</a></p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift性能优化（一）</title>
      <link href="/2020-06-01/swift-performance/"/>
      <url>/2020-06-01/swift-performance/</url>
      
        <content type="html"><![CDATA[<p>最近学习了Swift底层原理相关的视频和文章，收获颇丰，趁热打铁，记录和总结对Swift的理解，对于Swift性能优化主要从下面三个方面入手</p><span id="more"></span><ul><li>内存分配</li><li>引用计数</li><li>方法派发方式</li></ul><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p>在程序运行过程中，我们控制的内存主要有两个下面两个区域（DATA段也能修改，但对性能影响不大）</p><ul><li>栈(Stack)：由操作系统管理，通常用来执行函数，存放局部变量和临时变量<ul><li>对于在栈上分配内存和释放只是堆栈指针的移动（入栈和出栈），并且不需要增加额外的数据</li></ul></li><li>堆(Heap): 由开发者自行管理内存的生命周期，通常用于存放类对象<ul><li>对于在堆上分配内存，需要更<code>高级的数据结构</code></li><li>申请内存的时候需要<code>搜索堆空间</code>，寻找合适的闲置内存块</li><li>需要添加额外的数据用于管理内存（如<code>引用计数</code>）</li><li>对于引用计数的操作需要具备<code>原子性</code>（线程安全）</li><li>堆上的内存还存在<code>线程安全</code>的问题</li></ul></li></ul><p>Swift 中的数据类型可以分成两种：<code>值类型</code>（Struct, Enum）、<code>引用类型</code>（Class）。两者的内存分配区域是不同的，值类型默认分配在栈区，引用类型默认分配在堆区</p><h3 id="栈分配"><a href="#栈分配" class="headerlink" title="栈分配"></a>栈分配</h3><img src="/images/post/swift/struct-on-stack.png" class="" width="800"><h3 id="堆分配"><a href="#堆分配" class="headerlink" title="堆分配"></a>堆分配</h3><img src="/images/post/swift/class-on-stack.png" class="" width="800"><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>在值类型和引用类型的选择上，应该更多使用值类型，对于调用频繁的方法，应该减少在堆创建对象，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123; <span class="keyword">case</span> blue, green, gray &#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Orientation</span> &#123; <span class="keyword">case</span> left, right &#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Tail</span> &#123; <span class="keyword">case</span> none, tail, bubble &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cache <span class="operator">=</span> [<span class="type">String</span>: <span class="type">UIImage</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 创建聊天气泡</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">makeBalloon</span>(<span class="keyword">_</span> <span class="params">color</span>: <span class="type">Color</span>, <span class="params">orientation</span>: <span class="type">Orientation</span>, <span class="params">tail</span>: <span class="type">Tail</span>) -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> key <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(color)</span>:<span class="subst">\(orientation)</span>:<span class="subst">\(tail)</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> image <span class="operator">=</span> cache[key] &#123;</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面<code>key</code>由于是动态创建的，会被分配到堆上，考虑用结构体包装，可以避免频繁在堆创建对象</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Attribute</span>: <span class="title class_">Hashable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">Color</span></span><br><span class="line">    <span class="keyword">var</span> orientation: <span class="type">Orientation</span></span><br><span class="line">    <span class="keyword">var</span> tail: <span class="type">Tail</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cache <span class="operator">=</span> [<span class="type">Attribute</span>: <span class="type">UIImage</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">makeBalloon</span>(<span class="keyword">_</span> <span class="params">color</span>: <span class="type">Color</span>, <span class="params">orientation</span>: <span class="type">Orientation</span>, <span class="params">tail</span>: <span class="type">Tail</span>) -&gt; <span class="type">UIImage</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> key <span class="operator">=</span> <span class="type">Attribute</span>(color: color, orientation:orientation, tail:tail)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> image <span class="operator">=</span> cache[key] &#123;</span><br><span class="line">        <span class="keyword">return</span> image</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="operator">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>对于需要频繁分配内存的需求，应尽量使用 <code>Struct</code>&#x2F;<code>Enum</code> 代替 <code>Class</code>。因为栈区的内存分配速度更快，更安全。</p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>上面例子可以看到，class Point在堆分配时候，会额外分配两个字段，第一个是函数表，用来实现多态，另一个就是<code>引用计数</code>，用于内存管理，上面的Point类可以看成下面代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> refCount: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> x, y: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">draw</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point1 <span class="operator">=</span> <span class="type">Point</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)      <span class="comment">// 引用计数=1</span></span><br><span class="line"><span class="keyword">let</span> point2 <span class="operator">=</span> point1</span><br><span class="line">retain(point2)                      <span class="comment">// 引用计数+1</span></span><br><span class="line">point2.x <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="comment">// use point1</span></span><br><span class="line">release(point1)                     <span class="comment">// 引用计数-1</span></span><br><span class="line"><span class="comment">// use point2</span></span><br><span class="line">release(point2)                     <span class="comment">// 引用计数-1，引用计数==0，释放Point在堆中的内存</span></span><br></pre></td></tr></table></figure><ul><li>引用计数是间接的管理内存，当引用计数为0时，Swift会将对应的内存释放</li><li>引用计数的操作是高频率的</li><li>引用计数的操作具备原子性（考虑线程安全），会带来一定的开销</li></ul><p>虽然栈上的内存分配会比堆上块，但是有时候，使用栈会增加引用计数的操作（栈上的结构体使用了类对象，类对象在堆上分配），从而影响性能，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Label</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> font: <span class="type">UIFont</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> label1 <span class="operator">=</span> <span class="type">Label</span>(text: <span class="string">&quot;Hi&quot;</span>, font: font)</span><br><span class="line"><span class="keyword">let</span> label2 <span class="operator">=</span> label1</span><br><span class="line">retain(label2.text._storeage)</span><br><span class="line">retain(label2.font)</span><br><span class="line"><span class="comment">// use label1</span></span><br><span class="line">release(label1.text._storeage)</span><br><span class="line">release(label1.font)</span><br><span class="line"><span class="comment">// use label2</span></span><br><span class="line">release(label2.text._storeage)</span><br><span class="line">release(label2.font)</span><br></pre></td></tr></table></figure><p>上面可以看到，每次label拷贝的时候，都会带来所有引用变量retain（上面例子是2个，如果多的话影响会更大），可以考虑改成<code>class</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Label</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> text: <span class="type">String</span></span><br><span class="line">  <span class="keyword">var</span> font: <span class="type">UIFont</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">init</span>(<span class="params">text</span>: <span class="type">String</span>, <span class="params">font</span>: <span class="type">UIFont</span>) &#123;</span><br><span class="line">    <span class="keyword">self</span>.text <span class="operator">=</span> text</span><br><span class="line">    <span class="keyword">self</span>.font <span class="operator">=</span> font</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看下面一个例子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Attachment</span> &#123; </span><br><span class="line">   <span class="keyword">let</span> fileURL: <span class="type">URL</span> </span><br><span class="line">   <span class="keyword">let</span> uuid: <span class="type">String</span> </span><br><span class="line">   <span class="keyword">let</span> mimeType: <span class="type">String</span> </span><br><span class="line">   <span class="keyword">init?</span>(<span class="params">fileURL</span>: <span class="type">URL</span>, <span class="params">uuid</span>: <span class="type">String</span>, <span class="params">mimeType</span>: <span class="type">String</span>) &#123; </span><br><span class="line">      <span class="keyword">guard</span> mimeType.isMimeType </span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125; </span><br><span class="line">      <span class="keyword">self</span>.fileURL <span class="operator">=</span> fileURL </span><br><span class="line">      <span class="keyword">self</span>.uuid <span class="operator">=</span> uuid </span><br><span class="line"></span><br><span class="line">      <span class="keyword">self</span>.mimeType <span class="operator">=</span> mimeType </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是struct包含多个class，优化代码如下，把引用类型改成值类型，提高性能同时，语义更明确</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Attachment</span> &#123; </span><br><span class="line">   <span class="keyword">let</span> fileURL: <span class="type">URL</span> </span><br><span class="line">   <span class="comment">// uuid改成UUID值类型</span></span><br><span class="line">   <span class="keyword">let</span> uuid: <span class="type">UUID</span> </span><br><span class="line">   <span class="comment">// mimeType改成结构体</span></span><br><span class="line">   <span class="keyword">let</span> mimeType: <span class="type">MimeType</span> </span><br><span class="line">   <span class="keyword">init?</span>(<span class="params">fileURL</span>: <span class="type">URL</span>, <span class="params">uuid</span>: <span class="type">UUID</span>, <span class="params">mimeType</span>: <span class="type">String</span>) &#123; </span><br><span class="line">      <span class="keyword">guard</span> <span class="keyword">let</span> mimeType <span class="operator">=</span> <span class="type">MimeType</span>(rawValue: mimeType) </span><br><span class="line">      <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">nil</span> &#125; </span><br><span class="line">      <span class="keyword">self</span>.fileURL <span class="operator">=</span> fileURL </span><br><span class="line">      <span class="keyword">self</span>.uuid <span class="operator">=</span> uuid </span><br><span class="line">      <span class="keyword">self</span>.mimeType <span class="operator">=</span> mimeType </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">MimeType</span> : <span class="title class_">String</span> &#123; </span><br><span class="line">   <span class="keyword">case</span> jpeg <span class="operator">=</span> <span class="string">&quot;image/jpeg&quot;</span> </span><br><span class="line">   <span class="keyword">case</span> png <span class="operator">=</span> <span class="string">&quot;image/png&quot;</span> </span><br><span class="line">   <span class="keyword">case</span> gif <span class="operator">=</span> <span class="string">&quot;image/gif&quot;</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>如果结构体中包含多个引用对象，在结构体传递的过程中，会对引用对象进行<code>retain/release</code></p><ul><li>可以考虑把<code>引用类型</code>转换成<code>值类型</code>（枚举&#x2F;结构体），减少struct中的class数量</li><li>也可以考虑把struct改成class来提高性能</li></ul><blockquote><p>当然也要根据具体场景判断是否要进行优化</p></blockquote><h2 id="派发方式"><a href="#派发方式" class="headerlink" title="派发方式"></a>派发方式</h2><p>Swift的函数派发有</p><ul><li><p>直接派发</p><ul><li>全局方法</li><li>使用<code>static</code>和<code>final</code>修饰的类和方法</li><li>使用<code>private</code>修饰的属性和方法会隐式添加<code>final</code></li><li><code>值类型</code>(struct, enum)的方法</li><li><code>extension</code>里面没有用<code>@objc</code>修饰的方法</li></ul></li><li><p>函数表派发</p><ul><li>使用protocol调用的方法</li><li>class的实例方法</li><li>使用</li></ul></li><li><p>消息派发</p><ul><li>class中使用<code>dynamic</code>修饰的方法</li><li>继承自OC对象的方法</li></ul></li></ul><p>性能：直接派发 &gt; 函数表派发 &gt; 消息派发</p><p>除了上面派发方式，Swift会根据情况对小函数进行<code>Inline</code>优化</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">drawAPoint</span>(<span class="keyword">_</span> <span class="params">param</span>: <span class="type">Point</span>) &#123; </span><br><span class="line">  param.draw()</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> point <span class="operator">=</span> <span class="type">Point</span>(x: <span class="number">0</span>, y: <span class="number">0</span>) </span><br><span class="line">drawAPoint(point)</span><br></pre></td></tr></table></figure><p>会被优化成</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point <span class="operator">=</span> <span class="type">Point</span>(x: <span class="number">0</span>, y: <span class="number">0</span>) </span><br><span class="line">point.draw()</span><br></pre></td></tr></table></figure><h3 id="Witness-Table"><a href="#Witness-Table" class="headerlink" title="Witness Table"></a>Witness Table</h3><p>我们知道，结构体也能实现协议，对于实现相同协议的不同的结构体，放到同一个数组中，内存是怎么分布的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Drawable</span> &#123; <span class="keyword">func</span> <span class="title function_">draw</span>() &#125; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> : <span class="title class_">Drawable</span> &#123; </span><br><span class="line">   <span class="keyword">var</span> x, y: <span class="type">Double</span> </span><br><span class="line">   <span class="keyword">func</span> <span class="title function_">draw</span>() &#123; <span class="operator">...</span> &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span> : <span class="title class_">Drawable</span> &#123; </span><br><span class="line">   <span class="keyword">var</span> x1, y1, x2, y2: <span class="type">Double</span> </span><br><span class="line">   <span class="keyword">func</span> <span class="title function_">draw</span>() &#123; <span class="operator">...</span> &#125; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> drawables: [<span class="type">Drawable</span>] </span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> drawables &#123; </span><br><span class="line">   d.draw() </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组的内存是连续的，而结构体又存放在栈中，并且结构体的大小可能不一样，这不是矛盾了吗</p><img src="/images/post/swift/struct_array_store.png" class="" width="800"><p>显然不可能像上面一样存储，在Swift中提供了一个叫<code>The Existential Container</code>的容器用来包装Protocol类型，该容器有<code>5个字节</code>，该容器结构如下</p><ul><li>valueBuffer: 占用3个字节</li><li>vwt: 占用1个字节，存放The Value Witness Table (VWT)，用于访问vwt，例如释放内存<br>  Swfit会为每个实现了Protocol的结构体，实现下面方法，用于把包装并管理数据的声明周期<ul><li><code>allocate:</code>: 由于valueBuffer只有3个字节，当结构体数据超过3个字节时，就需要在堆上申请内存，<code>allocate</code>用于申请内存</li><li><code>copy:</code>: 把结构体的数据拷贝到valueBuffer中，或把堆空间的地址复制到valueBuffer第一个字节</li><li><code>destruct:</code>: 用于销毁数据</li><li><code>deallocate:</code>: 回收内存</li></ul></li><li>pwt: 占用1个字节，存放The Protocol Witness Table（PWT），方法表<br>  protocol方法表，每一个实现protocol的结构体都有一个pwt表，在运行时通过pwt找到实例的方法</li></ul><p><code>The Existential Container</code>对应的结构体如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">ExistContDrawable</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> valueBuffer: (<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line">  <span class="keyword">var</span> vwt: <span class="type">ValueWitnessTable</span></span><br><span class="line">  <span class="keyword">var</span> pwt: <span class="type">DrawableProtocolWitnessTable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/swift/vwt_stack.png" class="" width="600"><p>我们看下一下面代码</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">drawACopy</span>(<span class="keyword">_</span> <span class="params">local</span>: <span class="type">Drawable</span>) &#123;</span><br><span class="line">  local.draw()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> val: <span class="type">Drawable</span> <span class="operator">=</span> <span class="type">Point</span>()</span><br><span class="line">drawACopy(val)</span><br></pre></td></tr></table></figure><p>Swift会把<code>drawACopy</code>方法改成下面形式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">drawACopy</span>(<span class="keyword">_</span> <span class="params">val</span>: <span class="type">ExistContDrawable</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> local <span class="operator">=</span> <span class="type">ExistContDrawable</span>()</span><br><span class="line">    <span class="keyword">let</span> vwt <span class="operator">=</span> val.vwt</span><br><span class="line">    <span class="keyword">let</span> pwt <span class="operator">=</span> val.pwt </span><br><span class="line">    local.type <span class="operator">=</span> type</span><br><span class="line">    local.pwt <span class="operator">=</span> pwt</span><br><span class="line">    <span class="comment">// 拷贝数据（如果小于3个字节，直接拷贝到栈上的valueBuffer，如果超过3个字节，会在堆申请空间）</span></span><br><span class="line">    vwt.allocateBufferAndCopyValue(<span class="operator">&amp;</span>local, val)</span><br><span class="line">    <span class="comment">// 通过pwt调用方法</span></span><br><span class="line">    <span class="comment">// projectBuffer返回数据的地址（栈或堆）</span></span><br><span class="line">    pwt.draw(vwt.projectBuffer(<span class="operator">&amp;</span>local))</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    vwt.destructAndDeallocateBuffer(temp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><code>vwt</code>: 解决结构体内存空间不一致问题</li><li><code>pwt</code>: 解决动态派发的问题（多态）</li></ul><h3 id="Protocol属性"><a href="#Protocol属性" class="headerlink" title="Protocol属性"></a>Protocol属性</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Pair</span> &#123; </span><br><span class="line">   <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">f</span>: <span class="type">Drawable</span>, <span class="keyword">_</span> <span class="params">s</span>: <span class="type">Drawable</span>) &#123;  </span><br><span class="line">      first <span class="operator">=</span> f ; second <span class="operator">=</span> s  </span><br><span class="line"></span><br><span class="line">   &#125; </span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> first: <span class="type">Drawable</span> </span><br><span class="line">   <span class="keyword">var</span> second: <span class="type">Drawable</span> </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">var</span> pair <span class="operator">=</span> <span class="type">Pair</span>(<span class="type">Line</span>(), <span class="type">Point</span>())</span><br></pre></td></tr></table></figure><p>pair的内存布局如下</p><img src="/images/post/swift/pair_memory.png" class="" width="600"><p>在Swift使用Protocol的时候，很多时候都是使用<code>The Existential Container</code></p><h2 id="Protocol-泛型"><a href="#Protocol-泛型" class="headerlink" title="Protocol 泛型"></a>Protocol 泛型</h2><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>出于性能的考虑，我们尽量</p><ul><li>使用<code>final</code>来修饰不会被重载的方法，如果class不会被重载，可以设置为final</li><li>使用<code>private</code>来修饰不会被外部访问到的属性和方法</li><li>从而提高函数的派发性能</li></ul><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://developer.apple.com/videos/play/wwdc2016/416/">Understanding Swift Performance</a></li></ul><p>未完待续~</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift方法派发机制</title>
      <link href="/2020-05-23/swift-method-dispatch/"/>
      <url>/2020-05-23/swift-method-dispatch/</url>
      
        <content type="html"><![CDATA[<p>方法派发机制是程序判断如何去调用函数或方法的机制，每次调用方法时都会触发，了解派发机制的工作原理，对于写出高性能的代码来说非常重要，派发机制也能解释一些Swift中的奇怪的现象，和Objective-C中的黑魔法</p><span id="more"></span><h2 id="静态派发-vs-动态派发"><a href="#静态派发-vs-动态派发" class="headerlink" title="静态派发 vs 动态派发"></a>静态派发 vs 动态派发</h2><p>根据函数调用能否在编译时或运行时确定，可以将派发机制分成两种类型：</p><ul><li><code>静态派发</code>：在编译期的时候，编译器就知道要为某个方法调用某种实现。因此, 编译器可以执行某些优化，甚至在可能的情况下，可以将某些代码转换成inline函数，从而使整体执行速度异常快。</li><li><code>动态派发</code>：一定量的运行时开销为代价，提高了语言的灵活性。在动态派发机制下，对于每个方法的调用，编译器必须在方法列表(<code>witness table</code>或<code>virtial table</code>)中查找执行方法的实现，如在运行时判断选择父类的实现，还是子类的实现。由于对象的内存都是在运行时分配的，因此只能在运行时执行检查。</li></ul><p>编译型语言有通常有三种基本的函数派发方式:</p><ol><li><p><code>直接派发</code>（Direct Dispatch）</p><ul><li>编译后就确定了方法的调用地址（也叫<code>静态派发</code>），汇编代码中，直接跳到方法的地址执行，生成的汇编指令最少，速度最快</li><li>例如C语言，C++默认也是直接派发</li><li>由于缺乏动态性，无法实现多态</li></ul></li><li><p><code>函数表派发</code>（Table Dispatch）</p><ul><li>在运行时通过一个函数表查找需要执行的方法，多一次查表的过程，速度比直接派发慢</li><li>C++的虚函数（Virtual Table），维护一个虚函数表，对象创建的时候会保存虚表的指针，调用方法之前，从对象中取出虚表地址，根据编译时的方法偏移量从虚表取出方法的地址，跳到方法的地址执行</li></ul></li><li><p><code>消息派发</code>（Message Dispatch）</p><ul><li>Objective-C: 方法调用包装成消息，发给运行时（相当于<code>中间人</code>），运行时会找到类对象，类对象会保存类的数据信息，其中就包含方法列表（类方法在元类对象存储），或通过父类查找，直到命中执行，如果没找到方法，抛出异常，运行时提供了很多动态的方法用于改变消息派发的行为，相比函数表派发有很强的<code>动态性</code>，由于运行时支持的功能很多，方法查找的过程比较长，性能比较低</li></ul></li></ol><p>性能：直接派发 &gt; 函数表派发 &gt; 消息机制派发</p><p>函数表派发和消息派发属于<code>动态派发</code></p><p>Swift支持上面三种函数派发方式，Swift编译器会根据不同的情况选择不同的派发方式，基于性能考虑优先选择性能高的派发方式</p><h2 id="Swift方法派发机制"><a href="#Swift方法派发机制" class="headerlink" title="Swift方法派发机制"></a>Swift方法派发机制</h2><p>这里先只讨论纯Swift对象（非继承自NSObject），继承自OC类的比较特殊，放到后面讨论</p><h3 id="直接派发"><a href="#直接派发" class="headerlink" title="直接派发"></a>直接派发</h3><p>在Swift中，下面方法会被编译为直接派发，在ARM64上调用方法会被编译为<code>bl 函数地址</code></p><ol><li><p><code>全局函数</code></p></li><li><p>使用<code>static</code>声明的所有方法</p></li><li><p>使用<code>final</code>声明的所有方法，使用final声明的类里面的所有方法</p> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method1</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">ChildClass</span>: <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">method2</span>() &#123; &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method3</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj <span class="operator">=</span> <span class="type">ChildClass</span>()</span><br><span class="line"><span class="comment">// 下面调用都是直接派发</span></span><br><span class="line">obj.method1()</span><br><span class="line">obj.method2()</span><br><span class="line">obj.method3()</span><br></pre></td></tr></table></figure></li><li><p>使用<code>private</code>声明的方法和属性，会隐式<code>final</code>声明</p></li><li><p><code>值类型</code>的方法，<code>struct</code>和<code>enum</code>都是值类型</p></li><li><p><code>extension</code>中没有使用<code>@objc</code>修饰的实例方法</p></li></ol><h3 id="函数表派发"><a href="#函数表派发" class="headerlink" title="函数表派发"></a>函数表派发</h3><p>只有引用类型才支持函数表派发，在Swift中，类的方法默认使用函数派发的方式，Swift的函数表叫<code>witness table</code>（其他语言叫<code>virtual table</code>）</p><ul><li>每个子类都有它自己的表结构</li><li>对于类中每个重写的方法，都有不同的函数指针</li><li>当子类添加新方法时，这些方法指针会添加在表数组的末尾</li><li>最后，编译器在运行时使用此表来查找调用函数的实现</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method1</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChildClass</span>: <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method3</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj <span class="operator">=</span> <span class="type">ChildClass</span>()</span><br><span class="line">obj.method2()</span><br></pre></td></tr></table></figure><p><code>obj</code>对象调用<code>method2</code>的过程</p><img src="/images/post/swift-table-dispatch.png" class="" width="500"><ul><li>读取对象<code>0xB00</code>的函数表.</li><li>读取函数指针的索引，在这里<code>method2</code>的索引是1(偏移量)，也就是<code>0xB00 + 1</code></li><li>跳到<code>0x222</code></li></ul><h3 id="消息派发"><a href="#消息派发" class="headerlink" title="消息派发"></a>消息派发</h3><p>Swift支持和OC混编，支持有限的runtime运行时（主要是为了和OC混编），对了纯Swift类，为了可以给OC调用，可以在方法前面加上<code>dynamic</code>来支持消息派发（注意<code>@objc</code>只是用于把方法暴露给ObjectiveC）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ParentClass</span> &#123;</span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当消息被派发时，运行时会顺着继承关系向上查找被调用的方法，为了能够提升消息派发的性能，一般都会将查找进行缓存</p><h3 id="协议Protocol"><a href="#协议Protocol" class="headerlink" title="协议Protocol"></a>协议Protocol</h3><p>协议所指向的对象，只有在运行时才能确定类型，Swift对于协议默认都使用<code>函数表派发</code>，协议可以为struct提供多态的支持</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">draw</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span>: <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">draw</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>: <span class="title class_">Drawable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">draw</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> drawable1: <span class="type">Drawable</span> <span class="operator">=</span> <span class="type">Line</span>()</span><br><span class="line"><span class="keyword">let</span> drawable2: <span class="type">Drawable</span> <span class="operator">=</span> <span class="type">Point</span>()</span><br><span class="line"></span><br><span class="line">drawable1.draw()        <span class="comment">// 使用函数表派发</span></span><br><span class="line">drawable1.draw()        <span class="comment">// 使用函数表派发</span></span><br></pre></td></tr></table></figure><h3 id="NSObject类"><a href="#NSObject类" class="headerlink" title="NSObject类"></a>NSObject类</h3><p>这里指继承自NSObject的类（包括UIView, UIButton等）</p><ul><li>对于普通的实例方法，使用函数表派发</li><li>对于使用<code>@objc</code>声明的方法，会暴露给ObjectiveC，还是使用函数表派发</li><li>对于<code>override</code>的OC方法，使用消息派发</li><li>对于<code>extension</code>方法，默认使用直接派发</li><li>使用<code>dynamic</code>修饰的方法使用消息派发</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyButton</span>: <span class="title class_">UIButton</span> &#123;</span><br><span class="line">    <span class="comment">// 直接派发</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">func</span> <span class="title function_">method1</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接派发</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">method2</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数表派发</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method3</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 函数表派发</span></span><br><span class="line">    <span class="keyword">@objc</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method4</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息派发派发</span></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">dynamic</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method5</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息派发</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">layoutSubviews</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.layoutSubviews()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">MyButton</span> &#123;</span><br><span class="line">    <span class="comment">// 直接派发</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">method6</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息派发</span></span><br><span class="line">    <span class="keyword">@objc</span> <span class="keyword">func</span> <span class="title function_">method7</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接派发</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">func</span> <span class="title function_">method8</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上基于XCode11+Swift5测试，讨论的是未被编译器优化的情况，编译器会根据方法的使用情况做优化，函数表派发可能被优化成直接派发，部分方法会被优化城<code>inline</code>形式</p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://developer.apple.com/videos/play/wwdc2016/416/">Understanding Swift Performance</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fishhook源码学习</title>
      <link href="/2020-05-14/fishhook-learn/"/>
      <url>/2020-05-14/fishhook-learn/</url>
      
        <content type="html"><![CDATA[<p>首先是知识储备</p><ul><li>Mach-O文件格式，用于定位懒绑定的函数地址</li><li>Mach-O懒加载机制，运行时绑定自定义地址</li></ul><span id="more"></span><h2 id="懒加载例子"><a href="#懒加载例子" class="headerlink" title="懒加载例子"></a>懒加载例子</h2><p>先看个例子</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main(<span class="type">int</span> argc, <span class="type">char</span> * argv[]) &#123;</span><br><span class="line">    printf(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    printf(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试查看汇编为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Test`main:</span><br><span class="line">    0x10486bf24 &lt;+0&gt;:  sub    sp, sp, #0x30             ; =0x30</span><br><span class="line">    0x10486bf28 &lt;+4&gt;:  stp    x29, x30, [sp, #0x20]</span><br><span class="line">    0x10486bf2c &lt;+8&gt;:  add    x29, sp, #0x20            ; =0x20</span><br><span class="line">    0x10486bf30 &lt;+12&gt;: stur   wzr, [x29, #-0x4]</span><br><span class="line">    0x10486bf34 &lt;+16&gt;: stur   w0, [x29, #-0x8]</span><br><span class="line">    0x10486bf38 &lt;+20&gt;: str    x1, [sp, #0x10]</span><br><span class="line">    0x10486bf3c &lt;+24&gt;: adrp   x0, 0</span><br><span class="line">    0x10486bf40 &lt;+28&gt;: add    x0, x0, #0xfa4            ; =0xfa4</span><br><span class="line">-&gt;  0x10486bf44 &lt;+32&gt;: bl     0x10486bf74               ; symbol stub for: printf</span><br><span class="line">    0x10486bf48 &lt;+36&gt;: adrp   x8, 0</span><br><span class="line">    0x10486bf4c &lt;+40&gt;: add    x8, x8, #0xfad            ; =0xfad</span><br><span class="line">    0x10486bf50 &lt;+44&gt;: str    w0, [sp, #0xc]</span><br><span class="line">    0x10486bf54 &lt;+48&gt;: mov    x0, x8</span><br><span class="line">    0x10486bf58 &lt;+52&gt;: bl     0x10486bf74               ; symbol stub for: printf</span><br><span class="line">    0x10486bf5c &lt;+56&gt;: mov    w9, #0x1</span><br><span class="line">    0x10486bf60 &lt;+60&gt;: str    w0, [sp, #0x8]</span><br><span class="line">    0x10486bf64 &lt;+64&gt;: mov    x0, x9</span><br><span class="line">    0x10486bf68 &lt;+68&gt;: ldp    x29, x30, [sp, #0x20]</span><br><span class="line">    0x10486bf6c &lt;+72&gt;: add    sp, sp, #0x30             ; =0x30</span><br><span class="line">    0x10486bf70 &lt;+76&gt;: ret</span><br></pre></td></tr></table></figure><p>进入 <code>0x10486bf74</code> 方法（用<code>si</code>命令）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test`printf:</span><br><span class="line">    0x10486bf74 &lt;+0&gt;: nop</span><br><span class="line">    0x10486bf78 &lt;+4&gt;: ldr    x16, #0x4088              ; (void *)0x0000000102a43fa8</span><br><span class="line">-&gt;  0x10486bf7c &lt;+8&gt;: br     x16</span><br></pre></td></tr></table></figure><p>这段代码对应MachO文件中<code>__DATA</code>段的<code>__stubs</code>，MachOView没有显示出汇编代码（文件偏移地址&#x3D;内存偏移地址 - ASLR - PAGESIZE）</p><img src="/images/post/fish/text-stubs.png" class=""><ul><li>第一次会跳到<code>0x0000000102a43fa8</code>这个地址，去掉ASLR为<code>0x0000000100007fa8</code>，这个值存放在对应<code>__DATA</code>段的<code>__la_symbol_ptr</code>，fishhook也是修改这里的值，达到替换方法的目的  <img src="/images/post/fish/data-la-symbol-ptr.png" class=""></li><li><code>0x0000000100007fa8</code>地址对应代码<code>__TEXT</code>段<code>__stub_helper</code>里面，第一次会执行这里进行符号绑定  <img src="/images/post/fish/text-stub-helper.png" class=""></li><li>绑定完成后，会修改内存中<code>__DATA</code>段的<code>__la_symbol_ptr</code>里面的值</li></ul><p>下面是第二次执行<code>printf</code>，x16的值以及是<code>0x000000019d06df5c</code>了，这个就是真实的<code>printf</code>地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Test`printf:</span><br><span class="line">-&gt;  0x10486bf74 &lt;+0&gt;: nop</span><br><span class="line">    0x10486bf78 &lt;+4&gt;: ldr    x16, #0x4088              ; (void *)0x000000019d06df5c: printf</span><br><span class="line">    0x10486bf7c &lt;+8&gt;: br     x16</span><br></pre></td></tr></table></figure><h2 id="fishhook源码分析"><a href="#fishhook源码分析" class="headerlink" title="fishhook源码分析"></a>fishhook源码分析</h2><p>fishhook就是利用了MachO对于符号（如：printf）在运行时才做真实地址的绑定（<code>__DATA</code>段<code>__la_symbol_ptr</code>或<code>__nl_symbol_ptr</code>），找到对应的符号占位地址修改为我们自己的函数地址</p><p><code>fishhook.c</code>源码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于重绑定符号的链表项</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rebindings_entry</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rebinding</span> *<span class="title">rebindings</span>;</span></span><br><span class="line">  <span class="type">size_t</span> rebindings_nel;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rebindings_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于存放所有要重绑定符号的列表，链表结构</span></span><br><span class="line"><span class="type">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">rebindings_entry</span> *_<span class="title">rebindings_head</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 重绑定符号</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rebind_symbols</span><span class="params">(<span class="keyword">struct</span> rebinding rebindings[], <span class="type">size_t</span> rebindings_nel)</span> &#123;</span><br><span class="line">  <span class="comment">// 把rebindings放进链表_rebindings_head的头部，原来的head会被放到next</span></span><br><span class="line">  <span class="type">int</span> retval = prepend_rebindings(&amp;_rebindings_head, rebindings, rebindings_nel);</span><br><span class="line">  <span class="keyword">if</span> (retval &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否是第一次调用（第一次的话next为空）</span></span><br><span class="line">  <span class="keyword">if</span> (!_rebindings_head-&gt;next) &#123;</span><br><span class="line">    <span class="comment">// 第一次调用的话，注册加载动态库的回调，加载完后会回调_rebind_symbols_for_image</span></span><br><span class="line">    _dyld_register_func_for_add_image(_rebind_symbols_for_image);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 已经加载完成动态库，遍历所有的动态库</span></span><br><span class="line">    <span class="type">uint32_t</span> c = _dyld_image_count();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint32_t</span> i = <span class="number">0</span>; i &lt; c; i++) &#123;</span><br><span class="line">      <span class="comment">// 符号绑定，传入动态库header和ASLR偏移量</span></span><br><span class="line">      _rebind_symbols_for_image(_dyld_get_image_header(i), _dyld_get_image_vmaddr_slide(i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> retval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把rebindings放到链表rebindings_head的头部</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">prepend_rebindings</span><span class="params">(<span class="keyword">struct</span> rebindings_entry **rebindings_head,</span></span><br><span class="line"><span class="params">                              <span class="keyword">struct</span> rebinding rebindings[],</span></span><br><span class="line"><span class="params">                              <span class="type">size_t</span> nel)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">rebindings_entry</span> *<span class="title">new_entry</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> rebindings_entry));</span><br><span class="line">  <span class="keyword">if</span> (!new_entry) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  new_entry-&gt;rebindings = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> rebinding) * nel);</span><br><span class="line">  <span class="keyword">if</span> (!new_entry-&gt;rebindings) &#123;</span><br><span class="line">    <span class="built_in">free</span>(new_entry);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(new_entry-&gt;rebindings, rebindings, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> rebinding) * nel);</span><br><span class="line">  new_entry-&gt;rebindings_nel = nel;</span><br><span class="line">  new_entry-&gt;next = *rebindings_head;</span><br><span class="line">  *rebindings_head = new_entry;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定动态库符号</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> _rebind_symbols_for_image(<span class="type">const</span> <span class="keyword">struct</span> mach_header *header,</span><br><span class="line">                                      <span class="type">intptr_t</span> slide) &#123;</span><br><span class="line">    rebind_symbols_for_image(_rebindings_head, header, slide);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定动态库符号，主要方法</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">rebind_symbols_for_image</span><span class="params">(<span class="keyword">struct</span> rebindings_entry *rebindings,</span></span><br><span class="line"><span class="params">                                     <span class="type">const</span> <span class="keyword">struct</span> mach_header *header,</span></span><br><span class="line"><span class="params">                                     <span class="type">intptr_t</span> slide)</span> &#123;</span><br><span class="line">  Dl_info info;</span><br><span class="line">  <span class="comment">// 获取 mach_header 这个符号的信息，将信息放到 info 中</span></span><br><span class="line">  <span class="keyword">if</span> (dladdr(header, &amp;info) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">segment_command_t</span> *cur_seg_cmd;</span><br><span class="line">  <span class="type">segment_command_t</span> *linkedit_segment = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">symtab_command</span>* <span class="title">symtab_cmd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dysymtab_command</span>* <span class="title">dysymtab_cmd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历loadCommand，找到__LINKEDIT，LC_SYMTAB, LC_DYSYMTAB</span></span><br><span class="line">  <span class="type">uintptr_t</span> cur = (<span class="type">uintptr_t</span>)header + <span class="keyword">sizeof</span>(<span class="type">mach_header_t</span>);</span><br><span class="line">  <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; header-&gt;ncmds; i++, cur += cur_seg_cmd-&gt;cmdsize) &#123;</span><br><span class="line">    cur_seg_cmd = (<span class="type">segment_command_t</span> *)cur;</span><br><span class="line">    <span class="keyword">if</span> (cur_seg_cmd-&gt;cmd == LC_SEGMENT_ARCH_DEPENDENT) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cur_seg_cmd-&gt;segname, SEG_LINKEDIT) == <span class="number">0</span>) &#123;</span><br><span class="line">        linkedit_segment = cur_seg_cmd;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur_seg_cmd-&gt;cmd == LC_SYMTAB) &#123;</span><br><span class="line">      symtab_cmd = (<span class="keyword">struct</span> symtab_command*)cur_seg_cmd;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur_seg_cmd-&gt;cmd == LC_DYSYMTAB) &#123;</span><br><span class="line">      dysymtab_cmd = (<span class="keyword">struct</span> dysymtab_command*)cur_seg_cmd;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判空</span></span><br><span class="line">  <span class="keyword">if</span> (!symtab_cmd || !dysymtab_cmd || !linkedit_segment ||</span><br><span class="line">      !dysymtab_cmd-&gt;nindirectsyms) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定位 “符号表”，“字符串表”，“重定向表” 实际内存地址</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 代码段在内存的起始位置（ASLR偏移+PAGEZERO）(PAGEZERO = vmaddr - fileoff)</span></span><br><span class="line">  <span class="type">uintptr_t</span> linkedit_base = (<span class="type">uintptr_t</span>)slide + linkedit_segment-&gt;vmaddr - linkedit_segment-&gt;fileoff;</span><br><span class="line">  <span class="comment">// 符号表的地址 = 基址 + 符号表偏移量</span></span><br><span class="line">  <span class="type">nlist_t</span> *symtab = (<span class="type">nlist_t</span> *)(linkedit_base + symtab_cmd-&gt;symoff);</span><br><span class="line">  <span class="comment">// 字符串表的地址 = 基址 + 字符串表偏移量</span></span><br><span class="line">  <span class="type">char</span> *strtab = (<span class="type">char</span> *)(linkedit_base + symtab_cmd-&gt;stroff);</span><br><span class="line">  <span class="comment">// 动态符号表地址 = 基址 + 动态符号表偏移量</span></span><br><span class="line">  <span class="type">uint32_t</span> *indirect_symtab = (<span class="type">uint32_t</span> *)(linkedit_base + dysymtab_cmd-&gt;indirectsymoff);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为了重新遍历loadCommand，重新设置cur</span></span><br><span class="line">  cur = (<span class="type">uintptr_t</span>)header + <span class="keyword">sizeof</span>(<span class="type">mach_header_t</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 再次遍历LoadCommand</span></span><br><span class="line">  <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; header-&gt;ncmds; i++, cur += cur_seg_cmd-&gt;cmdsize) &#123;</span><br><span class="line">    cur_seg_cmd = (<span class="type">segment_command_t</span> *)cur;</span><br><span class="line">    <span class="keyword">if</span> (cur_seg_cmd-&gt;cmd == LC_SEGMENT_ARCH_DEPENDENT) &#123;</span><br><span class="line">      <span class="comment">// 找到__DATA段和__DATA_CONST段</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strcmp</span>(cur_seg_cmd-&gt;segname, SEG_DATA) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">          <span class="built_in">strcmp</span>(cur_seg_cmd-&gt;segname, SEG_DATA_CONST) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (uint j = <span class="number">0</span>; j &lt; cur_seg_cmd-&gt;nsects; j++) &#123;</span><br><span class="line">        <span class="type">section_t</span> *sect =</span><br><span class="line">          (<span class="type">section_t</span> *)(cur + <span class="keyword">sizeof</span>(<span class="type">segment_command_t</span>)) + j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对__nl_symbol_ptr以及__la_symbol_ptr进行rebind</span></span><br><span class="line">        <span class="keyword">if</span> ((sect-&gt;flags &amp; SECTION_TYPE) == S_LAZY_SYMBOL_POINTERS) &#123;</span><br><span class="line">          perform_rebinding_with_section(rebindings, sect, slide, symtab, strtab, indirect_symtab);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((sect-&gt;flags &amp; SECTION_TYPE) == S_NON_LAZY_SYMBOL_POINTERS) &#123;</span><br><span class="line">          perform_rebinding_with_section(rebindings, sect, slide, symtab, strtab, indirect_symtab);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新绑定符号</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">perform_rebinding_with_section</span><span class="params">(<span class="keyword">struct</span> rebindings_entry *rebindings,</span></span><br><span class="line"><span class="params">                                           <span class="type">section_t</span> *section,</span></span><br><span class="line"><span class="params">                                           <span class="type">intptr_t</span> slide,</span></span><br><span class="line"><span class="params">                                           <span class="type">nlist_t</span> *symtab,</span></span><br><span class="line"><span class="params">                                           <span class="type">char</span> *strtab,</span></span><br><span class="line"><span class="params">                                           <span class="type">uint32_t</span> *indirect_symtab)</span> &#123;</span><br><span class="line">  <span class="comment">// 是否是__DATA_CONST常量区</span></span><br><span class="line">  <span class="type">const</span> <span class="type">bool</span> isDataConst = <span class="built_in">strcmp</span>(section-&gt;segname, SEG_DATA_CONST) == <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `nl_symbol_ptr`和`la_symbol_ptr`section中的`reserved1`字段指明对应的`indirect symbol table`起始的index</span></span><br><span class="line">  <span class="comment">//动态符号表中第一个解析的符号的起始地址</span></span><br><span class="line">  <span class="type">uint32_t</span> *indirect_symbol_indices = indirect_symtab + section-&gt;reserved1;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// indirect_symbol_bindings是 `__la_symbol_ptr` or `__nl_symbol_ptr` 表</span></span><br><span class="line">  <span class="comment">// 它的首地址 = slide(基础偏移地址) + Section的内存相对地址 (memory address of this section)</span></span><br><span class="line">  <span class="type">void</span> **indirect_symbol_bindings = (<span class="type">void</span> **)((<span class="type">uintptr_t</span>)slide + section-&gt;addr);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 内存保护设置</span></span><br><span class="line">  <span class="type">vm_prot_t</span> oldProtection = VM_PROT_READ;</span><br><span class="line">  <span class="keyword">if</span> (isDataConst) &#123;</span><br><span class="line">    oldProtection = get_protection(rebindings);</span><br><span class="line">    <span class="comment">// 修改内存属性为可读写（__DATA_CONST段默认是只读的），便于我们修改函数地址等数据</span></span><br><span class="line">    mprotect(indirect_symbol_bindings, section-&gt;size, PROT_READ | PROT_WRITE);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历表</span></span><br><span class="line">  <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; section-&gt;size / <span class="keyword">sizeof</span>(<span class="type">void</span> *); i++) &#123;</span><br><span class="line">    <span class="comment">// 符号表Index：根据动态符号表获取</span></span><br><span class="line">    <span class="type">uint32_t</span> symtab_index = indirect_symbol_indices[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是 abs 或者 是 本地 则跳过 (因为不是动态库的外部符号)</span></span><br><span class="line">    <span class="keyword">if</span> (symtab_index == INDIRECT_SYMBOL_ABS || symtab_index == INDIRECT_SYMBOL_LOCAL ||</span><br><span class="line">        symtab_index == (INDIRECT_SYMBOL_LOCAL   | INDIRECT_SYMBOL_ABS)) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字符串表偏移量</span></span><br><span class="line">    <span class="type">uint32_t</span> strtab_offset = symtab[symtab_index].n_un.n_strx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过字符串表偏移量获取符号对应的字符串（符号的名字）</span></span><br><span class="line">    <span class="type">char</span> *symbol_name = strtab + strtab_offset;</span><br><span class="line">    <span class="type">bool</span> symbol_name_longer_than_1 = symbol_name[<span class="number">0</span>] &amp;&amp; symbol_name[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取第一个元素</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rebindings_entry</span> *<span class="title">cur</span> =</span> rebindings;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历所有需要hook的符号表</span></span><br><span class="line">    <span class="keyword">while</span> (cur) &#123;</span><br><span class="line">      <span class="keyword">for</span> (uint j = <span class="number">0</span>; j &lt; cur-&gt;rebindings_nel; j++) &#123;</span><br><span class="line">        <span class="comment">// 判断符号名是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (symbol_name_longer_than_1 &amp;&amp;</span><br><span class="line">            <span class="built_in">strcmp</span>(&amp;symbol_name[<span class="number">1</span>], cur-&gt;rebindings[j].name) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 备份原来的符号地址</span></span><br><span class="line">          <span class="keyword">if</span> (cur-&gt;rebindings[j].replaced != <span class="literal">NULL</span> &amp;&amp;</span><br><span class="line">              indirect_symbol_bindings[i] != cur-&gt;rebindings[j].replacement) &#123;</span><br><span class="line">            *(cur-&gt;rebindings[j].replaced) = indirect_symbol_bindings[i];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 并且将hook函数的新函数地址 更新到 `__nl_symbol_ptr`或者`__la_symbol_ptr` 中</span></span><br><span class="line">          indirect_symbol_bindings[i] = cur-&gt;rebindings[j].replacement;</span><br><span class="line"></span><br><span class="line">          <span class="comment">// 结束该内层的遍历, 查找下一个符号</span></span><br><span class="line">          <span class="keyword">goto</span> symbol_loop;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      cur = cur-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">  symbol_loop:;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 恢复原来的内存权限改写</span></span><br><span class="line">  <span class="keyword">if</span> (isDataConst) &#123;</span><br><span class="line">    <span class="type">int</span> protection = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldProtection &amp; VM_PROT_READ) &#123;</span><br><span class="line">      protection |= PROT_READ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldProtection &amp; VM_PROT_WRITE) &#123;</span><br><span class="line">      protection |= PROT_WRITE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (oldProtection &amp; VM_PROT_EXECUTE) &#123;</span><br><span class="line">      protection |= PROT_EXEC;</span><br><span class="line">    &#125;</span><br><span class="line">    mprotect(indirect_symbol_bindings, section-&gt;size, protection);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个过程</p><ul><li>获取LoadCommand的地址和数量</li><li>遍历LoadCommand，获取到<code>__LINKEDIT</code>，<code>LC_SYMTAB</code>, <code>LC_DYSYMTAB</code>信息</li><li>根据LoadCommand的段偏移量和ASLR偏移量，算出<code>符号表</code>，<code>动态符号表</code>，<code>字符串表</code>的内存地址</li><li>遍历LoadCommand，找出<code>__DATA</code>段和<code>__DATA_CONST</code>段，遍历<code>S_LAZY_SYMBOL_POINTERS</code>和<code>S_NON_LAZY_SYMBOL_POINTERS</code>段信息</li><li>如果是<code>__DATA_CONST</code>，则需要修改内存权限为可读写</li><li>遍历上面两个段，过滤<code>abs</code>和<code>本地符号</code>，找到匹配符号的，保存原来的地址，替换为新的符号地址<ul><li>通过<code>__la_symbol_ptr</code>的<code>reserved1</code>字段找到第一个需要动态绑定的符号在<code>Dynamic Symbol Table</code>中的位置<img src="/images/post/fish/data-la-symbol-ptr-reserved1.png" class=""><img src="/images/post/fish/dynamic-symbol-table-reserved1.png" class=""></li><li><code>Dynamic Symbol Table</code>中获取到<code>Symbol Table</code>的Index<img src="/images/post/fish/symbol-table-info.png" class=""></li><li>在<code>Symbol Table</code>获取<code>String Table</code>的偏移量，得到<code>符号名</code><img src="/images/post/fish/string-table-offset.png" class=""></li><li>找到匹配的符号名，替换对应的段信息</li></ul></li><li>恢复<code>__DATA_CONST</code>内存权限为只读</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《操作系统》内存管理（三）</title>
      <link href="/2020-05-05/os-learn-memory/"/>
      <url>/2020-05-05/os-learn-memory/</url>
      
        <content type="html"><![CDATA[<p>CPU速度快，存储器成本高，硬盘速度低，存储成本低，<code>内存</code>处于中间，缓和速度矛盾</p><span id="more"></span><p>程序的编译和运行过程</p><ol><li>编译</li><li>链接（三种方式）<ul><li>静态链接:</li><li>装入时动态链接</li><li>运行时动态链接</li></ul></li><li>装入: 使用逻辑地址编译链接后的程序，装载到内存中后，需要映射到物理地址<ul><li><code>绝对装入</code>：编译时产生绝对地址（物理地址）</li><li><code>可重定位装入</code>：程序使用逻辑地址，程序装入内存的时候进行<code>地址转换</code>，转换为绝对地址</li><li><code>动态运行时装入</code>：程序使用逻辑地址，程序装入内存的时候使用的也是逻辑地址，通过CPU<code>重定位寄存器</code>修复逻辑地址到物理地址，现代操作系统采用这种方式</li></ul></li></ol><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><p>操作系统对内存管理通常需要实现下面四个需求</p><h3 id="内存空间的分配和回收"><a href="#内存空间的分配和回收" class="headerlink" title="内存空间的分配和回收"></a>内存空间的分配和回收</h3><p>两种方式</p><ul><li>连续分配管理方式<ul><li>单一连续分配</li><li>固定分区分配</li><li>动态分区分配<ul><li><code>首次适应</code>：从头查找，找出第一个满足的内存块</li><li><code>最佳适应</code>：空闲内存排序，取出最小适应的内存块</li><li><code>最坏适应</code>：空闲内存排序，取出最大适应的内存块</li><li><code>临近适应</code>：每次从上一次结束位置开始查找，规则和首次适应一样</li></ul></li></ul></li><li>非连续分配管理方式<ul><li><code>基本分页存储管理</code>: 将物理内存分页，将进程分页，各页面离散放到内存快中（如iOS A9处理器之后的内存分页大小为16K），每页有一个编号，从0开始，程序加载到内存中时，会被拆分程多个页加载，然后分别加载到内存中的不同的页</li><li><code>基本分段存储管理</code>: 分段思想和分页类似，一个程序可以被分为多个段，每个段在内存中占据连续的空间，各个段之间可以不相邻<br>内存地址空间根据模块进行划分，每个段都有段名，每个段从0开始编址</li><li><code>段页式存储管理</code>: 先分段后分页</li></ul></li></ul><h4 id="基本分页存储管理"><a href="#基本分页存储管理" class="headerlink" title="基本分页存储管理"></a>基本分页存储管理</h4><ul><li><code>页表</code>: 记录页面和时机内存块之间的映射关系</li><li><code>逻辑地址</code>：<code>页号</code>和<code>页面偏移量</code></li></ul><p>优点：不会产生外部碎片，只会产生少量的页内碎片<br>缺点：不方便按逻辑模块实现信息的共享和保护</p><h4 id="基本分段存储管理"><a href="#基本分段存储管理" class="headerlink" title="基本分段存储管理"></a>基本分段存储管理</h4><ul><li><code>段表</code>：存放段内存的映射表（<code>段号</code>，<code>段长</code>，<code>基址</code>），与页表类似</li><li><code>逻辑地址</code>: <code>段号</code>和<code>段内地址</code></li><li><code>段表寄存器</code>：<code>段表始址</code>和<code>段表长度</code></li><li>分段对用户可见，分页对用户不可见</li><li>分段比分页更容易实现信息的共享和保护（如只读内存，可读写内存）</li></ul><img src="/images/post/os/os-memory-segment-tran.png" class="" width="1000" title="段地址变换"><p>优点：很方便按逻辑模块实现信息的共享和保护<br>缺点：如果段长过长，分配大的连续的内存空间很不方便，段式分配会产生外部内存碎片</p><h4 id="段页式管理"><a href="#段页式管理" class="headerlink" title="段页式管理"></a>段页式管理</h4><ul><li><code>逻辑地址</code>: <code>段号</code>，<code>页号</code>，<code>页面偏移量</code></li><li><code>段表寄存器</code>：<code>段表始址</code>和<code>段表长度</code></li></ul><h3 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h3><p>不同进程的地址空间应该互相独立，各进程应该在自己的内存空间内运行，不会越界访问</p><ul><li>设置上下限寄存器，用于检查地址是否越界</li><li>采用<code>重定位寄存器</code>(存放进程起始物理地址)和<code>界地址寄存器</code>进行越界检查（存放进程最大逻辑地址）</li></ul><h3 id="内存空间的扩充"><a href="#内存空间的扩充" class="headerlink" title="内存空间的扩充"></a>内存空间的扩充</h3><ul><li><p>内存紧张时，根据一定的策略把某些进程的内存空间换到外存，把需要的数据从外存加载到内存</p></li><li><p>通常磁盘文件为文件区和对换区，对换区采用连续存储，文件区采用随机存储，对换区的存取效率比文件区高，换初的内存放到<code>对换区</code></p><ul><li><code>覆盖技术</code>: 内存不够时，覆盖不用的内存</li><li><code>交换技术</code>: 内存不够的时候，内外存交换</li><li><code>虚拟存储技术</code>: 后面说明</li></ul></li></ul><p>内存空间扩充对程序是透明</p><h3 id="地址转换"><a href="#地址转换" class="headerlink" title="地址转换"></a>地址转换</h3><p>基本地址变换机构（地址转换）</p><ul><li><code>逻辑地址</code>：包含<code>页号</code>和<code>页内偏移量</code>）</li><li><code>页表寄存器</code>：存放<code>页表起始地址</code>和<code>页表长度</code>，用于做地址<code>越界检查</code></li><li>通过PCB页表得到<code>物理页号</code>&#x2F;<code>物理页偏移量</code></li><li>根据<code>逻辑偏移量</code>和<code>物理页偏移量</code>算出<code>真实物理地址</code></li><li>访问内存单元</li></ul><p>现代操作系统：编写程序的时候应该只关注指令和数据的逻辑地址，而逻辑地址到物理地址的转换（也称为地址重定位）应该由操作系统完成</p><h4 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h4><p>为了提高地址变换速度，操作系统在<code>高速缓存</code>维护了一份页表的副本，对应内存中的页表称为<code>慢表</code>，快表只存放一部分慢表，快表其实是对页表做了缓存，加快了访问速度，引入快表后的地址变换过程如下</p><img src="/images/post/os/os-memory-page-tran-fast.png" class="" width="1000" title="地址变换"><ul><li><code>高速缓存</code>: 速度介于寄存器和内存之间，通常位于CPU内部</li></ul><h4 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h4><ul><li>问题一：单级页表存在的问题：页表必须连续存放，页表很大的时候，占用空间大</li><li>问题二：部分页面经常使用，部分页面很少使用甚至不用，没必要加载整个页表到内存中</li></ul><p>把分页的思想应用于页表上，建立一张页目录表用于存放页表的页号，多级页表的逻辑地址就由<code>一级页号</code>，<code>二级页号</code>，<code>三级页号</code>…<code>页内偏移量</code>组成</p><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><p>传统的存储管理方式存在两个缺点:</p><ul><li><code>一次性</code>: 作业一次性全部调入内存</li><li><code>驻留性</code>: 作业在运行期间常驻内存</li></ul><p><code>局部性原理</code></p><ul><li>时间局部性：现在访问的指令在不久后很可能再次访问</li><li>空间局部性：现在访问的内存单元不久后很可能再次访问</li></ul><p><code>虚拟内存</code>：程序装入内存时，将要用到的内存<code>部分装入</code>内存，暂时没用到部分留在外存，就可以让程序运行了，内存不够用的时候，将暂时用不到的内存信息换出到外存，用户看起来”可以”使用比实际物理内存更大的内存，该特性是是通过操作系统在逻辑上虚拟的</p><ul><li><code>多次性</code>：无需再作业运行时，一次性全部装入内存，而是允许被多次调入内存</li><li><code>对换性</code>：作业运行时无需一致常驻内存，而式允许作业换入换出</li><li><code>虚拟性</code>：逻辑上扩充了内存容量，宏观上，使用内存大于实际内存</li></ul><h3 id="请求分页管理方式"><a href="#请求分页管理方式" class="headerlink" title="请求分页管理方式"></a>请求分页管理方式</h3><p>基于<code>离散分配</code>的内存管理方式上，操作系统需要提供下面功能</p><ul><li><code>请求调页/段</code>: 当访问的信息不在内存时候，由操作系统将所需的信息从外存加载到内存</li><li><code>页面/段置换</code>: 当内存空间不够时，由操作系统将部分不用的数据放到外存中</li></ul><p>实现</p><ul><li><code>页表机制</code>: 新增4个状态<ul><li>状态位(是否已调入内存)</li><li>访问字段(访问次数,用于置换)</li><li>修改位(是否被修改过)</li><li>外存地址(页面在外存的位置)</li></ul></li><li><code>缺页中断</code><ul><li>当访问的页不在内存中，会产生一个<code>缺页中断</code>，操作系统会阻塞该进程，并<code>保留CPU现场</code>，然后将页面加载到内存中（如果内存用完了，需要考虑置换），然后恢复CPU现场，再继续该进程</li><li>缺页中断属于<code>内中断</code></li><li>一条指令执行期间，可能产生多次缺页中断</li></ul></li><li><code>地址变换</code>: 从逻辑地址到物理地址的转换  <img src="/images/post/os/os-memory-page-tran.png" class="" width="1000" title="地址变换"></li></ul><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p>当内存不足时候，置换策略</p><ul><li>最佳置换算法(OPT): 根据以后不使用&#x2F;最长时间不实用的页面置换页面，无法实现</li><li>先进先出置换算法(FIFO)</li><li>最近最久未使用算法(LRU)：LRU算法实现起来比较麻烦，需要寄存器和栈，性能高</li><li>时钟置换算法(CLOCK): 用比较小的开销接近LRU的性能</li><li>改进型时钟置换算法：CLOCK算法添加修改位</li></ul><h3 id="页面分配策略"><a href="#页面分配策略" class="headerlink" title="页面分配策略"></a>页面分配策略</h3><ul><li><code>驻留集</code>：请求分页存储管理中给进程分配的物理块的集合，或者说进程使用的物理内存的集合，通常再虚拟存储技术中，驻留集比进程总大小要小，驻留集太小，会发生缺页</li><li><code>工作集</code>：在一定时间间隔内，进程实际访问的页面的集合，通常驻留集不能小于工作集</li><li><code>抖动（颠簸）现象</code>: 进程频繁访问的页面数大于可用的物理内存页面数，分配给进程的物理快不够，也就是频繁缺页导致置换操作频繁</li></ul><p>页面分配</p><ul><li><code>固定分配</code>: 系统为进程分配的物理页面固定不变，不够用&#x2F;缺页的时候会发生置换</li><li><code>可变分配</code></li></ul><p>置换策略</p><ul><li><code>局部置换</code>: 当发生缺页时，只置换当前进程的内存</li><li><code>全局置换</code>: 当发生缺页时，可置换其他进程的内存</li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《操作系统》进程管理（二）</title>
      <link href="/2020-04-30/os-learn-process/"/>
      <url>/2020-04-30/os-learn-process/</url>
      
        <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>程序：是静态的，存放在磁盘的一系列可执行的指令集合<br>进程：是动态的，程序加载到内存运行的一次执行过程</p><span id="more"></span><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><ul><li><p><code>进程控制块</code>(PCB): 操作系统用于管理进程所需要的相关信息，通常包含</p><ul><li>进程描述信息<ul><li>进程标识符PID</li><li>用户标识符UID</li></ul></li><li>资源相关信息<ul><li>I&#x2F;O设备使用</li><li>文件使用情况</li><li>内存分配情况</li></ul></li><li>运行相关信息<ul><li>CPU，磁盘使用，网络流量等）</li><li>进程状态信息（就绪态&#x2F;阻塞态&#x2F;运行态）</li></ul></li><li>处理机相关信息<ul><li>PSW，PC等寄存器等信息（用于进程切换保留现场）</li></ul></li></ul></li><li><p><code>程序段</code>：用于CPU执行的指令集合，只读</p></li><li><p><code>数据段</code>：用户存放程序运行过程中的产生的数据，可读写</p></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>动态性</li><li>并发性</li><li>独立性</li><li>异步性</li><li>结构性</li></ul><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><ul><li><p><code>就绪态</code>：具备运行的条件，等待CPU运行</p></li><li><p><code>运行态</code>：正在被CPU执行</p></li><li><p><code>阻塞态</code>：请求等待某个事件发生</p></li><li><p><code>创建态</code>：操作系统为新进程分配资源，创建PCB</p></li><li><p><code>终止态</code>：操作系统回收进程资源，撤销PCB</p></li></ul><p>状态转换</p><ul><li><p><code>就绪态-&gt;运行态</code>：进程被调度</p></li><li><p><code>运行态-&gt;就绪态</code>：CPU运行时间片到，或CPU被其他更高优先级的进程抢占了</p></li><li><p><code>运行态-&gt;阻塞态</code>：等待某个事件发生（主动行为）</p></li><li><p><code>阻塞态-&gt;就绪态</code>：等待的事件被触发（被动行为）</p></li><li><p><code>创建态-&gt;就绪态</code>：系统完成创建进程的相关工作</p></li><li><p><code>运行态-&gt;终止态</code>：进程运行结束，或运行遇到不可修复的错误</p></li></ul><img src="/images/post/os/os-process-state-tran.png" class="" width="1000" title="进程状态切换"><h2 id="原语"><a href="#原语" class="headerlink" title="原语"></a>原语</h2><p>原语的执行具有<code>原子性</code>，原子性通过<code>开中断指令</code>和<code>关中断指令</code>两个特权指令实现原子性</p><img src="/images/post/os/os-process-atomic.png" class="" width="600" title="进程状态切换"><p>如果中断信号在关中断指令和开中断指令之间发生，则会推迟到之后</p><blockquote><p>开关中断指令只能在内核进程使用，不能在用户进程使用</p></blockquote><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>进程的地址空间是相互独立的，一个进程无法直接访问另一个进程的地址空间，操作系统提供了下面三种通信方式</p><ul><li><code>共享存储</code>: 独立于进程之外的空间，两个进程都能互斥访问</li><li><code>管道通信</code>: 其实是在内存中开辟的一个固定大小的缓冲区<ul><li>管道只能采用半双工通信（一个时间段只能实现单向传输），如果要实现双向通信，需要2个管道</li><li>进程访问管道是互斥的</li><li>管道必须写满才能被读，必须读完才能被写</li></ul></li><li><code>消息传递</code><ul><li>直接通信方式：每个进程会有一个<code>消息缓冲队列</code>，用于接受其他进程发送过来的消息</li><li>间接通信方式：消息通过<code>信箱</code>集中管理进程的通信</li></ul></li></ul><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>进程也有并发的需求，多进程并发，会有性能差，通信麻烦的问题，所以在进程内部引入<code>线程</code></p><ol><li>解决进程并发问题</li><li>解决进程切换开销大的问题</li><li>解决进程通信的问题</li></ol><p><code>线程</code>：处理器的调度单位，为进程的执行过程，一个进程可以由多个线程，进程内的线程共享进程的地址空间，资源等</p><h2 id="线程实现方式"><a href="#线程实现方式" class="headerlink" title="线程实现方式"></a>线程实现方式</h2><ul><li><code>用户级线程</code>: 用单线程模拟多线程，例如消息循环<ul><li>不支持多核并行</li><li>一个线程阻塞会导致所有线程被阻塞</li><li>不需要CPU切换内核态核用户态，效率高</li></ul></li><li><code>内核级线程</code>: 由操作系统内核支持<ul><li>并发能力强</li><li>需要CPU切换内核态核用户态，开销大</li></ul></li></ul><h2 id="进程的调度"><a href="#进程的调度" class="headerlink" title="进程的调度"></a>进程的调度</h2><ul><li>高级调度（作业调度）: 外存 -&gt;  内存</li><li>中级调度（内存调度）: 内存 ⇌ 外存</li><li>低级调度（进程调度）: 内存 ⇌ CPU</li></ul><h3 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h3><ul><li>主动放弃<ul><li>进程正常终止</li><li>运行过程发生异常而终止</li><li>主动阻塞（如I&#x2F;O等待）</li></ul></li><li>被动放弃<ul><li>CPU时间片用完</li><li>有更紧急的事情要处理（如I&#x2F;O中断）</li><li>有更高优先级的进程进入就绪队列</li></ul></li><li>不能进行线程调度<ul><li>处理中断过程中</li><li>进程在操作系统内核程序临界区中</li><li>院子操作过程中</li></ul></li></ul><h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><ul><li>非抢占方式: 由进程主动放弃处理器, 可能CPU会被一个进程一直占用</li><li>抢占方式: 可以优先处理更紧急的进程</li></ul><h3 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h3><ol><li>保存当前进程现场（保存寄存器）</li><li>恢复即将切换进程现场（恢复寄存器）</li></ol><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p><code>临界资源</code>：一个时间段只允许一个进程使用的资源，进程互斥访问临界资源<br><code>临界区</code>：访问临界资源的代码<br><code>内核程序临界区</code>：访问某种内核数据结构的代码，如进程的就绪队列，过程中进程不能被调度</p><h2 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h2><ul><li><code>系统进程</code>优先级高于<code>用户进程</code></li><li><code>前台进程</code>优先级高于<code>后台进程</code></li><li>操作系统更偏好<code>I/O型进程</code>（可以让I&#x2F;O进程尽早投入工作，提高资源利用率，系统吞吐量）</li></ul><p>优先级分为<code>静态优先级</code>和<code>动态优先级</code></p><ul><li>如果某进程在就绪队列等待了很长时间，则可以适当的提高优先级</li><li>如果某进程占用处理机运行了很长事件，则可以适当的降低优先级</li></ul><h2 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h2><p>由于操作系统的并发性，导致不同进程中业务的执行顺序不可预测，为了满足特地执行流程（例如，先进程A读数据要在进程B写数据之后才能继续），就需要使用进程同步的技术，解决异步的问题</p><p><code>临界资源</code>：一个时间段内只允许一个进程使用的资源，进程对于临界资源的访问是互斥的</p><p>四个部分</p><ul><li><code>进入区</code>：检查是否可以进入临界区，负责上锁</li><li><code>临界区</code>：访问临界区的代码</li><li><code>退出区</code>：负责解锁</li><li><code>剩余区</code>：其余代码部分</li></ul><p>遵循原则</p><ul><li>空闲进入</li><li>忙则等待</li><li>优先等待</li><li>让权等待，等待的时候让出CPU</li></ul><p>进程互斥软件实现方法</p><ul><li>单标志法</li><li>双标志先检查法</li><li>双标志后检查法</li><li>Peterson算法</li></ul><p>进程互斥的硬件实现</p><ul><li>中断屏蔽方法：通过开&#x2F;关中断指令实现，简单高效，只是用于单处理器，只是用于内核进程</li><li>TestAndSet指令：检查临界区和上锁的操作为原子操作</li><li>Swap指令：与TestAndSet指令类似</li></ul><h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><h3 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h3><p><code>信号量</code>：一个变量，可以表示系统某种资源的数量</p><p>使用<code>wait</code>和<code>signal</code>原语对信号量进行操作，也称为<code>PV操作</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化整形信号量S，可用资源为1</span></span><br><span class="line"><span class="type">int</span> S = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// wait原语，相当于进入区</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">int</span> S)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(S &lt;= <span class="number">0</span>) ;     <span class="comment">// 资源不够时，进入忙等待</span></span><br><span class="line">    S = S - <span class="number">1</span>;          <span class="comment">// 占用资源</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// signal原语，相当于退出区</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span> S)</span> &#123;  </span><br><span class="line">    S = S + <span class="number">1</span>;          <span class="comment">// 释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用资源</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// P操作</span></span><br><span class="line">wait(S);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用资源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// V操作</span></span><br><span class="line">signal(S)</span><br></pre></td></tr></table></figure><p>存在问题：不满足让权等待的原则，会出现CPU空转的情况</p><h3 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h3><p>解决整形信号量<code>让权等待</code>的问题，通过<code>block</code>和<code>wakeup</code>原语，避免忙等待的情况，提高CPU的利用率</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">L</span>;</span>      <span class="comment">// 等待队列</span></span><br><span class="line">&#125; semaphore;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原子操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">wait</span><span class="params">(semaphore S)</span> &#123;</span><br><span class="line">    S.value--;</span><br><span class="line">    <span class="keyword">if</span> (S.value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 没有空闲的资源， 阻塞当前进程进程，并把进程放到等待队列中</span></span><br><span class="line">        block(S.L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原子操作</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal</span><span class="params">(semaphore S)</span> &#123;</span><br><span class="line">    S.value++;</span><br><span class="line">    <span class="keyword">if</span> (S.value &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明有进程在等待，唤醒队列中的进程</span></span><br><span class="line">        wakeup(S.L);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用信号量解决<code>互斥问题</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程P1</span></span><br><span class="line"><span class="built_in">P1</span>() &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// P操作</span></span><br><span class="line">    <span class="built_in">P</span>(mutex);</span><br><span class="line">    临界区代码</span><br><span class="line">    <span class="comment">// V操作</span></span><br><span class="line">    <span class="built_in">V</span>(mutex)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进程P2</span></span><br><span class="line"><span class="built_in">P2</span>() &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="built_in">P</span>(mutex);</span><br><span class="line">    临界区代码</span><br><span class="line">    <span class="built_in">V</span>(mutex)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用信号量解决<code>同步问题</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">semaphore S=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">P1() &#123;</span><br><span class="line">    代码<span class="number">1</span>;</span><br><span class="line">    代码<span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    V(S);</span><br><span class="line">    代码<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P2() &#123;</span><br><span class="line">    <span class="comment">// 在代码2执行完成后执行</span></span><br><span class="line">    P(S);</span><br><span class="line">    代码<span class="number">4</span>;</span><br><span class="line">    代码<span class="number">5</span>;</span><br><span class="line">    代码<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>;        <span class="comment">// 互斥信号量</span></span><br><span class="line">semaphore empty = n;        <span class="comment">// 缓冲区大小</span></span><br><span class="line">semaphore full = <span class="number">0</span>;         <span class="comment">// 产品数量</span></span><br><span class="line"></span><br><span class="line">producer() &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 生产一个产品</span></span><br><span class="line"></span><br><span class="line">        P(empty);       <span class="comment">// 消耗一个空闲缓冲区</span></span><br><span class="line"></span><br><span class="line">        P(mutex);</span><br><span class="line">        将产品放入缓冲区</span><br><span class="line">        V(mutex);</span><br><span class="line"></span><br><span class="line">        V(full);        <span class="comment">// 增加一个产品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">consumer() &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        P(full);        <span class="comment">// 消耗一个产品</span></span><br><span class="line"></span><br><span class="line">        P(mutex);</span><br><span class="line">        从缓冲区取出一个产品</span><br><span class="line">        V(mutex);</span><br><span class="line"></span><br><span class="line">        V(empty)        <span class="comment">// 增加一个空闲缓存区</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用产品</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读者写者问题"><a href="#读者写者问题" class="headerlink" title="读者写者问题"></a>读者写者问题</h3><p>读并发，写互斥</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">semaphore rw = <span class="number">1</span>;       <span class="comment">// 文件互斥访问</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>;          <span class="comment">// 读文件进程个数</span></span><br><span class="line">semaphore mutex = <span class="number">1</span>;    <span class="comment">// 用户对count互斥</span></span><br><span class="line">semaphore w = <span class="number">1</span>;        <span class="comment">// 实现当写进程进入的时候，新的读进程进不来，防止写饥饿</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">writer() &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        P(w);</span><br><span class="line"></span><br><span class="line">        P(rw);</span><br><span class="line">        写文件</span><br><span class="line">        V(rw);</span><br><span class="line"></span><br><span class="line">        V(w)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reader() &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        P(w);</span><br><span class="line">        P(mutex);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            P(rw);</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        V(mutex);</span><br><span class="line">        V(w);</span><br><span class="line">        读文件</span><br><span class="line"></span><br><span class="line">        P(mutex);</span><br><span class="line">        count--;</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            V(rw);              <span class="comment">// 没有读操作，释放</span></span><br><span class="line">        &#125;</span><br><span class="line">        V(mutex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">semaphore chopstick[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line">semaphore mutex = <span class="number">1</span>;</span><br><span class="line">Pi() &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        P(mutex);</span><br><span class="line">        P(chopstick[i]);        <span class="comment">// 拿起左边筷子</span></span><br><span class="line">        P(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);  <span class="comment">// 拿起右边筷子</span></span><br><span class="line">        V(mutex)</span><br><span class="line"></span><br><span class="line">        吃饭</span><br><span class="line"></span><br><span class="line">        V(chopstick[i]);        <span class="comment">// 放下左边筷子</span></span><br><span class="line">        V(chopstick[(i+<span class="number">1</span>)%<span class="number">5</span>]);  <span class="comment">// 放下右边筷子</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他问题</p><ul><li>多生产者消费者问题</li><li>吸烟者问题</li></ul><h3 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h3><p>信号量机制存在问题：编写程序困难，易出错，容易发生死锁，管程的引入是为了解决该问题<br>管程：通过封装同步数据的<code>方法</code>，由<code>编译器实现</code>方法的互斥，从而简单化信号量的使用，对于管程的方法，同一时间只有一个进程能进入方法，如下面<code>JAVA的管程</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">monitor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Item buffer[] = <span class="keyword">new</span> <span class="title class_">Item</span>[N];</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Item item)</span> &#123;</span><br><span class="line">        <span class="comment">// 每次只能有一个线程进入，由编译器实现互斥</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管程其实是利用了封装的思想，把进程同步互斥的逻辑封装到方法里面，通过编译器实现<code>方法的互斥</code>，达到线程同步的目的</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《操作系统》概论（一）</title>
      <link href="/2020-04-25/os-learn-basic/"/>
      <url>/2020-04-25/os-learn-basic/</url>
      
        <content type="html"><![CDATA[<p>操作系统：控制和管理整个计算机系统的硬件和软件资源，并合理组织调度计算机工作和资源的分配，以提供给用户和其他软件方便的接口和环境，它是计算机系统中最基本的<code>系统软件</code></p><span id="more"></span><h2 id="概念语功能"><a href="#概念语功能" class="headerlink" title="概念语功能"></a>概念语功能</h2><p>提供的功能</p><ul><li>处理机管理</li><li>存储器管理</li><li>文件管理</li><li>设备管理</li></ul><p>目标</p><ul><li>安全</li><li>高效</li></ul><p>为上层提供服务</p><ul><li>普通用户<ul><li>GUI</li><li>命令接口</li></ul></li><li>软件&#x2F;程序员<ul><li>程序接口&#x2F;系统调用</li></ul></li></ul><p>基本特征</p><ul><li><code>并发</code>: 宏观上同时发生，微观上交替发生，CPU的调度</li><li><code>共享</code>: 多个进程共同使用同一资源</li><li><code>虚拟</code>: 对资源的抽象（虚拟内存，分时CPU等）</li><li><code>异步</code>: 多道程序环境下，IO资源有限，带来的时间等待</li></ul><blockquote><p><code>并行</code>：宏观和微观上都是同时发生，多核CPU</p></blockquote><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><p>两类程序</p><ul><li><code>内核程序</code>: 多个内核程序组成操作系统内核</li><li><code>应用程序</code>: 基于操作系统之上的的应用程序</li></ul><p>两种指令</p><ul><li><code>特权指令</code>: 只允许操作系统调用（保护计算机安全）</li><li><code>非特权指令</code>: 可以被上层应用程序调用</li></ul><p>两种处理器状态</p><ul><li><code>内核态</code></li><li><code>用户态</code></li></ul><blockquote><p>CPU通过<code>内核态</code>和<code>用户态</code>区分特权指令，CPU通过程序状态字寄存器（<code>PSW</code>）标志位区分内核态还是用户态</p></blockquote><ul><li><code>内核态-&gt;用户态</code>: 执行特权指令修改<code>PSW</code>标志位</li><li><code>用户态-&gt;内核态</code>: 通过<code>中断</code>引发，由硬件自动完成</li></ul><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>中断是<code>操作系统内核夺回CPU的使用权的的唯一途径</code>（用户态-&gt;内核态）</p><ul><li>内中断: CPU内部触发<ul><li>陷阱，陷入：由程序主动引发，如系统调用</li><li>故障：由错误条件引起，内核修复故障后，会把CPU使用权还给程序，如缺页故障</li><li>终止：由致命错误引起的，CPU无法修复，会终止引用程序，如除数为0，非法执行特权指令</li></ul></li><li>外中断: 每一条指令执行结束时，CPU都会检查是否有外中断信号（由硬件完成，效率高）<ul><li>时钟中断（50nm）实现并发</li><li>IO设备发出的中断信号(如：打印机准备就绪)</li></ul></li></ul><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>应用程序通常使用操作系统提供的一组应用程序接口（<code>库函数</code>）来使用系统的服务，而这些应用程序接口由一组<code>系统调用</code>组成，更底层</p><ul><li>应用程序: 可以直接使用库函数，也可以直接使用系统调用(比较少)</li><li>库函数：通常由编程语言通过<code>库函数</code>的方式提供，封装了系统调用，有些库函数不包含系统调用</li><li>系统调用（可以通过<code>汇编语言</code>调用）</li></ul><p>系统调用是操作系统对底层资源管理的抽象，可以让上层更安全的使用系统资源，凡事与共享资源有关的操作（存储&#x2F;IO&#x2F;文件），都必须通过系统调用的方式向操作系统内核提出服务请求，<code>保证系统的稳定性和安全性</code>，防止用户非法操作，主要分为下面几类</p><ul><li>设备管理: 启动&#x2F;请求&#x2F;释放</li><li>文件管理: 读&#x2F;写&#x2F;创建&#x2F;删除</li><li>进程控制: 创建&#x2F;阻塞&#x2F;唤醒</li><li>进程通信: 消息传递&#x2F;信号传递</li><li>内存管理: 内存的分配&#x2F;回收</li></ul><img src="/images/post/os/systemcall-trap.png" class="" width="800" title="系统调用的过程"><ol><li>应用程序把对应的参数放到<code>寄存器</code></li><li>调用陷入指令（<code>trap</code>），让CPU内核切换到内核态</li><li>CPU调用对应的<code>系统调用</code>（内核程序）</li><li>CPU把使用权返还给应用程序</li></ol><h2 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h2><img src="/images/post/os/os-core-layer.png" class="" width="800" title="操作系统内核结构"><ul><li>底层<ul><li>时钟管理</li><li>中断处理</li><li>原语<ul><li>处于最底层，最接近硬件</li><li>原子性操作</li><li>运行时间短，调用频繁</li></ul></li></ul></li><li>管理<ul><li>进程管理</li><li>存储器管理</li><li>设备管理</li></ul></li></ul><p>由于进程管理，存储器管理，设备管理不直接操作底层，也可以作为用户态执行</p><img src="/images/post/os/os-core-type.png" class="" width="600" title="大内核与微内核"><ul><li>大内核&#x2F;宏内核: 将操作系统主要功能模块作为系统内核，运行在内核态<ul><li>优点：高性能</li><li>缺点：内核代码庞大</li><li>常用操作系统：Linux，Unix</li></ul></li><li>微内核：只保留最基本的功能在内核<ul><li>优点：性能低</li><li>缺点：内核代码少，易维护</li><li>常用操作系统：Windows, MacOS</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学C++学习笔记（三）</title>
      <link href="/2020-04-16/cpp-learn-3/"/>
      <url>/2020-04-16/cpp-learn-3/</url>
      
        <content type="html"><![CDATA[<p>接<a href="/2020-04-11/cpp-learn-2/">上一篇</a>，本篇主要是针对C++的新特性介绍，包括异常和智能指针</p><span id="more"></span><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常函数，抛出异常用<code>throw xxx</code>;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认情况下表示可能会抛出任何异常</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明不会抛出任何异常</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> <span class="title">throw</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明会抛出const char *类型的异常</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> v1, <span class="type">int</span> v2)</span> <span class="title">throw</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (v2 == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;不能除于0&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不会执行</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;后面当操作&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> v1/ v2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>try-catch</code>捕获异常</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="type">int</span> *p = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">999999</span>];</span><br><span class="line">&#125; <span class="built_in">catch</span> (<span class="type">int</span> exception) &#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;捕获异常&quot;</span> &lt;&lt; exception &lt;&lt; endl</span><br><span class="line">&#125; <span class="built_in">catch</span>(...) &#123;</span><br><span class="line">    <span class="comment">// 三个点表示可以捕获所有类型的异常</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;内存不足&quot;</span> &lt;&lt; endl</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>throw</code>异常后，会在当前函数中查找匹配的<code>catch</code>，找不到就终止当前函数代码，去上一层函数中查找。如果最终都找不到匹配的catch，整个程序就会终止</p><p>C++标准库提供了很多常用的异常，放在<code>std</code>命名空间下，开发中可以使用这些异常，让代码语义更明确，如下</p><ul><li>std::exception</li><li>std::bad_alloc</li><li>std::bad_cast</li><li>std::bad_exception</li><li>std::bad_typeid</li><li>std::logic_error</li><li>std::domain_error</li><li>std::invalid_argument</li><li>std::length_error</li><li>std::out_of_range</li><li>std::runtime_error</li><li>std::overflow_error</li><li>std::range_error</li><li>std::underflow_error</li></ul><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><p>由于函数执行的流程不可预测，<code>异常处理</code>会带来内存管理的问题，C++引入智能指针解决内存管理的问题</p><ul><li><p><code>auto_ptr</code>（已废弃）：自动管理内存的释放</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. 创建一个auto_ptr指针变量p1，当p1释放时，&quot;hello&quot;也会被释放，不需要手动释放hello字符串</span></span><br><span class="line">    auto_ptr&lt;string&gt; *p1 = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不需要手动释放，当变量p1释放的时候（栈空间被回收），就会自动释放</span></span><br><span class="line">    <span class="comment">// delete p1;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. p1将所有权转让给p2，p1会指向nullptr，而p2指向&quot;hello&quot;</span></span><br><span class="line">    auto_ptr&lt;string&gt; p2 = p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>unique_ptr</code>：自动管理内存释放，且内存只能有一个指针变量引用，不支持赋值和复制</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::unique_ptr&lt;Task&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;hello&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 unique_ptr 访问其成员</span></span><br><span class="line">string *s1 = p1.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译不通过，不能支持赋值</span></span><br><span class="line">std::unique_ptr&lt;Task&gt; p2 = p1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过std::move转移所有权到p2，此时p1指向nullptr</span></span><br><span class="line">std::unique_ptr&lt;Task&gt; p2 = std::<span class="built_in">move</span>(p1);</span><br></pre></td></tr></table></figure></li><li><p><code>shared_ptr</code>：通过引用技术共享对象，对象内部存储引用技术，当引用技术为0的时候，则进行析构，与ObjC的ARC技术类似</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">shared_ptr&lt;string&gt; <span class="title">p1</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;hello&quot;</span>))</span></span>;</span><br><span class="line"><span class="comment">// 引用计数为1</span></span><br><span class="line">cout &lt;&lt; p1.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">auto</span> p2 = p1</span><br><span class="line"><span class="comment">// 引用计数为2</span></span><br><span class="line">cout &lt;&lt; p1.<span class="built_in">use_count</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure></li><li><p><code>weak_ptr</code>：由于shared_ptr存在循环引用的问题，weak_ptr用于弱引用对象（引用计数不加1）与strong_ptr配合使用</p></li></ul><p>自己实现<code>auto_ptr</code>指针，通过栈上的局部变量管理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPoint</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T *m_obj;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SmartPoint</span>(T *obj): <span class="built_in">m_obj</span>(obj) &#123; &#125;</span><br><span class="line">    ~<span class="built_in">SmartPoint</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_obj != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> m_obj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重写变量访问</span></span><br><span class="line">    T *<span class="keyword">operator</span>-&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> m_obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 由于p是存放在栈空间，当p释放的时候，内部的Person也会被释放</span></span><br><span class="line">        <span class="function">SmartPoint&lt;Person&gt; <span class="title">p</span><span class="params">(<span class="keyword">new</span> Person(<span class="number">20</span>))</span></span>;</span><br><span class="line">        p-&gt;<span class="built_in">run</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板（泛型）"><a href="#模板（泛型）" class="headerlink" title="模板（泛型）"></a>模板（泛型）</h2><p>C++通过模板实现泛型，模板其实是相当于语法糖，在编译的时候自动生成对应的方法，如果方法没有使用，则不会被编译</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模板方法-单参数</span></span><br><span class="line"><span class="comment">// template &lt;class T&gt;       // 也可以使用class，是等价的</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> result = <span class="built_in">add</span>&lt;<span class="type">int</span>&gt;(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板方法，多参数</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> TA, <span class="keyword">typename</span> TB&gt; <span class="function">T <span class="title">add</span><span class="params">(TA a, TB b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板类</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span> &#123;</span><br><span class="line">    T *m_data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译细节</p><ul><li>所有的<code>.cpp</code>文件都是单独编译的，编译成<code>.obj</code>目标文件，而对于外部符号（例如头文件的声明的符号）都通过<code>占位</code>的方式进行编译</li><li>编译完成后，通过链接器<code>linker</code>，链接所有的<code>.obj</code>，把所有的占位符号都<code>修复</code>成成真实的地址</li></ul><p>为了解决模板编译的问题，把头文件改为<code>.hpp</code>，hpp文件既包含声明也包含实现，通常用来定义模板类和模板方法</p><h2 id="C-新特性"><a href="#C-新特性" class="headerlink" title="C++新特性"></a>C++新特性</h2><p>这里只列出一些常用的</p><ol><li><p><code>auto</code>关键字：自动识别类型，和其他语言的<code>var</code>差不多</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> person = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line"><span class="keyword">auto</span> a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>decltype</code>: 编译器特性，获取变量的类型</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 相当于：int b = a + 1</span></span><br><span class="line"><span class="keyword">decltype</span>(a) b = a + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>nullptr</code>: 空指针，解决<code>NULl</code>二义性问题</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a)</span> </span>&#123; &#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> *a)</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存在二义性问题</span></span><br><span class="line"><span class="built_in">func</span>(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用下面方式调用</span></span><br><span class="line"><span class="built_in">func</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">func</span>(<span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>for</code>快速遍历</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> items[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> item: items) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>lambda</code>表达式: <code>[capture] (params) mutable exception -&gt; returntype &#123; body &#125;</code></p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> g = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> h = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 捕获局部变量g，参数为int，返回值为void</span></span><br><span class="line"><span class="built_in">void</span> (*p)(<span class="type">int</span>) = [g] (<span class="type">int</span> a) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; g &lt;&lt; endl</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以用auto，自动识别类型，用=隐式捕获用到的变量</span></span><br><span class="line"><span class="keyword">auto</span> p1 = [=] (<span class="type">int</span> a) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; g &lt;&lt; endl</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用捕获</span></span><br><span class="line"><span class="keyword">auto</span> p1 = [&amp;g] (<span class="type">int</span> a) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; g &lt;&lt; endl</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式引用捕获，g为值捕获</span></span><br><span class="line"><span class="keyword">auto</span> p1 = [&amp;, g] (<span class="type">int</span> a) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; g &lt;&lt; endl</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值捕获变量修改，添加mutable，可以修改捕获变量，修改了也还是值捕获，不会作用到外部</span></span><br><span class="line"><span class="keyword">auto</span> p1 = [g] (<span class="type">int</span> a) <span class="keyword">mutable</span> -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    g++;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; g &lt;&lt; endl</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果能推断返回值类型，也可以返回值</span></span><br><span class="line"><span class="keyword">auto</span> p2 = [](<span class="type">int</span> a)&#123;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">p</span>();</span><br><span class="line"><span class="built_in">p2</span>();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift Annotating</title>
      <link href="/2020-04-14/annotating-swift-code/"/>
      <url>/2020-04-14/annotating-swift-code/</url>
      
        <content type="html"><![CDATA[<p>除了普通的代码注释外，编译器通常也会提供一些辅助开发的注释，例如<code>TODO</code>，<code>FIXME</code>，<code>ERROR</code>之类的注释，这些注释可以被编译器识别到，并提供一些友好提示，我们应该多利用这些编译器的特性来辅助我们日常的开发</p><span id="more"></span><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">takePicture</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Do camera stuff</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/swift-annotating-todofixup.png" class="" width="300"><h2 id="FIXME"><a href="#FIXME" class="headerlink" title="FIXME"></a>FIXME</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">increment</span>(<span class="keyword">_</span> <span class="params">num</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> Make this increment the input</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/swift-annotating-todofixup.gif" class="" width="1000"><h2 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h2><p>通过warning提示警告⚠️，可以编译通过</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">increment</span>(<span class="keyword">_</span> <span class="params">num</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> Make this increment the input</span></span><br><span class="line">    <span class="keyword">#warning</span>(<span class="string">&quot;Incorrect result returned&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/swift-annotating-warning.png" class="" width="500"><h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p><code>error</code>警告会编译不通过</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">readArr</span>(<span class="keyword">_</span> <span class="params">arr</span>: [<span class="type">Int</span>]) &#123;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span><span class="operator">…</span>arr.count &#123;</span><br><span class="line">        <span class="keyword">if</span> i <span class="operator">==</span> arr.count &#123;</span><br><span class="line">            <span class="keyword">#error</span>(“err”)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post/swift-annotating-error.png" class="" width="500"><h2 id="模拟器"><a href="#模拟器" class="headerlink" title="模拟器"></a>模拟器</h2><p>在模拟器调试的特殊代码，相当于宏隔离，模拟器的代码不会编译到真机</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@discardableResult</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">takePicture</span>() -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">#if</span> targetEnvironment(simulator)</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">#else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学C++学习笔记（二）</title>
      <link href="/2020-04-11/cpp-learn-2/"/>
      <url>/2020-04-11/cpp-learn-2/</url>
      
        <content type="html"><![CDATA[<p>接<a href="/2020-04-06/cpp-learn-1/">上一篇</a>，本篇主要是面向对象相关的知识点</p><span id="more"></span><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>C++可以使用<code>struct</code>和<code>class</code>定义一个类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认为public权限</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">void</span> run &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;person run&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认为private，需要显示声明public</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">void</span> run &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;person run&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>struct</code>和<code>class</code>的区别: class默认权限为private，struct默认权限为public，推荐使用<code>class</code></p><h3 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h3><p>C++中类支持嵌套定义，本质是语法糖，用于限制作用域</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 局部类，可以在函数内使用</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="type">int</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Person p;</span><br><span class="line">p.age = <span class="number">20</span>;</span><br><span class="line">p.<span class="built_in">run</span>();</span><br></pre></td></tr></table></figure><p>转成汇编</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mov d word ptr [ebp-0Ch], 0Ah</span><br><span class="line"></span><br><span class="line">; 传递调用者到exc，也就是p</span><br><span class="line">lea ecx, [ebp-0Ch]</span><br><span class="line"></span><br><span class="line">; 调用函数</span><br><span class="line">call 00061366</span><br></pre></td></tr></table></figure><p>C++对象的内存结构如下</p><img src="/images/post/cpp-class-memory.png" class="" width="600"><p>对象的本质，其实就是字段（和虚表指针）的内存集合，先定义的对象会放在低地址，后定义的对象防止高地址</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><code>this</code>是调用对象的地址，为指针，当对象调用成员函数的时候，会自动传入当前对象的指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span> -&gt; m_age = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 编译成汇编</span></span><br><span class="line">        <span class="comment">// 0x10c9c2f7c &lt;+12&gt;: movl   $0x0, (%rax)       ; 取到寄存器rdx存放的地址，给该地址赋值0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person p = <span class="built_in">Person</span>();</span><br><span class="line">    p.<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成汇编（AT&amp;T）</span></span><br><span class="line">    <span class="comment">// 0x10c9c2f50 &lt;+32&gt;: movq   %rax, -0x10(%rbp)         ; 设置p变量</span></span><br><span class="line">    <span class="comment">// 0x10c9c2f54 &lt;+36&gt;: callq  0x10c9c2f8a               ; 初始化Person的内存</span></span><br><span class="line">    <span class="comment">// 0x10c9c2f59 &lt;+41&gt;: movq   -0x10(%rbp), %rdi         ; 将p的地址赋值给寄存器rdi</span></span><br><span class="line">    <span class="comment">// 0x10c9c2f5d &lt;+45&gt;: callq  0x10c9c2f84               ; 调用函数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由汇编可以看出，通过寄存器传递this指针，this指针存放对象的地址</p><h3 id="堆空间初始化"><a href="#堆空间初始化" class="headerlink" title="堆空间初始化"></a>堆空间初始化</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1 = <span class="keyword">new</span> <span class="type">int</span>;          <span class="comment">// 不会被初始化</span></span><br><span class="line"><span class="type">int</span> *p2 = <span class="keyword">new</span> <span class="built_in">int</span>();        <span class="comment">// 初始化为0</span></span><br><span class="line"><span class="type">int</span> *p3 = <span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">5</span>);       <span class="comment">// 初始化为5</span></span><br><span class="line"><span class="type">int</span> *p4 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>];       <span class="comment">// 数组未被初始化</span></span><br><span class="line"><span class="type">int</span> *p5 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>]();     <span class="comment">// 数组元素都被初始化为0</span></span><br><span class="line"><span class="type">int</span> *p6 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>]&#123;&#125;;     <span class="comment">// 数组元素都被初始化为0</span></span><br><span class="line"><span class="type">int</span> *p7 = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">3</span>] &#123;<span class="number">5</span>&#125;;   <span class="comment">// 数组首元素被初始化为5，其他被初始化为0</span></span><br><span class="line"></span><br><span class="line">Person *p8 = <span class="keyword">new</span> Person;        <span class="comment">// 成员变量不会被初始化</span></span><br><span class="line">Person *p9 = <span class="keyword">new</span> <span class="built_in">Person</span>();      <span class="comment">// 成员变量默认被初始化为0，或调用构造函数</span></span><br></pre></td></tr></table></figure><h3 id="对象内存分布"><a href="#对象内存分布" class="headerlink" title="对象内存分布"></a>对象内存分布</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局变量，全局区</span></span><br><span class="line">Person g_person;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 局部变量，栈空间</span></span><br><span class="line">    Person person;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 手动申请内存，堆空间</span></span><br><span class="line">    Person *p = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数-x2F-析构函数"><a href="#构造函数-x2F-析构函数" class="headerlink" title="构造函数&#x2F;析构函数"></a>构造函数&#x2F;析构函数</h3><p>构造函数支持重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        m_age = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重载构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age) &#123;</span><br><span class="line">        m_age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 析构函数，只有一个</span></span><br><span class="line">    ~<span class="built_in">Person</span>() &#123;</span><br><span class="line">        <span class="comment">// 对象释放之前调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">person</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; person.age &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>如果自定义了构造函数，除了全局区（默认会初始化为0），其他内存空间的成员变量都需要手动初始化</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        <span class="comment">// age的值不确定，需要手动初始化age变量</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有成员初始化为0</span></span><br><span class="line">        <span class="built_in">msmset</span>(<span class="keyword">this</span>, <span class="number">0</span>, <span class="built_in">sizeof</span>(Person));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>构造函数和析构函数必须是<code>public</code>，如果定义为<code>private</code>，则该类无法被外部创建<br>构造函数先调用父类，后调用子类<br>析构函数先调用子类，后调用父类</p></blockquote><h3 id="成员访问权限"><a href="#成员访问权限" class="headerlink" title="成员访问权限"></a>成员访问权限</h3><p>权限与JAVA一样，对类的成员变量声明权限（<code>struct</code>默认为public，<code>class</code>默认为private）</p><ul><li><code>public</code>：公开访问（<code>struct默认</code>）</li><li><code>protected</code>：当前类和子类访问</li><li><code>private</code>：私有（<code>class默认</code>）</li></ul><p>继承关系也可以添加权限，表示继承的成员对子类的权限，<code>struct</code>默认为public，<code>class</code>默认为private，<strong>class要手写public</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student的子类不能访问Person的成员，叠加权限使用最小权限</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span>: <span class="keyword">private</span> Person &#123;</span><br><span class="line">    <span class="type">int</span> m_score;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="type">int</span> m_height;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Person(int age, int height) &#123;</span></span><br><span class="line">    <span class="comment">//     m_age = age;</span></span><br><span class="line">    <span class="comment">//     m_height = height;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 与上面构造方法等价</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> height): <span class="built_in">m_age</span>(age), <span class="built_in">m_height</span>(height) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>初始化顺序跟成员变量的声明顺序有关系，和列表顺序无关，下面写法是一样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> height): <span class="built_in">m_age</span>(age), <span class="built_in">m_height</span>(height) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与上面等价，先初始化m_age，再初始化m_height</span></span><br><span class="line"><span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> height): <span class="built_in">m_height</span>(height), <span class="built_in">m_age</span>(age) &#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数互相调用"><a href="#构造函数互相调用" class="headerlink" title="构造函数互相调用"></a>构造函数互相调用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="type">int</span> m_height;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 必须写在后面</span></span><br><span class="line">    <span class="built_in">Person</span>() : <span class="built_in">Person</span>(<span class="number">0</span>, <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 这里相当于创建一个新的对象</span></span><br><span class="line">        <span class="comment">// Person(0, 0);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age, <span class="type">int</span> height) &#123;</span><br><span class="line">        m_age = age;</span><br><span class="line">        m_height = height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="父类的构造函数"><a href="#父类的构造函数" class="headerlink" title="父类的构造函数"></a>父类的构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        m_age = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age): <span class="built_in">m_age</span>(age) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> : Person &#123;</span><br><span class="line">    <span class="comment">// 默认是调用无参构造函数</span></span><br><span class="line">    <span class="comment">// Student() : Person() &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示调用父类构造函数</span></span><br><span class="line">    <span class="built_in">Student</span>() : <span class="built_in">Person</span>(<span class="number">10</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果父类没有构造函数，则不调用</li><li>如果父类有构造函数，子类没有定义构造函数，则子类会隐式生成构造函数，并且调用父类的构造函数</li></ul><h3 id="调用父类方法"><a href="#调用父类方法" class="headerlink" title="调用父类方法"></a>调用父类方法</h3><p>继承关系中调用父类方法，通过类名调用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="keyword">public</span> Person &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用父类方法，相当于swift的super.func()</span></span><br><span class="line">        Person::<span class="built_in">func</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运算符重载</span></span><br><span class="line">    Student &amp;<span class="keyword">operator</span>=(<span class="type">const</span> Student &amp;student) &#123;</span><br><span class="line">        <span class="comment">// 调用父类的方法</span></span><br><span class="line">        Person::<span class="keyword">operator</span>=(student);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认无参构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拷贝构造函数，赋值操作会调用拷贝构造函数</span></span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">const</span> Person &amp;person): <span class="built_in">m_age</span>(person.m_age) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// p1, p2通过无参构造函数构造</span></span><br><span class="line">    Person p1 = <span class="built_in">Person</span>();</span><br><span class="line">    Person p2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// p3, p4通过拷贝构造函数构造</span></span><br><span class="line">    Person p3 = p1;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(p1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非初始化赋值，直接做变量内存拷贝，不会调用构造函数</span></span><br><span class="line">    p2 = p1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="隐式构造"><a href="#隐式构造" class="headerlink" title="隐式构造"></a>隐式构造</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>(<span class="type">int</span> age): <span class="built_in">m_age</span>(age) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Person <span class="title">p1</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式构造，相当于：Person p2 = Person(20)</span></span><br><span class="line">Person p2 = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>可读性差，尽量不用，可以通过关键字<code>explicit</code>禁用隐式构造</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不能通过 Person p2 = 20; 构造</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Person</span><span class="params">(<span class="type">int</span> age)</span>: m_age(age) &#123;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="自动生成构造函数"><a href="#自动生成构造函数" class="headerlink" title="自动生成构造函数"></a>自动生成构造函数</h3><p>在下面情况下，编译器会自动为类生成无参构造函数</p><ul><li>父类存在构造函数，子类没有定义构造函数</li><li>虚继承（需要做虚表指针的初始化）</li><li>有虚函数（需要做虚表指针的初始化）</li><li>类包含了有构造函数的成员，并且没有定义构造函数，则编译器会自动生成构造函数初始化成员</li><li>类的字段在声明的时候进行了初始化</li></ul><h3 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h3><p>相当于直接调用对象，本质是重载<code>()</code>运算符</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sum</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> sum = <span class="built_in">Sum</span>();</span><br><span class="line"><span class="comment">// res = 30</span></span><br><span class="line"><span class="keyword">auto</span> res = <span class="built_in">sum</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="深拷贝-x2F-浅拷贝"><a href="#深拷贝-x2F-浅拷贝" class="headerlink" title="深拷贝&#x2F;浅拷贝"></a>深拷贝&#x2F;浅拷贝</h3><ul><li><p>浅拷贝: 编译器默认提供的拷贝为浅拷贝，将一个对象所有成员变量的值拷贝到另一个对象（指针变量只拷贝地址，不会拷贝指针指向的内存空间），浅拷贝会带来一个问题，就是<code>多次free</code>的问题</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Car</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    Car *car;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Person</span>() &#123;</span><br><span class="line">        car = <span class="keyword">new</span> <span class="built_in">Car</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">Person</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (car != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> car;</span><br><span class="line">            car = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 下面代码会导致Person的析构函数调用了两次</span></span><br><span class="line">        Person p1 = <span class="built_in">Person</span>();</span><br><span class="line">        Person p2 = p1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>深拷贝：需要自定义拷贝构造函数实现，手动将指针类型的变量指向的内容拷贝一份新的</p></li></ul><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>C++的多态通过<code>虚函数</code>来实现</p><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p>需要在父类方法实现virtual函数才能使用多态，否则不是多态（不加<code>virtual</code>，编译器直接根据类型调用对应的函数）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;animal speak&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span>: Animal &#123;</span><br><span class="line">    <span class="comment">// 子类不用声明virtual，默认就是虚函数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;dog speak&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(Animal *ani)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 由于speak是普通函数，编译之后，会直接调用Animal::speak</span></span><br><span class="line">    ani.<span class="built_in">speak</span>();</span><br><span class="line">    <span class="comment">// call [0A3C] ; Animal::speak</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Dog *dog = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line">    <span class="built_in">func</span>(dog);</span><br><span class="line">    <span class="comment">// 输出 animal speak，而我们希望输出 dog speak</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> dog;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>Animal::speak</code>改为<code>virtual</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;animal speak&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 `dog speak`</span></span><br></pre></td></tr></table></figure><ul><li>纯虚函数：没有实现的虚函数，后面用等于0</li><li>抽象类：含有纯虚函数的类，抽象类不能被实例化</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 纯虚函数，等于0是固定写法</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h3><p><code>虚函数</code>的多态特性是通过<code>虚表</code>来实现的，如果一个类对象有虚函数，则会<code>多4或8个字节</code>，32或64位环境不同，并且多出来的内存是放在<code>对象首地址</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;animal speak&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;animal run&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">sizeof</span>(Animal) &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 输出8 (4 + 4）(x86环境)</span></span><br></pre></td></tr></table></figure><p>原理：多出的4&#x2F;8个字节用来存储虚函数表的地址，虚函数表存放着对象的虚函数地址，编译器在运行时通过该表，找到对应的函数地址执行，从而达到多态的目的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Animal *ani = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line"><span class="comment">// speak是虚函数</span></span><br><span class="line">ani.<span class="built_in">speak</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译为汇编</span></span><br><span class="line"><span class="comment">// mov eax, dword ptr [epb-8]       ; [epb-8]是ani指向的地址，即Dog的地址</span></span><br><span class="line"><span class="comment">// mov edx, dword ptr [eax]         ; 取出eax头4个自己的值（即虚表地址），存放到edx</span></span><br><span class="line"><span class="comment">// mov eax, dword ptr [edx]         ; 取出edx的前4个字节（即虚表中的第一个函数地址），存放到eax</span></span><br><span class="line"><span class="comment">// call eax                         ; 调用寄存器eax指向的函数地址</span></span><br><span class="line"></span><br><span class="line">ani.<span class="built_in">run</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转成汇编和speak方法是一样的，在从虚表取函数地址的时候，会加上对应的偏移量</span></span><br><span class="line"><span class="comment">// mov eax, dword ptr [edx+4]         ; 从edx地五个字节开始读（即虚表中的第二个函数地址），存放到eax</span></span><br></pre></td></tr></table></figure><p>从汇编代码可以看出，虚函数的调用过程</p><ol><li>通过对象存放的<code>虚表地址</code>（对象首地址）</li><li>通过虚表地址找到虚表，从虚表中找到对应函数的地址</li><li>调用函数</li></ol><p>同个类所有对象共用一份虚表，不管对象使用什么指针接收，最终都会调用虚表的方法，也就是对象真正的方法</p><p><img src="/images/post/cpp-virtual-method.png" alt="虚方法"></p><p>注意：如果子类没有重写父类的虚函数，父类的虚函数编译的时候也会被放到子类的虚表里面，也就是函数调用在编译的时候就确定了，如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span> : Animal &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">WhiteDog</span>: Dog &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">WhiteDog *dog = <span class="keyword">new</span> <span class="built_in">WhiteDog</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// dog对象的虚表存放了 Dog::run 和 Animal::speak 方法的地址</span></span><br></pre></td></tr></table></figure><p>多态的调用行为在编译后就确定了，而不是运行时动态确定</p><h3 id="多态-析构函数"><a href="#多态-析构函数" class="headerlink" title="多态-析构函数"></a>多态-析构函数</h3><p>由于C++多态使用的虚表实现的，对于多态，析构函数也要使用虚函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 父类的析构函数</span></span><br><span class="line">    ~Animal &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Animal::~Animal&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span>: Animal &#123;</span><br><span class="line">    <span class="comment">// 父类的析构函数</span></span><br><span class="line">    ~Dog &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Dog::~Dog&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animal *ani = <span class="keyword">new</span> <span class="built_in">Dog</span>();</span><br><span class="line"><span class="comment">// 这里值调用Animal的析构函数，不会调用Dog的析构函数</span></span><br><span class="line"><span class="keyword">delete</span> ani;</span><br></pre></td></tr></table></figure><p>需要把Animal的析构函数设置为<code>virtual</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">// 父类的析构函数</span></span><br><span class="line">    <span class="keyword">virtual</span> ~Animal &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Animal::~Animal&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多态继承"><a href="#多态继承" class="headerlink" title="多态继承"></a>多态继承</h3><p>如果要用父类指针指向子类对象，则继承的权限必须是<code>public</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须public继承Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="keyword">public</span> Person &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多态</span></span><br><span class="line">Person *person = <span class="keyword">new</span> <span class="built_in">Student</span>()</span><br></pre></td></tr></table></figure><h3 id="调用父类方法-1"><a href="#调用父类方法-1" class="headerlink" title="调用父类方法"></a>调用父类方法</h3><p>直接通过<code>类名调用</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;animal speak&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span>: Animal &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 直接调用父类的方法</span></span><br><span class="line">        Animal::<span class="built_in">speak</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用父类的成员函数</span></span><br><span class="line">        Animal::<span class="built_in">run</span>();</span><br><span class="line"></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;animal speak&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>C++支持多继承（<code>不建议使用</code>，会增加程序设计的复杂度）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_score;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_salary;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Undergraduate</span>: <span class="keyword">public</span> Student, <span class="keyword">public</span> Worker &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_grade;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Undergraduate ug;</span><br><span class="line">    ug.m_score = <span class="number">10</span>;</span><br><span class="line">    ug.m_salary = <span class="number">20</span>;</span><br><span class="line">    ug.m_grade = <span class="number">30</span>;</span><br><span class="line">    ug.<span class="built_in">study</span>();</span><br><span class="line">    ug.<span class="built_in">work</span>();</span><br><span class="line">    ug.<span class="built_in">play</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存分布</p><img src="/images/post/cpp-memory2.png" class="" width="600"><h3 id="多继承-虚函数"><a href="#多继承-虚函数" class="headerlink" title="多继承-虚函数"></a>多继承-虚函数</h3><p>多继承的多态也是通过虚函数实现的，单继承一样，但是由于又多个父类，多继承会又多个虚表地址</p><p>多继承的子类会产生多张虚表，分别对应不同父类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_score = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;student func&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_salary = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;worker func&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Undergraduate</span> : <span class="keyword">public</span> <span class="keyword">virtual</span> Student, <span class="keyword">public</span> <span class="keyword">virtual</span> Worker &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_grade = <span class="number">3</span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;undergraduate func&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Undergraduate *undergraduate = <span class="keyword">new</span> <span class="built_in">Undergraduate</span>();</span><br><span class="line">    Student *stu = undergraduate;</span><br><span class="line">    cout &lt;&lt; stu-&gt;m_score; &lt;&lt; endl;</span><br><span class="line">    stu-&gt;<span class="built_in">func</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/post/cpp-memory4.png" alt="undergraduate对象内存分布"></p><h3 id="同名函数-x2F-变量问题"><a href="#同名函数-x2F-变量问题" class="headerlink" title="同名函数&#x2F;变量问题"></a>同名函数&#x2F;变量问题</h3><p>对于同名变量，C++默认会当成多个变量来存储</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_age = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_age = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Undergraduate</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_age = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Undergraduate *under = <span class="keyword">new</span> <span class="built_in">Undergraduate</span>();</span><br><span class="line">    <span class="comment">// 默认访问 Undergraduate::m_age == 3</span></span><br><span class="line">    cout &lt;&lt; under-&gt;m_age &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 多态，这里不支持，需要通过虚继承实现</span></span><br><span class="line">    Student* stu = under;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问的是Student::m_age == 1</span></span><br><span class="line">    cout &lt;&lt; stu-&gt;m_age &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存分布</p><img src="/images/post/cpp-memory7.png" class="" width="600" title="菱形继承"><h3 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h3><p>由于C++支持多继承，所以会出现菱形继承这种情况，我们知道子类会继承父类的所有成员变量（包括同名的）</p><img src="/images/post/inherit2.png" class="" width="500" title="菱形继承"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_age = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="keyword">public</span> Person &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_score = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>: <span class="keyword">public</span> Person &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_salary = <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Undergraduate</span> : <span class="keyword">public</span> Student, <span class="keyword">public</span> Worker &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_grade = <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Undergraduate *under = <span class="keyword">new</span> <span class="built_in">Undergraduate</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不能直接引用，存在二义性，下面代码报错</span></span><br><span class="line">    under-&gt;m_age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以通过指定类类访问</span></span><br><span class="line">    under-&gt;Student::m_age = <span class="number">11</span>;</span><br><span class="line">    under-&gt;Worker::m_age = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Undergraduate</code>的内存分布</p><img src="/images/post/cpp-memory5.png" class="" width="550"><h3 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h3><p>上面<code>Undergraduate</code>会继承两份Person的成员m_age，为了避免这种情况（通常我们希望只继承一份成员变量），C++使用<code>虚继承</code>解决</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_age = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚继承基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> Person &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_score = <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 虚继承基类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Worker</span>: <span class="keyword">virtual</span> <span class="keyword">public</span> Person &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_salary = <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Undergraduate</span> : <span class="keyword">public</span> Student, <span class="keyword">public</span> Worker &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m_grade = <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Undergraduate *under = <span class="keyword">new</span> <span class="built_in">Undergraduate</span>();</span><br><span class="line"></span><br><span class="line">    under-&gt;m_age = <span class="number">10</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">sizeof</span>(Undergraduate) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内存分布</p><img src="/images/post/cpp-memory6.png" class="" width="850"><p>可以看到出多了两个虚表，用于声明基类字段m_age的偏移量，<code>m_age</code>只有一份</p><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><ul><li><p>静态成员存储在数据段（全局区）整个程序运行过程中只有一份内存</p></li><li><p>C++的静态成员必须初始化，并且必须在类外面初始化</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 声明</span></span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> m_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="type">int</span> Student::m_count = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p><code>友元方法</code>：可以在类外部的方法访问类的所有成员（字段和方法）<br><code>友元类</code>：可以在其他类访问类的所有成员（字段和方法）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="comment">// 声明友元方法</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> Point <span class="title">add</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明友元类</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> <span class="title class_">Math</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_x;</span><br><span class="line">    <span class="type">int</span> m_y;</span><br><span class="line">    <span class="comment">// 私有方法</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">m_x</span>(x), <span class="built_in">m_y</span>(y) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">add</span><span class="params">(<span class="type">const</span> Point &amp;a, <span class="type">const</span> Point &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在这里可以直接访问Point的私有变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(a.m_x + b.m_x, a.m_y + b.m_y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Math</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Point p = <span class="built_in">Point</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 可以访问类的私有成员</span></span><br><span class="line">        p.m_x = <span class="number">10</span>;</span><br><span class="line">        p.m_y = <span class="number">20</span>;</span><br><span class="line">        <span class="comment">// 访问私有方法</span></span><br><span class="line">        p.<span class="built_in">func</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="/2020-04-16/cpp-learn-3/">下一篇</a>主要是C++的新特性</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学C++学习笔记（一）</title>
      <link href="/2020-04-06/cpp-learn-1/"/>
      <url>/2020-04-06/cpp-learn-1/</url>
      
        <content type="html"><![CDATA[<p>越深入底层，C&#x2F;C++的作用就越大，对于底层的了解比别人更具体，工作中由于不是主要语言，用的少，近来有空，重新完整的过了一遍C++的语法和一些内存知识，在这里做一下笔记</p><span id="more"></span><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li><p><code>int</code> &#x2F; <code>short</code> &#x2F; <code>long</code>, &#x2F; <code>long long</code>：默认都为<code>signed</code>，也可以加<code>unsigned</code>变为无符号数</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">uint a = <span class="number">10u</span>;</span><br><span class="line"><span class="type">long</span> a = <span class="number">10l</span>;</span><br></pre></td></tr></table></figure></li><li><p><code>float</code> &#x2F; <code>double</code>, <code>long double</code>：默认都为<code>signed</code>，也可以加<code>unsigned</code>变为无符号数</p></li><li><p><code>bool</code>：本质是1和0</p></li><li><p><code>char</code>(1个字节) &#x2F; <code>wchar_t</code>(2个字节)</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> a = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">wchar_t</span> a = L`a`;</span><br></pre></td></tr></table></figure></li></ul><h3 id="进制表示"><a href="#进制表示" class="headerlink" title="进制表示"></a>进制表示</h3><ul><li>十进制：<code>int a = 10;</code></li><li>十六进制：<code>int a = 0xF2;</code></li><li>八进制: <code>int a = 070;</code>（以0开头）</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li>算数运算符: <code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,<code>++</code>,<code>--</code></li><li>关系运算符: <code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li><li>逻辑运算符: <code>&amp;&amp;</code>, <code>||</code>, <code>!</code></li><li>位运算符: <code>&amp;</code>, <code>|</code>, <code>~</code>（取反） <code>^</code>（异或）, <code>&lt;&lt;</code>, <code>&gt;&gt;</code></li><li>赋值运算符: <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></li><li>其他运算符:<ul><li>获取变量大小：<code>sizeof</code>（不是运算符，为编译器特性）</li><li>三元运算符：<code>? :</code></li><li>取址运算符: <code>&amp;</code></li><li>取值运算符: <code>*</code></li></ul></li></ul><p>运算符重载</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="comment">// 友元函数，为了访问私有变量</span></span><br><span class="line">    <span class="type">const</span> Point <span class="keyword">operator</span>-(<span class="type">const</span> Point a, <span class="type">const</span> Point b);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span> m_x;</span><br><span class="line">    <span class="type">int</span> m_y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Point</span>(<span class="type">int</span> x, <span class="type">int</span> y): <span class="built_in">m_x</span>(x), <span class="built_in">m_y</span>(y) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加号运算符</span></span><br><span class="line">    cosnt Point <span class="keyword">operator</span>+(<span class="type">const</span> Point &amp;point) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(m_x + point.m_x, m_y + point.m_y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回引用，用于支持（a += b） = 1</span></span><br><span class="line">    Point &amp;<span class="keyword">operator</span>+=(<span class="type">const</span> Point &amp;point) &#123;</span><br><span class="line">        m_x += point.m_x;</span><br><span class="line">        m_y += point.m_y;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单目运算: Point p2 = -p1;</span></span><br><span class="line">    <span class="type">const</span> Point <span class="keyword">operator</span>-() <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Point</span>(-m_x, -m_y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前置运算符: Point p2 = ++p1;</span></span><br><span class="line">    Point &amp;<span class="keyword">operator</span>++() &#123;</span><br><span class="line">        m_x += <span class="number">1</span>;</span><br><span class="line">        m_y += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后置运算符: Point p2 = ++p1;</span></span><br><span class="line">    <span class="type">const</span> Point <span class="keyword">operator</span>++(<span class="type">int</span>) &#123;</span><br><span class="line">        <span class="function">Point <span class="title">temp</span><span class="params">(m_x, m_y)</span></span>;</span><br><span class="line">        m_x += <span class="number">1</span>;</span><br><span class="line">        m_y += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义在外面</span></span><br><span class="line"><span class="type">const</span> Point <span class="keyword">operator</span>-(<span class="type">const</span> Point a, <span class="type">const</span> Point b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Point</span>(a.m_x - b.m_x, a.m_y + b.m_y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p1 = <span class="built_in">Point</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">auto</span> p2 = <span class="built_in">Point</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// p3 = Point(4, 6);</span></span><br><span class="line">    <span class="keyword">auto</span> p3 = p1 + p2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// p4 = Point(2, 2);</span></span><br><span class="line">    <span class="keyword">auto</span> p4 = p2 - p1;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>+</code>运算符</p><ul><li>第一个const：用于限制不能当成左值<code>(p1 + p2) = Point(1, 2)</code></li><li>第二个const：用于让参数接受const和非const变量</li><li>第三个const：用于声明为const函数，让返回值const支持二次操作<code>p1 + p2 + p3</code></li></ul><p><code>+=</code>运算符</p><ul><li>返回引用，用于支持<code>(a += b) = 1</code></li></ul><h3 id="关于位运算"><a href="#关于位运算" class="headerlink" title="关于位运算"></a>关于位运算</h3><ul><li>左移：移走位补0</li><li>右移：<ul><li><code>逻辑右移</code>：移走位补0</li><li><code>算数右移</code>：对于有符号数，正数移走位补0，负数移走位补1</li></ul></li></ul><blockquote><p>具体使用逻辑右移还是算数右移，取决于编译器，所以，<code>尽量不要使用右移运算符</code></p></blockquote><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul><li><p><code>if-else</code></p></li><li><p><code>switch-case</code></p></li><li><p><code>do-while</code></p></li><li><p><code>for</code>: C++11支持下面集合遍历</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> items[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> item: items) &#123;</span><br><span class="line">    cout &lt;&lt; item &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="头文件重复引用"><a href="#头文件重复引用" class="headerlink" title="头文件重复引用"></a>头文件重复引用</h3><ol><li><p>使用<code>#define</code>宏防止重复导入</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __HEADER_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HEADER_H</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></li><li><p>在文件头使用<code>#pragma once</code>也可以防止重复导入（旧的编译器可能不支持），通常放在文件头</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>C++的注释与C语言一样</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">    多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p>不支持嵌套注释</p></blockquote><h3 id="auto自动类型"><a href="#auto自动类型" class="headerlink" title="auto自动类型"></a>auto自动类型</h3><p>在<code>C++11</code>添加了<code>auto</code>用于自动推断类型，为编译器特性，免去长长的类型声明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译器会自动推断出i的类型，下面语句等价</span></span><br><span class="line"><span class="keyword">auto</span> i = <span class="built_in">unique_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">unique_ptr&lt;<span class="type">int</span>&gt; i = <span class="built_in">unique_ptr</span>&lt;<span class="type">int</span>&gt;(<span class="keyword">new</span> <span class="built_in">int</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p1不是常量，*p1是常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p1 = &amp;age;</span><br><span class="line"><span class="comment">// 与p1一样</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> *p2 = &amp;age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p3是常量，*p3不是常量</span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p3 = &amp;age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// p4是常量，*p4是常量</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> * <span class="type">const</span> p4 = &amp;age;</span><br><span class="line"><span class="comment">// 与p4一样</span></span><br><span class="line"><span class="type">int</span> <span class="type">const</span> * <span class="type">const</span> p5 = &amp;age;</span><br></pre></td></tr></table></figure><blockquote><p>const修饰的是右边的内容<br>const还能用于修饰函数参数，让引用参数接受常量参数，见后面</p></blockquote><h3 id="头文件和实现文件分离"><a href="#头文件和实现文件分离" class="headerlink" title="头文件和实现文件分离"></a>头文件和实现文件分离</h3><p>头文件person.h</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> m_age;</span><br><span class="line">public:</span><br><span class="line">    <span class="type">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>;</span><br><span class="line">    Person();</span><br><span class="line">    ~Person();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现文件person.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Person.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Person::setAge</span><span class="params">(<span class="type">int</span> age)</span> </span>&#123;</span><br><span class="line">    m_age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Person::getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_age;</span><br><span class="line">&#125;</span><br><span class="line">Person::<span class="built_in">Person</span>() &#123;</span><br><span class="line">    m_age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person::~<span class="built_in">Person</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> BM &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">        <span class="type">int</span> m_age;</span><br><span class="line">        <span class="type">int</span> m_height;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 命名空间支持嵌套</span></span><br><span class="line">    <span class="keyword">namespace</span> SS &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局命名空间</span></span><br><span class="line"><span class="comment">// 可以通过`::func`访问</span></span><br><span class="line"><span class="comment">// 默认情况下不用加`::`</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BM::Person person = <span class="keyword">new</span> BM::<span class="built_in">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只用命名空间的部分成员</span></span><br><span class="line"><span class="keyword">using</span> BM::Person;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用using之后不用加前缀</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> BM;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问命名空间里面的方法</span></span><br><span class="line">BM::<span class="built_in">func</span>()</span><br><span class="line"><span class="comment">// 访问全局命名空间</span></span><br><span class="line">::<span class="built_in">func</span>()</span><br></pre></td></tr></table></figure><ul><li>命名空间不影响内存布局</li><li>命名空间可以在代码块使用</li><li>命名空间可以合并</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> BM &#123;</span><br><span class="line">    <span class="type">int</span> g_age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> BM &#123;</span><br><span class="line">    <span class="type">int</span> g_height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面与下面等价</span></span><br><span class="line"><span class="keyword">namespace</span> BM &#123;</span><br><span class="line">    <span class="type">int</span> g_age;</span><br><span class="line">    <span class="type">int</span> g_height;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引用（Reference）"><a href="#引用（Reference）" class="headerlink" title="引用（Reference）"></a>引用（Reference）</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量</span></span><br><span class="line"><span class="type">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用变量，相当于age的别名，定义的时候就要赋值</span></span><br><span class="line"><span class="type">int</span> &amp;rage = age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于：age = 20</span></span><br><span class="line">rage = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> height = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rage赋值后不能修改，下面相当于rage = 20，rage还是引用age</span></span><br><span class="line">rage = height</span><br></pre></td></tr></table></figure><p>交换两个数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a为20，b为10</span></span><br></pre></td></tr></table></figure><ul><li>引用不可以修改指向，指针可以</li></ul><p>本质：<strong>引用本质就是指针</strong>，只是从编译层面削弱了功能，增强了安全性，下面代码生成最终机器码是一样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针</span></span><br><span class="line"><span class="type">int</span> *p = &amp;age;</span><br><span class="line">*p = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用</span></span><br><span class="line"><span class="type">int</span> &amp;ref = age;</span><br><span class="line">ref = <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>数组的引用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> array[] = &#123;<span class="number">1</span>， <span class="number">2</span>， <span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要指定数组大小</span></span><br><span class="line"><span class="built_in">int</span> (&amp;ref)[<span class="number">3</span>] = array;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用指针接受引用</span></span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> &amp;ref = array;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用auto</span></span><br><span class="line"><span class="keyword">auto</span> &amp;ref = array;</span><br></pre></td></tr></table></figure><h3 id="常引用-const-reference"><a href="#常引用-const-reference" class="headerlink" title="常引用(const reference)"></a>常引用(const reference)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法修改引用的值，报错</span></span><br><span class="line">b = <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>常引用作为函数参数时</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用const修饰参数，可以接受常量和变量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> p = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> q = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以接受变量</span></span><br><span class="line"><span class="built_in">sum</span>(p, q);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以接受常量</span></span><br><span class="line"><span class="built_in">sum</span>(p, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>变量三个重要信息</p><ul><li>变量的<code>内容</code></li><li>变量存放的<code>地址</code></li><li>变量的<code>类型</code></li></ul><p>指针变量：专门用来记录变量地址的变量，通过指针变量可以间接访问另一个变量的值</p><p>未初始化和非法的指针</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a未初始化</span></span><br><span class="line"><span class="type">int</span> *a;</span><br><span class="line"><span class="comment">// 直接修改a指向的值，会出现不可预测的问题</span></span><br><span class="line">*a = <span class="number">12</span>;</span><br></pre></td></tr></table></figure><p><code>NULL指针</code>：不指向任何东西，表示一种状态，指针变量不用时，或未初始化时，应置位<code>NULL</code>，在C++11之后，空指针使用<code>nullptr</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *a = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">    *a = <span class="number">12</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>野指针</code>：指向垃圾（程序逻辑上用不到的指针）内存的指针，通常是被回收资源后未置空的指针，不再使用的指针变量应置为<code>nullptr</code>值</p><p>指针的基本操作：</p><ul><li><code>&amp;</code>运算符: 取变量地址</li><li><code>*</code>运算符：去指针指向地址的值</li></ul><p>指针编译成汇编</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// mov dword ptr [ebp-0Ch], 10         ; a的地址为[ebp-0Ch], a = 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *p = &amp;a;</span><br><span class="line"><span class="comment">// lea eax, [epb-0Ch]               ; 取a的地址赋值到eax</span></span><br><span class="line"><span class="comment">// mov dword ptr [ebp-18h], eax     ; p的地址为[epb-18h]，把a的地址赋值给指针p，int *p = &amp;a;</span></span><br><span class="line"></span><br><span class="line">*p = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// mov eax, dword ptr [ebp-18h]     ; eax = &amp;a;</span></span><br><span class="line"><span class="comment">// mov dword ptr [eax], 20          ; 取出eax指向的地址，复制20，相当于 age = 20;</span></span><br></pre></td></tr></table></figure><p>指针变量原理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Person person;</span><br><span class="line">person.age = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// mov dword ptr [ebp-14h], 0Ah</span></span><br><span class="line">person.height = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// mov dword ptr [ebp-10h], 14h</span></span><br><span class="line"></span><br><span class="line">Person *p = &amp;person;</span><br><span class="line"><span class="comment">// lea eax, [ebp-14h]               ; 将person的地址赋值给寄存器eax</span></span><br><span class="line"><span class="comment">// mov dword ptr [epb-20h], eax     ; 将寄存器eax的地址赋值给变量p(epb-20h)</span></span><br><span class="line"></span><br><span class="line">p-&gt;age = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// mov eax, dword ptr [epb-20h]     ; 将变量p存放的地址赋值给eax，eax = &amp;person</span></span><br><span class="line"><span class="comment">// mov dword ptr [eax], 0Ah         ; 将eax指向对象赋值10</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看出，通过指针针变量访问成员变量生成2条语句，一条取地址的值，第二条才是根据变量的偏移量取变量值，而普通变量访问成员变量会生成1条语句</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Person person;</span><br><span class="line">person.m_id = <span class="number">10</span>;</span><br><span class="line">person.m_age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里取的是 m_age</span></span><br><span class="line">Person *p = (Person *)&amp;person.m_age;</span><br><span class="line">p-&gt;m_id = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; person.m_id &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; person.m_age &lt;&lt; endl;</span><br><span class="line"><span class="comment">// 输出: 10, 30</span></span><br></pre></td></tr></table></figure><blockquote><p>汇编很多时候（对于栈空间）是通过<code>偏移量</code>来操作对象和字段的</p></blockquote><h3 id="内存空间管理"><a href="#内存空间管理" class="headerlink" title="内存空间管理"></a>内存空间管理</h3><ul><li><code>malloc</code> &#x2F; <code>free</code>：C语言的方式</li><li><code>new</code> &#x2F; <code>delete</code>：C++的方式，推荐</li><li><code>new[]</code> &#x2F; <code>delete[]</code>：数组空间</li></ul><blockquote><p><code>数组释放</code>的时候和变量不一样，需要加中括号</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言申请空间</span></span><br><span class="line"><span class="type">int</span> *p1 = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">*p1 = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++申请空间</span></span><br><span class="line"><span class="type">int</span> *p2 = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">*p2 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">delete</span> p2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是数组，delete也要加中括号</span></span><br><span class="line"><span class="type">char</span> *p3 = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">delete</span> [] p3;</span><br></pre></td></tr></table></figure><p>通常情况下申请的内存空间不会进行初始化（不同平台可能不一样）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *p1 = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">p1 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> size = <span class="built_in">sizeof</span>(<span class="type">int</span>) * <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> *p2 = (<span class="type">int</span> *)<span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="comment">// 初始化，把所有空间清零</span></span><br><span class="line"><span class="built_in">memset</span>(p2, <span class="number">0</span>, size);</span><br></pre></td></tr></table></figure><p>如果是对象，<code>new</code>创建的对象会调用构造函数，而<code>malloc</code>不会，在C++中，推荐使用<code>new</code>在堆申请空间</p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>C语言的类型转换</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">long</span> b = (<span class="type">int</span>)a;</span><br><span class="line"><span class="type">double</span> c = <span class="built_in">double</span>(a)</span><br></pre></td></tr></table></figure><p>C++有四中类型转换符</p><ul><li><p><code>static_cast</code>: 通常基本数据类型转换，用于非const变量转换成const变量，由于C++有隐式转换，通常不用写</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两句等价</span></span><br><span class="line"><span class="type">double</span> b = <span class="built_in">static_cast</span>&lt;<span class="type">double</span>&gt;(a);</span><br><span class="line"><span class="type">double</span> b = a;</span><br><span class="line"></span><br><span class="line">Person *p1 = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两句等价，C++默认会做隐式转换</span></span><br><span class="line"><span class="type">const</span> Person *p2 = <span class="built_in">static_cast</span>&lt;<span class="type">const</span> Person *&gt;(p1);</span><br><span class="line"><span class="type">const</span> Person *p2 = p1;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>dynamic_cast</code>: 用于多态类型转换，如果不能转换，则返回<code>nullptr</code></p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Person *p1 = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line">Person *p2 = <span class="keyword">new</span> <span class="built_in">Student</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类不能赋值给子类，报错</span></span><br><span class="line">Student *stu1 = p1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dynamic_cast会做运行时安全检查，类型不匹配时，会返回NULL</span></span><br><span class="line">Student *stu2 = <span class="built_in">dynamic_cast</span>&lt;Student *&gt;(p1);</span><br><span class="line">Student *stu3 = <span class="built_in">dynamic_cast</span>&lt;Student *&gt;(p2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 汇编：会调用一个函数进行</span></span><br><span class="line"><span class="comment">// call __RTDynamicCast(0C14ABh)        ; 调用方法判断类型，返回值放到eax，可能为NULl，可能为对象的值</span></span><br><span class="line"><span class="comment">// add esp, 14h</span></span><br><span class="line"><span class="comment">// mov dword ptr [stu1], eax</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// stu2 = NULLL</span></span><br><span class="line"><span class="comment">// stu3 = p2</span></span><br></pre></td></tr></table></figure></li><li><p><code>const_cast</code>: 将const常量转换成非常量，有安全风险</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> Person *p1 = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line"><span class="comment">// 无法直接转换，报错</span></span><br><span class="line">Person *p2 = p1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面两种转换等价</span></span><br><span class="line">Person *p2 = <span class="keyword">const_cast</span>&lt;Person *&gt;p1;</span><br><span class="line">Person *p3 = (Person *)p1;</span><br></pre></td></tr></table></figure></li><li><p><code>reinterpret_cast</code>: 纯二进制拷贝，没有类型检查</p>  <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 0A 00 00 00</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span> b = a;</span><br><span class="line"><span class="comment">// 00 00 00 00 00 00 24 40</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于double类型和int的表示10不一样，所以下面b != 10;</span></span><br><span class="line"><span class="type">double</span> c = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">double</span>&amp;&gt;(a);</span><br><span class="line"><span class="comment">// 0A 00 00 00 CC CC CC CC</span></span><br><span class="line"><span class="comment">// -9.25596e+61</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="多余对象拷贝"><a href="#多余对象拷贝" class="headerlink" title="多余对象拷贝"></a>多余对象拷贝</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Point <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 调用Point默认构造函数</span></span><br><span class="line">    Point p;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 2. 从func函数栈拷贝Point到main函数栈</span></span><br><span class="line">    <span class="comment">// 3. 调用Point拷贝构造函数</span></span><br><span class="line">    Point p = <span class="built_in">func</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码如果编译器不做优化的话，会调用<code>3</code>次Point的构造函数</p><ol><li>在func函数栈构造Point</li><li>从func函数栈返回到main函数栈，会把返回值，通过拷贝构造函数拷贝到main函数栈</li><li>main函数中，返回值赋值给p，会调用Point的拷贝构造函数</li></ol><blockquote><p>编译器在编译的时候会做返回值优化(RVO)，不会造成多次拷贝，可以通过<code>-fno-elide-constructors</code>关闭该优化</p></blockquote><h3 id="C-程序内存分布"><a href="#C-程序内存分布" class="headerlink" title="C++程序内存分布"></a>C++程序内存分布</h3><p><img src="/images/post/virtual-address.png" alt=" "></p><ul><li>栈</li><li>堆</li><li>全局区&#x2F;静态区: 可读写</li><li>常量区: 只读</li><li>代码段: 只读</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><p>指函数名相同的函数，<code>函数参数类型不同</code>或<code>函数参数顺序不同</code>或<code>函数参数个数不同</code>，构成函数重载，<strong>函数重载与返回值类型无关</strong>（C语言不支持函数重载）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面函数都构成重载</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">long</span> a, <span class="type">long</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">long</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">long</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const引用(指针)与非const引用(指针)构成重载，下面两个函数是不同函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;a, <span class="type">const</span> <span class="type">int</span> &amp;b)</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>本质：C++使用了<code>name mangling</code>或<code>name decoration</code>的技术，C++编译器在编译的时候会对函数名进行改编，修饰，<strong>不同的编译器修饰的规则可能不同</strong>，例如上面sum函数在<code>VC++</code>会编译下面方法名</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum0, sum1, sum2, sum3, sum4, sum5, sum6</span><br></pre></td></tr></table></figure><h4 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h4><p>C++支持默认参数，如果有声明和实现，默认参数必须放在声明上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a = <span class="number">1</span>, <span class="type">int</span> b = <span class="number">2</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认参数可以是常亮，全局符号</p><blockquote><p>本质：编译器在编译阶段根据默认参数补完传参，也就是<code>sum(1)</code>和<code>sum(1, 2)</code>编译后的汇编代码是一样的</p></blockquote><h4 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h4><p>使用<code>extern &quot;C&quot;</code>修饰的代码会按照C语言的方式编译</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// func会被编译为C语言的方法</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="comment">// C语言代码</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果函数声明和实现分开，声明需要加<code>extern &quot;C&quot;</code>，实现不加<br>由于C++的函数有<code>name mangling</code>，<code>extern &quot;C&quot;</code>通常在C语言和C++混编的时候用到<br>C语言不支持<code>extern &quot;C&quot;</code>，可以使用<code>__cplusplus</code>加判断</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言不支持extern符号</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="comment">// 引用C头文件</span></span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&quot;header.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">delta</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="内联函数-inline"><a href="#内联函数-inline" class="headerlink" title="内联函数(inline)"></a>内联函数(inline)</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; <span class="keyword">return</span> a + b; &#125;</span><br></pre></td></tr></table></figure><p>函数展开，类似于define的效果，省去函数调用开辟栈空间的操作</p><ul><li>函数代码体积小（小于10行）</li><li>函数频繁使用</li></ul><blockquote><p>递归函数不会被编译为内联函数，即使声明了</p></blockquote><h2 id="其他知识点"><a href="#其他知识点" class="headerlink" title="其他知识点"></a>其他知识点</h2><h3 id="关于补码"><a href="#关于补码" class="headerlink" title="关于补码"></a>关于补码</h3><p>对于有符号数的正负3</p><p>十进制<code>+3</code>:  <code>00000000 00000000 00000000 00000011</code><br>十进制<code>-3</code>:  <code>10000000 00000000 00000000 00000011</code></p><p>上面的表示并不方便计算（两个数想加），实际上，计算机使用<code>补码</code>的方式表示<code>有符号数</code>，在计算上有很大的优势</p><p>十进制<code>+3</code>: <code>00000000 00000000 00000000 00000011</code><br>十进制<code>-3</code>: <code>11111111 11111111 11111111 11111101</code></p><blockquote><p>使用补码是为了：用加法计算减法，性能更优，CPU不用单独再实现一个减法运算器</p></blockquote><h3 id="字节序（Byte-Ordering）"><a href="#字节序（Byte-Ordering）" class="headerlink" title="字节序（Byte Ordering）"></a>字节序（Byte Ordering）</h3><ul><li>大端法（Big Endian）: 高位字节在前，低位字节在后，这是人类读写数值的方法</li><li>小端法（Little Endian）: 低位字节在前，高位字节在后</li></ul><img src="/images/post/byte-ordering.png" class="" width="500"><p>为什么会有小端字节序？</p><p>答案是，计算机电路先处理低位字节，效率比较高，因为计算都是从低位开始的。所以，计算机的内部处理都是小端字节序</p><p>为什么会有大端字节序？</p><p>人类习惯读写是大端字节序（从左到右）。所以，除了计算机的内部处理，其他的场合几乎都是大端字节序，比如网络传输和文件储存。</p><blockquote><p>引用：<a href="https://www.cnblogs.com/gremount/p/8830707.html">https://www.cnblogs.com/gremount/p/8830707.html</a></p></blockquote><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">double</span> b;</span><br><span class="line">    <span class="type">short</span> c;</span><br><span class="line">&#125; A;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">short</span> b;</span><br><span class="line">    <span class="type">double</span> c;</span><br><span class="line">&#125; B;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sizeof</span>(A);          <span class="comment">// 24</span></span><br><span class="line"><span class="built_in">sizeof</span>(B);          <span class="comment">// 26</span></span><br></pre></td></tr></table></figure><ul><li>C++的结构体是按变量的定义顺序进行存储的，也就是 <code>a -&gt; b -&gt; c</code></li><li>CPU从内存中读取数据时，有一个最小读取单位，例如64位的CPU，从内存的0地址开始，0-63bit的数据可以一次IO读取出来，64-127bit的数据也可以一次读取出来，每个次读取的单位是64，CPU和内存IO的硬件限制导致没办法一次跨在两个数据宽度中间进行IO，为了提高CPU读取效率，减少IO次数，编译器在编译代码的时候，会考虑到内存对齐的情况，例如上面结构体A会被编译为24个字节</li></ul><p><img src="/images/post/struct_align_size.png" alt=" "></p><p>如果结构体A不进行内存对齐的话，变量b与变量a靠在一起，就会导致，读取在变量b的时候，需要两次IO</p><h3 id="命名法"><a href="#命名法" class="headerlink" title="命名法"></a>命名法</h3><ul><li>匈牙利命名法：<code>int iMyValue</code>，第一个小写字母表示类型</li><li>Cammel命名法：<code>int myAge</code></li><li>Pascal命名法：<code>int MyAge</code></li></ul><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>Unicode: 表示所有语言</p><ul><li>ASCII: 1byte表示一个字符，存储效率高，存储的字符有限</li><li>UTF-8：1byte表示一个字符，可以兼容ASCII码，存储效率高，可变长（随机访问效率低），无字节序的问题（可作为外部编码），如网络传输普遍使用</li><li>UTF-16：2byte表示一个字符，定长（随机访问效率高），有字节序的问题（不可作为外部编码），但不能表达所有的字符</li><li>UTF-32：4byte表示一个字符，定长（随机访问效率高），有字节序的问题（不可作为外部编码），可以表达目前已存在的所有的字符</li></ul><p><a href="/2020-04-11/cpp-learn-2/">下一篇</a>主要是面向对象相关的知识点</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS二进制重排对缺页和启动时间的优化实践</title>
      <link href="/2020-03-30/ios-symbol-order-build/"/>
      <url>/2020-03-30/ios-symbol-order-build/</url>
      
        <content type="html"><![CDATA[<p>抖音团队去年针对系统虚拟内存缺页的情况，基于二进制重排的方案，给App启动速度提升了15%，各路大神也随后分享了几篇优质的二进制重排的文章，这里基于自己的项目做一下实践</p><span id="more"></span><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ol><li>进程运行时使用的内存是操作系统提供的<code>虚拟内存</code>，而不是直接操作物理内存</li><li>从<code>虚拟内存</code>到<code>物理内存</code>有一个映射表(页表)</li><li>进程的内存会进行<code>分页</code>管理，以页为单位</li><li>程序启动的时候，<strong>并不会把所有内存都加载到物理内存中</strong>，而是用到的时候才加载，没有用到的内存，可能并没有加载到物理内存中</li><li>当程序访问到的内存地址（虚拟内存），如果还没有加载到物理内存时，就会触发<code>Page Fault</code>，（对应<code>System Trace</code>的<code>File Backed Page In</code>），然后操作系统把数据加载到物理内存中，如果已经已经加载到物理内存了，则会触发<code>Page Cache Hit</code>，后者是比较快的，这也是热启动比冷启动快的原因之一</li></ol><blockquote><ol><li>基于上面原理. 我们的目标就是在启动的时候增加<code>Page Cache Hit</code>，减少<code>Page Fault</code>，从而达到优化启动时间的目的</li><li>我们需要确定，在启动的时候，执行了哪些符号，尽可能让这些符号的内存集中在一起，减少占用的页数，就能减少<code>Page Fault</code>的命中次数</li></ol></blockquote><h2 id="测试Page-Fault"><a href="#测试Page-Fault" class="headerlink" title="测试Page Fault"></a>测试Page Fault</h2><p>通过<code>Instrument / System Trace</code>工具，可以查看我们的App，在启动过程中的<code>Page Fault</code>数量(File Breaked Page In)</p><p><img src="/images/post/systemtrace-app-page-fault1.png" alt="system trace page fault"></p><blockquote><p>如果App比较大，<code>Analizing</code>的过程会比较久，需要耐心等待</p></blockquote><p>这里有个注意点，为了<strong>确保App是真正的冷启动</strong>，需要把内存清干净，不然结果会不太准，下图是我直接杀掉App，重新打开得到的结果</p><p><img src="/images/post/systemtrace-app-page-fault3.png" alt="_"></p><p>可以看到，和第一次测试差的有点多，<strong>我们可以在杀掉App后，重新打开多个其他的App（尽可能多），把原来的内存都覆盖掉，这样在重新打开App的时候，就会重新加载物理内存</strong></p><h2 id="确定代码执行顺序"><a href="#确定代码执行顺序" class="headerlink" title="确定代码执行顺序"></a>确定代码执行顺序</h2><p>接下来需要确定App在启动的时候，调用了哪些函数（使用了哪些符号），这里我们使用<a href="http://yulingtianxia.com/">杨萧玉</a>写的一个工具<a href="https://github.com/yulingtianxia/AppOrderFiles">AppOrderFiles</a>，使用<code>Clang SanitizerCoverage</code>，通过编译器插装的方式，获取到调用函数的符号顺序</p><p>通过pod引入</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">&#x27;AppOrderFiles&#x27;</span></span><br></pre></td></tr></table></figure><p>并且添加编译宏<code>OTHER_CFLAGS</code>和<code>OTHER_SWIFT_FLAGS</code>（只在Debug生效即可）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">post_install <span class="keyword">do</span> |<span class="params">installer</span>|</span><br><span class="line">  installer.pods_project.targets.each <span class="keyword">do</span> |<span class="params">target</span>|</span><br><span class="line">    target.build_configurations.each <span class="keyword">do</span> |<span class="params">config</span>|</span><br><span class="line">      <span class="keyword">case</span> config.name</span><br><span class="line">        <span class="keyword">when</span> <span class="string">&quot;Debug&quot;</span></span><br><span class="line">        config.build_settings[<span class="string">&#x27;OTHER_CFLAGS&#x27;</span>] = <span class="string">&#x27;-fsanitize-coverage=func,trace-pc-guard&#x27;</span></span><br><span class="line">        config.build_settings[<span class="string">&#x27;OTHER_SWIFT_FLAGS&#x27;</span>] = <span class="string">&#x27;-sanitize-coverage=func -sanitize=undefined&#x27;</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>在App启动后，到第一个页面（HomePage）的viewDidLoad方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> AppOrderFiles</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">viewDidLoad</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line"></span><br><span class="line">    <span class="operator">...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">#if</span> <span class="type">DEBUG</span></span><br><span class="line">    <span class="comment">// 延迟一下，让运行实践长一点，避免进入后因为PageFault造成卡顿</span></span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: <span class="type">DispatchTime</span>.now() <span class="operator">+</span> <span class="number">0.5</span>, execute: &#123;</span><br><span class="line">        <span class="type">AppOrderFiles</span> &#123; (filePath) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> p <span class="operator">=</span> filePath &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;output order file <span class="subst">\(p)</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">#endif</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的文件在App沙盒，用模拟器运行更方便，得到文件<code>app.order</code>，这里面就是排好序的符号列表，根据App的执行顺序，如果项目比较大的话，会比较久</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">___swift_instantiateConcreteTypeFromMangledName</span><br><span class="line">_main</span><br><span class="line">_$s3jcm11AppDelegateCMa</span><br><span class="line">_$s3jcm11AppDelegateCACycfcTo</span><br><span class="line">_$s3jcm11AppDelegateCACycfc</span><br><span class="line">_$s3jcm11AppDelegateC11application_29didFinishLaunchingWithOptionsSbSo13UIApplicationC_SDySo0j6LaunchI3KeyaypGSgtFTo</span><br><span class="line">_$s3jcm11AppDelegateC11application_29didFinishLaunchingWithOptionsSbSo13UIApplicationC_SDySo0j6LaunchI3KeyaypGSgtF</span><br><span class="line">_$s3jcm11AppDelegateC5setup13launchOptionsySDySo019UIApplicationLaunchF3KeyaypGSg_tF</span><br><span class="line">_$s3jcm5ConstV11wechatAppIdSSvau</span><br><span class="line">_globalinit_33_27D199AC10BAAE2783814C508183B809_func13</span><br><span class="line">_$s3jcm5ConstV19wechatUniversalLinkSSvau</span><br><span class="line">_globalinit_33_27D199AC10BAAE2783814C508183B809_func15</span><br><span class="line">_$sSo12BaiduMobStatCMa</span><br><span class="line">_$sSo12BaiduMobStatCs5Error_pIggzo_ABsAC_pIegnzo_TRTA</span><br><span class="line">_$sSo12BaiduMobStatCs5Error_pIggzo_ABsAC_pIegnzo_TR</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>把<code>app.order</code>放到工程目录，配置到Xcode里面<code>Build Setting</code> -&gt; <code>Order File</code> -&gt; <code>$(PROJECT_DIR)/app.order</code></p><p><img src="/images/post/order-file-setting.png" alt="order file setting"></p><h2 id="验证是否生效"><a href="#验证是否生效" class="headerlink" title="验证是否生效"></a>验证是否生效</h2><p>Xcode里面<code>Build Setting</code>有个<code>Write Link Map File</code>，可以生成Link Map文件的选项，路径如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Link Map文件</span></span><br><span class="line">Intermediates.noindex/xxxx.build/Debug-iphoneos/xxx.build/xxx-LinkMap-normal-arm64.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成app文件路径</span></span><br><span class="line">Products/Debug-iphoneos/xxx.app</span><br></pre></td></tr></table></figure><p>文件内容其实是描述链接器连接的详情，对应的是MachO文件的内存分布，文件如下</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"># Path: /Users/bomo/Library/Developer/Xcode/DerivedData/SwiftScaffold-fdswirgebkkdidcxcpxdffxxvxye/Build/Products/Debug-iphoneos/jcm.app/jcm</span><br><span class="line"># Arch: arm64</span><br><span class="line"># Object files:</span><br><span class="line">[  0] linker synthesized</span><br><span class="line">[  1] /Users/bomo/Library/Developer/Xcode/DerivedData/SwiftScaffold-fdswirgebkkdidcxcpxdffxxvxye/Build/Intermediates.noindex/SwiftScaffold.build/Debug-iphoneos/jcm.build/Objects-normal/arm64/JHCollectionViewFlowLayout.o</span><br><span class="line">[  2] /Users/bomo/Library/Developer/Xcode/DerivedData/SwiftScaffold-fdswirgebkkdidcxcpxdffxxvxye/Build/Intermediates.noindex/SwiftScaffold.build/Debug-iphoneos/jcm.build/Objects-normal/arm64/JHCollectionReusableView.o</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># Sections:</span><br><span class="line"># Address   Size        Segment Section</span><br><span class="line">0x100004928 0x00ED5B08  __TEXT  __text</span><br><span class="line">0x100EDA430 0x00005550  __TEXT  __stubs</span><br><span class="line">0x100EDF980 0x00005190  __TEXT  __stub_helper</span><br><span class="line">0x100EE4B10 0x000684D9  __TEXT  __cstring</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># Symbols:</span><br><span class="line"># Address   Size        File  Name</span><br><span class="line">0x100004928 0x00000094  [  6] ___swift_instantiateConcreteTypeFromMangledName</span><br><span class="line">0x1000049BC 0x00000088  [ 78] _main</span><br><span class="line">0x100004A44 0x00000070  [ 78] _$s3jcm11AppDelegateCMa</span><br><span class="line">0x100004AB4 0x00000044  [ 78] _$s3jcm11AppDelegateCACycfcTo</span><br><span class="line">0x100004AF8 0x00000108  [ 78] _$s3jcm11AppDelegateCACycfc</span><br><span class="line">0x100004C00 0x00000144  [ 78] _$s3jcm11AppDelegateC11application_29didFinishLaunchingWithOptionsSbSo13UIApplicationC_SDySo0j6LaunchI3KeyaypGSgtFTo</span><br><span class="line">0x100004D44 0x00000430  [ 78] _$s3jcm11AppDelegateC11application_29didFinishLaunchingWithOptionsSbSo13UIApplicationC_SDySo0j6LaunchI3KeyaypGSgtF</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># Dead Stripped Symbols:</span><br><span class="line">#           Size        File  Name</span><br><span class="line">&lt;&lt;dead&gt;&gt;    0x00000006  [  2] literal string: class</span><br><span class="line">&lt;&lt;dead&gt;&gt;    0x00000014  [  2] literal string: setBackgroundColor:</span><br><span class="line">&lt;&lt;dead&gt;&gt;    0x0000000B  [  2] literal string: v24@0:8@16</span><br><span class="line">&lt;&lt;dead&gt;&gt;    0x00000010  [  3] literal string: backgroundColor</span><br><span class="line">&lt;&lt;dead&gt;&gt;    0x00000014  [  3] literal string: setBackgroundColor:</span><br><span class="line">&lt;&lt;dead&gt;&gt;    0x0000000E  [  3] literal string: .cxx_destruct</span><br><span class="line">&lt;&lt;dead&gt;&gt;    0x00000008  [  3] literal string: @16@0:8</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这里我们只关注符号表<code>Symbols</code>，这里的顺序就是MachO文件对应的顺序，如果与<code>app.order</code>的顺序一致，就表明改成功了</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>通过<code>System Trace</code>工具测试修改前后对比</p><p><img src="/images/post/trace-page-fault-diff.png" alt="system trace page fault diff"></p><p><code>page fault</code>减少了900，速度提升<code>225ms</code>，这里的时间与具体的运行环境有关系，建议多次测试</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzI1MzYzMjE0MQ==&mid=2247485101&idx=1&sn=abbbb6da1aba37a04047fc210363bcc9&scene=21&token=2051547505&lang=zh_CN#wechat_redirect">抖音研发实践：基于二进制文件重排的解决方案 APP启动速度提升超15%</a></li><li><a href="http://yulingtianxia.com/blog/2019/09/01/App-Order-Files/">App 二进制文件重排已经被玩坏了</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xcode动态调试第三方App</title>
      <link href="/2020-03-15/xcode-dynamic-debug/"/>
      <url>/2020-03-15/xcode-dynamic-debug/</url>
      
        <content type="html"><![CDATA[<p>之前我们知道，我们可以使用lldb调试手机上的App，而Xcode就是用的lldb进行调试的，而且功能非常强大，例如查看UI层级结构，查看调用栈，打断点，lldb只能提示等等，使用起来比直接用lldb调试会方便很多，这里记录一下如何在XCode调试第三方App</p><span id="more"></span><h2 id="直接启动调试"><a href="#直接启动调试" class="headerlink" title="直接启动调试"></a>直接启动调试</h2><ol><li><p>我们先拿到<code>脱壳</code>的第三方App（<code>WeChat</code>），进行<code>重签名</code>，得到<code>WeChat.app</code></p><p> 有很多种脱壳的方式，笔者用的是<code>iOS13</code>，用的是<code>CrackerXI+</code>工具</p></li><li><p>新建一个新的工程，证书与重签名的一致，修改bundleId为<code>com.tencent.xin</code>，运行到手机上</p></li><li><p>把<code>WeChat.app</code>放到工程根目录，在工程添加<code>Run Script</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行之前换成第三方app，达到偷梁换柱的目的</span></span><br><span class="line"><span class="built_in">cp</span> -rf <span class="string">&quot;<span class="variable">$&#123;SRCROOT&#125;</span>/WeChat.app&quot;</span> <span class="string">&quot;<span class="variable">$&#123;BUILT_PRODUCTS_DIR&#125;</span>/&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>接下来就跟我们平常调试应用一样，只是没有源码可以看</p></li></ol><h3 id="添加断点"><a href="#添加断点" class="headerlink" title="添加断点"></a>添加断点</h3><p>通过Hopper查看方法的地址为: <code>0x0000000102a9602c</code></p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-[WCAccountLoginControlLogic onFirstViewLogin]:</span><br><span class="line">0000000102a9602c         stp        x22, x21, [sp, #-0x30]!</span><br><span class="line">0000000102a96030         stp        x20, x19, [sp, #0x10]</span><br><span class="line">0000000102a96034         stp        x29, x30, [sp, #0x20]</span><br></pre></td></tr></table></figure><p>打断点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 查看ASLR为：0x0000000000558000 = 0x0000000100558000 - 0x0000000100000000</span></span><br><span class="line">(lldb) image list | grep WeChat</span><br><span class="line">[  0] 7195B97E-9078-3119-9110-8BDA959283F0 0x0000000100558000 /Users/wendy/Library/Developer/Xcode/DerivedData/Test-haevfjompsameldsewkriqunrgfe/Build/Products/Debug-iphoneos/WeChat.app/WeChat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 所以方法的内存地址为: 0x0000000102fee02c = 0x0000000000558000 + 0x0000000102a9602c</span></span><br><span class="line">(lldb) p/x 0x0000000000558000 + 0x0000000102a9602c</span><br><span class="line">(long) <span class="variable">$27</span> = 0x0000000102fee02c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 添加地址断点</span></span><br><span class="line">(lldb) breakpoint <span class="built_in">set</span> -a 0x0000000102fee02c</span><br><span class="line">Breakpoint 5: <span class="built_in">where</span> = WeChat`___lldb_unnamed_symbol137105$<span class="variable">$WeChat</span>, address = 0x0000000102fee02c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 添加符号断点（失败）</span></span><br><span class="line">(lldb) breakpoint <span class="built_in">set</span> -n <span class="string">&quot;-[WCAccountLoginControlLogic onFirstViewLogin]&quot;</span></span><br><span class="line">Breakpoint 8: no locations (pending).</span><br><span class="line">WARNING:  Unable to resolve breakpoint to any actual locations.</span><br></pre></td></tr></table></figure><p>断点只能通过地址添加，并不能解析符号，另外Xcode也不能解析堆栈信息，我们可以用<code>restore-symbol</code>恢复符号表</p><h3 id="恢复符号表"><a href="#恢复符号表" class="headerlink" title="恢复符号表"></a>恢复符号表</h3><p>为了方便调试，打断点，查看堆栈调用信息，我们可以使用<a href="https://github.com/tobefuturer/restore-symbol"><code>restore-symbol</code></a>恢复符号表</p><p>使用方法，网站上很详细了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/tobefuturer/restore-symbol.git</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line"><span class="built_in">cd</span> restore-symbol &amp;&amp; make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行（恢复OC符号表）</span></span><br><span class="line">./restore-symbol /pathto/origin_mach_o_file -o /pathto/mach_o_with_symbol</span><br></pre></td></tr></table></figure><p>恢复block的符号表需要借助IDA导出映射关系，具体见网站说明，恢复符号表后需要<code>重签名</code></p><h3 id="打符号断点"><a href="#打符号断点" class="headerlink" title="打符号断点"></a>打符号断点</h3><p><img src="/images/post/xcode-symbol-breakpoint.png" alt="symbol breakpoint"></p><h3 id="UI-层级"><a href="#UI-层级" class="headerlink" title="UI 层级"></a>UI 层级</h3><p><img src="/images/post/xcode-ui-hierarchy.png" alt="uiview hierarchy"></p><h2 id="远程附加调试"><a href="#远程附加调试" class="headerlink" title="远程附加调试"></a>远程附加调试</h2><p>先安装第三方App(<code>脱壳</code>)，然后新建一个新工程，运行</p><p>在<code>XCode</code> -&gt; <code>DEBGU</code> -&gt; <code>Attach to Process</code>，然后选择对应的进程附加</p><p><img src="/images/post/xcode-attachto-process.png" alt="attach to process"></p><p>用起来和直接调试是一样</p><p><img src="/images/post/xcode-attach-debug.png" alt="attach debug"></p><blockquote><p>附加调试有时候会很慢</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 10.15安装IDA7</title>
      <link href="/2020-03-13/ida7-catalina/"/>
      <url>/2020-03-13/ida7-catalina/</url>
      
        <content type="html"><![CDATA[<p>MacOS 10.15对系统做了比较大的改动，之前的<code>IDA7.0</code>无法在10.15上安装，而在10.14安装是正常的，解决方案是通过<code>MacOS 10.14</code>安装，然后把安装好的文件放到10.15系统运行</p><span id="more"></span><h2 id="Mac-10-14安装IDA"><a href="#Mac-10-14安装IDA" class="headerlink" title="Mac 10.14安装IDA"></a>Mac 10.14安装IDA</h2><ol><li><p>下载并安装虚拟机<a href="https://xclient.info/s/vmware-fusion.html"><code>VMware Fusion</code></a></p></li><li><p>下载并安装<code>MacOS 10.14</code>镜像</p><blockquote><p>链接: <a href="https://pan.baidu.com/s/1XVPCyecg4xIbxnvR6_ukDA">https://pan.baidu.com/s/1XVPCyecg4xIbxnvR6_ukDA</a> 提取码: y8xn</p></blockquote></li><li><p>下载<a href="http://www.pc6.com/mac/566964.html"><code>IDA7.0</code></a>，安装到MacOS10.14上</p></li></ol><p>安装完得到</p><img src="/images/post/ida-app.png" class="" width="500"><h2 id="复制到Mac-10-15"><a href="#复制到Mac-10-15" class="headerlink" title="复制到Mac 10.15"></a>复制到Mac 10.15</h2><p>拷贝10.14系统下的到<code>/Applications/IDA Pro 7.0</code>目录到10.15系统的<code>/Applications/</code>下</p><ol><li><p>直接打开会直接崩溃</p> <img src="/images/post/ida-catalina-crash.png" class="" width="500"><p> 需要替换一下<code>libqcocoa.dylib</code>文件，在<a href="https://github.com/fjh658/IDA7.0_SP">这里</a>可以找到</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Applications/IDA Pro 7.0/ida.app/Contents/PlugIns/platforms/libqcocoa.dylib</span><br></pre></td></tr></table></figure></li><li><p>每次打开会报授权过期<br> 解压<code>Fixes/IDA Mac 7 pacth.7z</code>并替换下面文件</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Applications/IDA Pro 7.0/ida.app/Contents/MacOS/ida</span><br><span class="line">/Applications/IDA Pro 7.0/ida.app/Contents/MacOS/ida64</span><br><span class="line">/Applications/IDA Pro 7.0/ida.app/Contents/MacOS/libida.dylib</span><br><span class="line">/Applications/IDA Pro 7.0/ida.app/Contents/MacOS/libida64.dylib</span><br></pre></td></tr></table></figure></li><li><p>打开<code>ida64</code>如果出现无法打开的情况</p><img src="/images/post/ida-catalina2.png" class="" width="500"><p>可能是权限问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果没有执行权限，需要先添加，之后就能直接启动了</span></span><br><span class="line"><span class="built_in">cd</span> /Applications/IDA Pro 7.0/ida.app/Contents/MacOS</span><br><span class="line"><span class="built_in">chmod</span> +x ida</span><br><span class="line"><span class="built_in">chmod</span> +x ida64</span><br></pre></td></tr></table></figure> <img src="/images/post/ida-catalina3.png" class="" width="600"></li></ol><p>下面是我处理后的文件，可以直接拿到<code>Mac10.15</code>使用</p><blockquote><p>链接:<a href="https://pan.baidu.com/s/1DwkW2ICWev5FhIqOHuq6BA">https://pan.baidu.com/s/1DwkW2ICWev5FhIqOHuq6BA</a>  密码:kzxx</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS安全防护</title>
      <link href="/2020-01-14/ios-security-protection/"/>
      <url>/2020-01-14/ios-security-protection/</url>
      
        <content type="html"><![CDATA[<p>对于安全性要求高的App，需要添加逆向成本，较少被破解和攻击的风险，防护的方式主要有<code>越狱检测</code>, <code>抓包检测</code>, <code>防反编译</code>, <code>防重签名</code>, <code>防hook</code>, <code>防动态调试</code></p><span id="more"></span><h2 id="越狱检测"><a href="#越狱检测" class="headerlink" title="越狱检测"></a>越狱检测</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">BOOL</span>)isJailbroken &#123;</span><br><span class="line">    <span class="comment">// 检查是否存在越狱常用文件</span></span><br><span class="line">    <span class="built_in">NSArray</span> *jailFilePaths = @[<span class="string">@&quot;/Applications/Cydia.app&quot;</span>,</span><br><span class="line">                               <span class="string">@&quot;/Library/MobileSubstrate/MobileSubstrate.dylib&quot;</span>,</span><br><span class="line">                               <span class="string">@&quot;/bin/bash&quot;</span>,</span><br><span class="line">                               <span class="string">@&quot;/usr/sbin/sshd&quot;</span>,</span><br><span class="line">                               <span class="string">@&quot;/etc/apt&quot;</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *filePath <span class="keyword">in</span> jailFilePaths) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([[<span class="built_in">NSFileManager</span> defaultManager] fileExistsAtPath:filePath]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否安装了越狱工具Cydia</span></span><br><span class="line">    <span class="keyword">if</span>([[<span class="built_in">UIApplication</span> sharedApplication] canOpenURL:[<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;cydia://package/com.example.package&quot;</span>]])&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查是否有权限读取系统应用列表</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="built_in">NSFileManager</span> defaultManager] fileExistsAtPath:<span class="string">@&quot;/User/Applications/&quot;</span>])&#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *applist = [[<span class="built_in">NSFileManager</span> defaultManager] contentsOfDirectoryAtPath:<span class="string">@&quot;/User/Applications/&quot;</span></span><br><span class="line">                                                                               error:<span class="literal">nil</span>];</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;applist = %@&quot;</span>,applist);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  检测当前程序运行的环境变量</span></span><br><span class="line">    <span class="type">char</span> *env = getenv(<span class="string">&quot;DYLD_INSERT_LIBRARIES&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (env != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，上面方法很容易被hook，我们可以把它拆成多个方法，并且字符串加密处理，放到C方法中，增加hook的成本</p><h2 id="防抓包"><a href="#防抓包" class="headerlink" title="防抓包"></a>防抓包</h2><ul><li>代理检测</li><li>SSLPinning：校验</li></ul><h2 id="防反编译"><a href="#防反编译" class="headerlink" title="防反编译"></a>防反编译</h2><p>这里主要是代码混淆，不做展开</p><ul><li>类名方法名混淆，OC的话可以用宏占位和宏替换来做</li><li>llvm编译器混淆</li></ul><h2 id="反注入（已失效）"><a href="#反注入（已失效）" class="headerlink" title="反注入（已失效）"></a>反注入（已失效）</h2><p>dyld在加载MachO的时候，会判断segments中判断是否有restrict这个段，如果有的话,那么就不会加载<code>DYLD_INSERT_LIBRARIES</code>环境变量的动态库，所以可以在程序中加入restrict这个字段</p><p>在<code>Xcode</code> -&gt; <code>Build Settings</code> -&gt; <code>Other Link Flags</code>添加<code>-Wl,-sectcreate,__RESTRICT,__restrict,/dev/null</code>标记即可，使用MachOView即可看到load commands中多了<code>__RESTRICT</code>段</p><p><img src="/images/post/macho-restrict.png" alt=" "></p><blockquote><p>iOS10以后,苹果在dyld中就不在检测__restrict字段，已经失效了</p></blockquote><h2 id="防重签名"><a href="#防重签名" class="headerlink" title="防重签名"></a>防重签名</h2><p>我们都知道，App在打包签名后在app里面会带上<code>embedded.mobileprovision</code>，系统会通过该文件校验应用是否合法，这个文件就是我们打包用的文件，我们我们可以在代码中校验该文件是不是我们自己的，如果不是，则退出程序（AppStore下载的包没有<code>embedded.mobileprovision</code>）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 判断签名</span></span><br><span class="line"><span class="comment">/// &lt;string&gt;9PCXXXXK5A.*&lt;/string&gt;</span></span><br><span class="line"><span class="comment">/// &lt;string&gt;9PCXXXXK5A.com.bomo.demo&lt;/string&gt;</span></span><br><span class="line"><span class="type">void</span> checkCodesign(<span class="built_in">NSString</span> *identifier)&#123;</span><br><span class="line">    <span class="comment">// 描述文件路径</span></span><br><span class="line">    <span class="built_in">NSString</span> *embeddedPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@&quot;embedded&quot;</span> ofType:<span class="string">@&quot;mobileprovision&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> ([<span class="built_in">NSFileManager</span>.defaultManager fileExistsAtPath:embeddedPath]) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *embeddedProvisioning = [<span class="built_in">NSString</span> stringWithContentsOfFile:embeddedPath encoding:<span class="built_in">NSASCIIStringEncoding</span> error:<span class="literal">nil</span>];</span><br><span class="line">        <span class="built_in">NSArray</span> *embeddedProvisioningLines = [embeddedProvisioning componentsSeparatedByCharactersInSet:[<span class="built_in">NSCharacterSet</span> newlineCharacterSet]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; embeddedProvisioningLines.count; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([embeddedProvisioningLines[i] rangeOfString:<span class="string">@&quot;application-identifier&quot;</span>].location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">                <span class="built_in">NSString</span> *value = embeddedProvisioningLines[i + <span class="number">1</span>];</span><br><span class="line">                <span class="built_in">NSInteger</span> start = [value rangeOfString:<span class="string">@&quot;&lt;string&gt;&quot;</span>].location;</span><br><span class="line">                <span class="built_in">NSInteger</span> end = [value rangeOfString:<span class="string">@&quot;&lt;/string&gt;&quot;</span>].location;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (start != <span class="built_in">NSNotFound</span> &amp;&amp; end != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *applicationIdentifier = [value substringWithRange:<span class="built_in">NSMakeRange</span>(start + <span class="number">8</span>, end - start - <span class="number">8</span>)];</span><br><span class="line">                    <span class="comment">// &lt;string&gt;9PCXXXXK5A.*&lt;/string&gt;</span></span><br><span class="line">                    <span class="comment">// &lt;string&gt;9PCXXXXK5A.com.bomo.demo&lt;/string&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 对比签名ID</span></span><br><span class="line">                    <span class="keyword">if</span> (![applicationIdentifier isEqual:identifier]) &#123;</span><br><span class="line">                        <span class="comment">// exit</span></span><br><span class="line">                        <span class="keyword">asm</span>(</span><br><span class="line">                            <span class="string">&quot;mov X0,#0\n&quot;</span></span><br><span class="line">                            <span class="string">&quot;mov w16,#1\n&quot;</span></span><br><span class="line">                            <span class="string">&quot;svc #0x80&quot;</span></span><br><span class="line">                            );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// AppStore的包没有mobileprovision文件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- # https://blog.csdn.net/quwenjie/article/details/80353384 --><h2 id="防动态调试"><a href="#防动态调试" class="headerlink" title="防动态调试"></a>防动态调试</h2><h3 id="使用ptrace函数反调试"><a href="#使用ptrace函数反调试" class="headerlink" title="使用ptrace函数反调试"></a>使用<code>ptrace</code>函数反调试</h3><p><code>debugserver</code>之所以可以调试APP, 是依赖一个系统函数<code>ptrace</code>(process trace 进程跟踪). 此函数提供了一个进程监听控制另外一个进程, 并且可以检查被控制进程的内容和寄存器里面的数据. 可以用来实现断电调试和系统调用跟踪. iOS中没有提供此函数的头文件, 但不是私有API.</p><p><code>ptrace</code>函数在iOS项目中不能找到，在MacOS工程可以引用到，我们把需要用到的函数声明搬过来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * request: 要做的事情</span></span><br><span class="line"><span class="comment"> * pid: 要监听/操作的id</span></span><br><span class="line"><span class="comment"> * addr: 为request代表的操作提供的地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ptrace</span><span class="params">(<span class="type">int</span> _request, <span class="type">pid_t</span> _pid, <span class="type">caddr_t</span> _addr, <span class="type">int</span> _data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_TRACE_ME 0   <span class="comment">/* child declares it&#x27;s being traced */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_READ_I   1   <span class="comment">/* read word in child&#x27;s I space */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_READ_D   2   <span class="comment">/* read word in child&#x27;s D space */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_READ_U   3   <span class="comment">/* read word in child&#x27;s user structure */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_WRITE_I  4   <span class="comment">/* write word in child&#x27;s I space */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_WRITE_D  5   <span class="comment">/* write word in child&#x27;s D space */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_WRITE_U  6   <span class="comment">/* write word in child&#x27;s user structure */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_CONTINUE 7   <span class="comment">/* continue the child */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_KILL     8   <span class="comment">/* kill the child process */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_STEP     9   <span class="comment">/* single step the child */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_ATTACH   ePtAttachDeprecated <span class="comment">/* trace some running process */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_DETACH   11  <span class="comment">/* stop tracing a process */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_SIGEXC   12  <span class="comment">/* signals as exceptions for current_proc */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_THUPDATE 13  <span class="comment">/* signal for thread# */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_ATTACHEXC    14  <span class="comment">/* attach to running process with signal exception */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_FORCEQUOTA   30  <span class="comment">/* Enforce quota for root */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_DENY_ATTACH  31</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_FIRSTMACH    32  <span class="comment">/* for machine-specific requests */</span></span></span><br></pre></td></tr></table></figure><p>找地方执行，可以在load方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">void</span>)load &#123;</span><br><span class="line">    <span class="comment">// PT_DENY_ATTACH 表示拒绝调试</span></span><br><span class="line">    <span class="comment">// 第二个参数也可以设置为0，表示当前进程</span></span><br><span class="line">    ptrace(PT_DENY_ATTACH, getpid(), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当打开<code>debugserver</code>的时候会失败(<code>Segmentation fault: 11</code>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root<span class="comment"># debugserver 127.0.0.1:3333 -a Test</span></span><br><span class="line">debugserver-@(<span class="comment">#)PROGRAM:LLDB  PROJECT:lldb-900.3.98</span></span><br><span class="line"> <span class="keyword">for</span> arm64.</span><br><span class="line">Attaching to process Test...</span><br><span class="line">Segmentation fault: 11</span><br><span class="line">laboshi:~ root<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>直接使用<code>ptrace</code>方法的时候，编译完成后符号表会出现<code>ptrace</code>符号，提审可能会被拒，这个就看审核员的心情了，我们可以通过<code>dlopen</code>动态加载系统的动态库和方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数指针</span></span><br><span class="line"><span class="type">int</span> (*ptrace_p)(<span class="type">int</span> _request, pid_t _pid, caddr_t _addr, <span class="type">int</span> _data);</span><br><span class="line"><span class="comment">// 加载系统动态库</span></span><br><span class="line"><span class="type">void</span> *handler = dlopen(<span class="string">&quot;/usr/lib/system/libsystem_kernel.dylib&quot;</span>, RTLD_LAZY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (handler) &#123;</span><br><span class="line">    <span class="comment">// 读取符号地址</span></span><br><span class="line">    ptrace_p = dlsym(handler, <span class="string">&quot;ptrace&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ptrace_p) &#123;</span><br><span class="line">        <span class="comment">// 调用</span></span><br><span class="line">        ptrace_p(PT_DENY_ATTACH, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面的字符串可以做一定的加密处理，减少特征</p></blockquote><h3 id="使用sysctl函数反调试"><a href="#使用sysctl函数反调试" class="headerlink" title="使用sysctl函数反调试"></a>使用<code>sysctl</code>函数反调试</h3><p>使用<code>sysctl</code>函数可以判断当前程序是否正在被调试，可以隔一段时间检测一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;sys/sysctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isDebuging</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 控制码</span></span><br><span class="line">    <span class="type">int</span> name[<span class="number">4</span>];                <span class="comment">// 里面放字节码, 查询信息</span></span><br><span class="line">    name[<span class="number">0</span>] = CTL_KERN;         <span class="comment">// 内核</span></span><br><span class="line">    name[<span class="number">1</span>] = KERN_PROC;        <span class="comment">// 查询进程</span></span><br><span class="line">    name[<span class="number">2</span>] = KERN_PROC_PID;    <span class="comment">// 通过id查询, 传递的参数是进程id</span></span><br><span class="line">    name[<span class="number">3</span>] = getpid();         <span class="comment">// 拿到当前进程id</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kinfo_proc</span> <span class="title">info</span>;</span>     <span class="comment">// 结束进程查询结果的结构体</span></span><br><span class="line">    <span class="type">size_t</span> info_size = <span class="keyword">sizeof</span>(info);    <span class="comment">// 结构体的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> error = sysctl(name, <span class="keyword">sizeof</span>(name)/<span class="keyword">sizeof</span>(*name), &amp;info, &amp;info_size, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">        <span class="comment">// p_flag 的值转换为二进制, 假如从低位到高位第12位的值为1(0x800), 则正在被调试</span></span><br><span class="line">        <span class="keyword">if</span> (info.kp_proc.p_flag &amp; P_TRACED) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h3><p>上面反调试方法都是C语言的方法，而我们知道<a href="https://github.com/facebook/fishhook"><code>fishhook</code></a>可以 hook (系统的)C方法，所以上面两个方法可以被fishhook替换掉</p><p>这时候我们就需要<code>保护系统的C方法不被hook</code>，我们可以在别人hook之前换成我们自己的实现，然后别人再hook的时候就只是hook我们替换过的实现了  </p><p>如何<code>确保我们的hook在别人之前调用</code>呢？</p><p>我们知道，dyld加载App的时候，动态库是先加载的，而动态库的加载顺序是根据MachO文件描述的顺序（也就是<code>Xcode</code> -&gt; <code>Frameworks,Libraries,and Embedded Content</code>配置的顺序），我们可以用一个<code>防护的动态库</code>让我们的动态库先执行</p><p>当然如果MachO文件的动态链接库的顺序被改变了，还是会被别人先hook，这个成本就比较高了</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;fishhook.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_DENY_ATTACH  31</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原方法</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> (*ptrace_p)(<span class="type">int</span> _request, pid_t _pid, caddr_t _addr, <span class="type">int</span> _data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新方法</span></span><br><span class="line"><span class="type">int</span> my_ptrace(<span class="type">int</span> _request, pid_t _pid, caddr_t _addr, <span class="type">int</span> _data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_request != PT_DENY_ATTACH) &#123;</span><br><span class="line">        <span class="keyword">return</span> ptrace_p(_request, _pid, _addr, _data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在动态库的方法里面添加重绑</span></span><br><span class="line">+ (<span class="type">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">struct</span> rebinding ptraceBd;</span><br><span class="line">    <span class="comment">// 符号</span></span><br><span class="line">    ptraceBd.name = <span class="string">&quot;ptrace&quot;</span>;</span><br><span class="line">    <span class="comment">// 新方法</span></span><br><span class="line">    ptraceBd.replaced = (<span class="type">void</span> *)&amp;ptrace_p;</span><br><span class="line">    <span class="comment">// 原方法</span></span><br><span class="line">    ptraceBd.replacement = my_ptrace;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> rebinding bds[] = &#123;ptraceBd&#125;;</span><br><span class="line">    <span class="comment">// 绑定符号</span></span><br><span class="line">    rebind_symbols(bds, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="防hook"><a href="#防hook" class="headerlink" title="防hook"></a>防hook</h2><p>对于<code>OC</code>的方法的hook通常是使用runtime的方法交换来实现<code>method_exchangeImplementations</code>，所以我们确保这个方法是安全的，就能很大程度上降低OC方法被hook</p><p>由于dyld加载程序时候，对于外部符号（例如系统函数）是<code>lazybind</code>加载的，编译的时候并不是绑定真实的地址，而是在运行时动态绑定的，所以<code>fishhook</code>可以hook系统方法</p><p>我们可以先把<code>method_exchangeImplementations</code>先换成我们的函数，然后别人在交换该方法的时候，就无法拿到原本的实现了</p><p>如何让我们的hook先调用呢</p><blockquote><p>dyld在加载程序的时候，会先加载动态库，并且是按照MachO文件存储的顺序加载（也就是Xcode链接库的顺序），所以我们可以把我们的hook代码放到动态库放到最前面，就可以然后在load方法交换方法</p></blockquote><p>当然，如果MachO文件的动态库链接顺序也被修改了，那么就没办法了，这时候可以通过一些逻辑判断来增加hook难度，例如如果调用次数多了，就退出程序<code>exit(0)</code></p><blockquote><p>上面只做了<code>method_exchangeImplementations</code>方法的防护，还有其他一些潜在的危险方法也需要做防护，例如：<code>method_setImplementation</code>和<code>method_getImplementation</code>，通常我们没有用到这两个方法，如果没有用到，就直接替换掉</p></blockquote><p>另外由于程序库内部的<code>C方法</code>比较难被hook，对于一些敏感的方法可以放到C方法中（在命名也做一些混淆处理）</p><h2 id="防fishhook"><a href="#防fishhook" class="headerlink" title="防fishhook"></a>防fishhook</h2><p>我们知道系统库的方法可以被fishhook替换掉，如何防fishhook呢</p><h3 id="dlopen-dlsym"><a href="#dlopen-dlsym" class="headerlink" title="dlopen+dlsym"></a>dlopen+dlsym</h3><p>采用<code>dlopen+dlsym</code>调用系统方法可以防fishhook，如上面调用<code>ptrace</code>的第二种方式</p><h3 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h3><p>使用系统函数<code>syscall</code>调用<code>ptrace</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数为函数的编号，后面的参数为对应函数的参数</span></span><br><span class="line"><span class="type">int</span> syscall(<span class="type">int</span>, ...);</span><br></pre></td></tr></table></figure><p>通过<code>&lt;sys/syscall.h&gt;</code>头文件找到对应的<code>ptrace</code>函数编号为<code>26</code></p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_setuid         23</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_getuid         24</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_geteuid        25</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_ptrace         26</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_recvmsg        27</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SYS_sendmsg        28</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">syscall(<span class="number">26</span>, PT_DENY_ATTACH, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="汇编调用"><a href="#汇编调用" class="headerlink" title="汇编调用"></a>汇编调用</h3><p>双面两种方式都是基于符号调用函数，这里有个缺点是可以被<code>符号断点</code>短住，这样攻击者，可以先断住符号断点，然后跳过该符号函数从而让我们的代码失效，如果我们写的是汇编代码，则不会被符号断点跟踪到，下面用汇编执行ptrace</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">asm</span> <span class="keyword">volatile</span>(</span><br><span class="line">    <span class="string">&quot;mov x0,#31\n&quot;</span></span><br><span class="line">    <span class="string">&quot;mov x1,#0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;mov x2,#0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;mov x3,#0\n&quot;</span></span><br><span class="line">    <span class="string">&quot;mov x16,#26\n&quot;</span><span class="comment">//中断根据x16 里面的值，跳转ptrace</span></span><br><span class="line">    <span class="string">&quot;svc #0x80\n&quot;</span><span class="comment">//这条指令就是触发中断（系统级别的跳转！）</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __arm64__</span></span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;mov x0,#0\n&quot;</span></span><br><span class="line">        <span class="string">&quot;mov w16,#1\n&quot;</span></span><br><span class="line">        <span class="string">&quot;svc #0x80\n&quot;</span></span><br><span class="line">    );</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __arm__ <span class="comment">//32位下</span></span></span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">        <span class="string">&quot;mov r0,#0\n&quot;</span></span><br><span class="line">        <span class="string">&quot;mov r12,#1\n&quot;</span></span><br><span class="line">        <span class="string">&quot;svc #80\n&quot;</span></span><br><span class="line">    );</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>安全防护之后更好，没有最好，我们只能增加攻击者的成本，增加逆向难度</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 学习笔记</title>
      <link href="/2020-01-10/docker-learn/"/>
      <url>/2020-01-10/docker-learn/</url>
      
        <content type="html"><![CDATA[<h2 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h2><span id="more"></span><p>安装一个 nginx 并运行<br>执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 nginx</span><br></pre></td></tr></table></figure><p>查看当前运行的进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>访问<code>http://localhost:8080</code></p><p>执行原理</p><ol><li>检测本地是否有 nginx 镜像</li><li>如果没有，则去仓库下载最新的镜像</li><li>下载成功后，运行镜像</li><li>把本地的8080端口映射到容器的80端口</li></ol><p>运行ubuntu容器，并进入<code>bash</code>控制台</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu /bin/bash</span><br></pre></td></tr></table></figure><ul><li>-t：分配一个伪终端并绑定到容器标准输入输出上</li><li>-i：让容器的标准输入保持打开，可以一直监听输入</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>相当于操作系统安装文件，提供容器所需要的程序，依赖库，资源，配置等信息</p><p>镜像可以嵌套镜像，一个镜像可以由多个镜像组成</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>相当于一个独立的操作系统，拥有特定的运行环境，镜像与容器类似于类和实例的关系，容器的本质是进程</p><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>集中管理和分发给用户下载的镜像的服务</p><h2 id="基础实战"><a href="#基础实战" class="headerlink" title="基础实战"></a>基础实战</h2><h3 id="镜像-1"><a href="#镜像-1" class="headerlink" title="镜像"></a>镜像</h3><ol><li><p>搜索镜像</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure></li><li><p>下载镜像，(如果本地不存在)</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull fuhai/jpress:v2.0.7</span><br></pre></td></tr></table></figure></li><li><p>查看镜像</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi fuhai/jpress:v2.0.7</span><br></pre></td></tr></table></figure></li><li><p>运行镜像</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run</span><br></pre></td></tr></table></figure></li><li><p>查看命令</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></li><li><p>实例</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 nginx</span><br></pre></td></tr></table></figure><p> -p：端口映射<br> -d：后台运行，并返回ContainerId，不加的话是直接运行</p></li><li><p>停止容器</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker stop &lt;container_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">docker start &lt;container_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂停容器</span></span><br><span class="line">docker pause &lt;container_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续已经暂停的容器</span></span><br><span class="line">docker unpause &lt;container_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart &lt;container_id&gt;</span><br></pre></td></tr></table></figure></li><li><p>容器操作</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出容器</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器详细信息</span></span><br><span class="line">docker inspect &lt;container_id&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> &lt;container_id&gt;</span><br></pre></td></tr></table></figure></li><li><p>进入容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_id&gt; bash</span><br></pre></td></tr></table></figure></li><li><p>拷贝文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从本地拷贝到容器</span></span><br><span class="line">docker <span class="built_in">cp</span> /srcdir/srcfile &lt;container_id&gt;:/usr/local/webapp/...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从容器拷贝到本地</span></span><br><span class="line">docker <span class="built_in">cp</span> &lt;container_id&gt;:/usr/local/webapp/... /local/testdir/...</span><br></pre></td></tr></table></figure></li><li><p>把容器做成镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit &lt;conainer_id&gt; mynginx:v1.0</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>load和initialize方法</title>
      <link href="/2019-10-20/ios-load-initialize/"/>
      <url>/2019-10-20/ios-load-initialize/</url>
      
        <content type="html"><![CDATA[<p>我们都知道，iOS的类中，有两个方法<code>load</code>和<code>initialize</code>，load方法在程序启动的时候就会执行，而initialize方法在类第一次调用的时候执行，这里我们从源码的角度探究一下这两个方法的原理和实现</p><span id="more"></span><p>我们下载<a href="https://opensource.apple.com/tarballs/objc4/">objc4</a>运行时源码，下载最新的版本<code>objc4-779.1.tar.gz</code>，在<code>objc-os.mm</code>找到<code>_objc_init</code>方法，这个函数是OC运行时的入口函数，整个OC运行时从这里开始加载</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/***********************************************************************</span></span><br><span class="line"><span class="comment">* _objc_init</span></span><br><span class="line"><span class="comment">* Bootstrap initialization. Registers our image notifier with dyld.</span></span><br><span class="line"><span class="comment">* Called by libSystem BEFORE library initialization time</span></span><br><span class="line"><span class="comment">**********************************************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> _objc_init(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">bool</span> initialized = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialized) <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fixme defer initialization until an objc-using image is found?</span></span><br><span class="line">    environ_init();</span><br><span class="line">    tls_init();</span><br><span class="line">    static_init();</span><br><span class="line">    runtime_init();</span><br><span class="line">    exception_init();</span><br><span class="line">    cache_init();</span><br><span class="line">    _imp_implementationWithBlock_init();</span><br><span class="line"></span><br><span class="line">    _dyld_objc_notify_register(&amp;map_images, load_images, unmap_image);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="load"><a href="#load" class="headerlink" title="load"></a>load</h2><p>前面是一些初始化方法，最后一个<code>_dyld_objc_notify_register</code>是向<code>dyld</code>注册三个事件，我们这里关注<code>load_images</code>事件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">load_images(<span class="keyword">const</span> <span class="type">char</span> *path __unused, <span class="keyword">const</span> <span class="keyword">struct</span> mach_header *mh)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Return without taking locks if there are no +load methods here.</span></span><br><span class="line">    <span class="keyword">if</span> (!hasLoadMethods((<span class="keyword">const</span> headerType *)mh)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    recursive_mutex_locker_t lock(loadMethodLock);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Discover load methods</span></span><br><span class="line">    &#123;</span><br><span class="line">        mutex_locker_t lock2(runtimeLock);</span><br><span class="line">        prepare_load_methods((<span class="keyword">const</span> headerType *)mh);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call +load methods (without runtimeLock - re-entrant)</span></span><br><span class="line">    call_load_methods();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> call_load_methods(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">bool</span> loading = <span class="literal">NO</span>;</span><br><span class="line">    <span class="type">bool</span> more_categories;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-entrant calls do nothing; the outermost call will finish the job.</span></span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">    loading = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *pool = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Repeatedly call class +loads until there aren&#x27;t any more</span></span><br><span class="line">        <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            call_class_loads();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. Call category +loads ONCE</span></span><br><span class="line">        more_categories = call_category_loads();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Run more +loads if there are classes OR more untried categories</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>  ||  more_categories);</span><br><span class="line"></span><br><span class="line">    objc_autoreleasePoolPop(pool);</span><br><span class="line"></span><br><span class="line">    loading = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，load方法的加载顺序，先加载类的load方法，再加载Category里面的load方法</p><p>进入<code>call_class_loads</code>方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">void</span> call_class_loads(<span class="type">void</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Detach current loadable list.</span></span><br><span class="line">    <span class="keyword">struct</span> loadable_class *classes = loadable_classes;</span><br><span class="line">    <span class="type">int</span> used = loadable_classes_used;</span><br><span class="line">    loadable_classes = <span class="literal">nil</span>;</span><br><span class="line">    loadable_classes_allocated = <span class="number">0</span>;</span><br><span class="line">    loadable_classes_used = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Call all +loads for the detached list.</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; used; i++) &#123;</span><br><span class="line">        Class cls = classes[i].cls;</span><br><span class="line">        load_method_t load_method = (load_method_t)classes[i].method;</span><br><span class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PrintLoading) &#123;</span><br><span class="line">            _objc_inform(<span class="string">&quot;LOAD: +[%s load]\n&quot;</span>, cls-&gt;nameForLogging());</span><br><span class="line">        &#125;</span><br><span class="line">        (*load_method)(cls, <span class="keyword">@selector</span>(load));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Destroy the detached list.</span></span><br><span class="line">    <span class="keyword">if</span> (classes) free(classes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里拿到了<code>loadable_classes</code>这个是带有<code>load</code>方法的类列表，并且可以直接拿到load方法的<code>imp</code>直接调用，<strong>这里没有使用objc_msgSend机制调用方法，而是直接拿到IMP直接调用</strong>，签名如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span><span class="params">(*<span class="type">load_method_t</span>)</span><span class="params">(id, SEL)</span>;</span><br></pre></td></tr></table></figure><p>在<code>prepare_load_methods</code>方法会初始化所有的类的加载方法，遍历所有的类，如果类实现了<code>load</code>方法，就会构造<code>loadable_class</code>添加到<code>loadable_classes</code>中</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> prepare_load_methods(<span class="keyword">const</span> headerType *mhdr)</span><br><span class="line">&#123;</span><br><span class="line">    Module mods;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> midx;</span><br><span class="line"></span><br><span class="line">    header_info *hi;</span><br><span class="line">    <span class="keyword">for</span> (hi = FirstHeader; hi; hi = hi-&gt;getNext()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mhdr == hi-&gt;mhdr()) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!hi) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (hi-&gt;info()-&gt;isReplacement()) &#123;</span><br><span class="line">        <span class="comment">// Ignore any classes in this image</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Major loop - process all modules in the image</span></span><br><span class="line">    mods = hi-&gt;mod_ptr;</span><br><span class="line">    <span class="keyword">for</span> (midx = <span class="number">0</span>; midx &lt; hi-&gt;mod_count; midx += <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Skip module containing no classes</span></span><br><span class="line">        <span class="keyword">if</span> (mods[midx].symtab == <span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Minor loop - process all the classes in given module</span></span><br><span class="line">        <span class="keyword">for</span> (index = <span class="number">0</span>; index &lt; mods[midx].symtab-&gt;cls_def_cnt; index += <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Locate the class description pointer</span></span><br><span class="line">            Class cls = (Class)mods[midx].symtab-&gt;defs[index];</span><br><span class="line">            <span class="keyword">if</span> (cls-&gt;info &amp; <span class="built_in">CLS_CONNECTED</span>) &#123;</span><br><span class="line">                schedule_class_load(cls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Major loop - process all modules in the header</span></span><br><span class="line">    mods = hi-&gt;mod_ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The module and category lists are traversed backwards </span></span><br><span class="line">    <span class="comment">// to preserve the pre-10.4 processing order. Changing the order </span></span><br><span class="line">    <span class="comment">// would have a small chance of introducing binary compatibility bugs.</span></span><br><span class="line">    midx = (<span class="type">unsigned</span> <span class="type">int</span>)hi-&gt;mod_count;</span><br><span class="line">    <span class="keyword">while</span> (midx-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> index;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">int</span> total;</span><br><span class="line">        Symtab symtab = mods[midx].symtab;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Nothing to do for a module without a symbol table</span></span><br><span class="line">        <span class="keyword">if</span> (mods[midx].symtab == <span class="literal">nil</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// Total entries in symbol table (class entries followed</span></span><br><span class="line">        <span class="comment">// by category entries)</span></span><br><span class="line">        total = mods[midx].symtab-&gt;cls_def_cnt +</span><br><span class="line">            mods[midx].symtab-&gt;cat_def_cnt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Minor loop - register all categories from given module</span></span><br><span class="line">        index = total;</span><br><span class="line">        <span class="keyword">while</span> (index-- &gt; mods[midx].symtab-&gt;cls_def_cnt) &#123;</span><br><span class="line">            old_category *cat = (old_category *)symtab-&gt;defs[index];</span><br><span class="line">            add_category_to_loadable_list((Category)cat);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">void</span> schedule_class_load(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span>;</span><br><span class="line">    ASSERT(cls-&gt;isRealized());  <span class="comment">// _read_images should realize</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cls-&gt;data()-&gt;flags &amp; RW_LOADED) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Ensure superclass-first ordering</span></span><br><span class="line">    schedule_class_load(cls-&gt;superclass);</span><br><span class="line"></span><br><span class="line">    add_class_to_loadable_list(cls);</span><br><span class="line">    cls-&gt;setInfo(RW_LOADED);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> add_class_to_loadable_list(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    IMP method;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    method = cls-&gt;getLoadMethod();</span><br><span class="line">    <span class="keyword">if</span> (!method) <span class="keyword">return</span>;  <span class="comment">// Don&#x27;t bother if cls has no +load method</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (PrintLoading) &#123;</span><br><span class="line">        _objc_inform(<span class="string">&quot;LOAD: class &#x27;%s&#x27; scheduled for +load&quot;</span>, </span><br><span class="line">                     cls-&gt;nameForLogging());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (loadable_classes_used == loadable_classes_allocated) &#123;</span><br><span class="line">        loadable_classes_allocated = loadable_classes_allocated*<span class="number">2</span> + <span class="number">16</span>;</span><br><span class="line">        loadable_classes = (<span class="keyword">struct</span> loadable_class *)</span><br><span class="line">            realloc(loadable_classes,</span><br><span class="line">                              loadable_classes_allocated *</span><br><span class="line">                              <span class="keyword">sizeof</span>(<span class="keyword">struct</span> loadable_class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    loadable_classes[loadable_classes_used].cls = cls;</span><br><span class="line">    loadable_classes[loadable_classes_used].method = method;</span><br><span class="line">    loadable_classes_used++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在<code>schedule_class_load</code>方法看到，这里面做了一次递归，也就是如果存在父类，会先添加父类，所以<strong>父类的load方法会比子类先执行</strong></p><p>可以看出，load方法的加载顺序</p><ol><li>父类的load方法</li><li>再加载子类的load方法（加载顺序为编译顺序）</li><li>再加载category里面的load方法（加载顺序为编译顺序）</li></ol><h2 id="initialize"><a href="#initialize" class="headerlink" title="initialize"></a>initialize</h2><p>由于<code>initialize</code>是在调用的时候才执行的，我们调试一下看看</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ABC</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ABC</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="type">void</span>)initialize &#123;</span><br><span class="line">    <span class="comment">// 添加断点</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, <span class="string">@&quot;ass&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line">    [ABC alloc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在initialize添加断点，查看调用栈</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(lldb) bt</span><br><span class="line">* thread <span class="comment">#1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = breakpoint 1.1</span></span><br><span class="line">  * frame <span class="comment">#0: 0x0000000104911f20 Test`+[ABC initialize](self=ABC, _cmd=&quot;initialize&quot;) at ViewController.m:19:5</span></span><br><span class="line">    frame <span class="comment">#1: 0x00000001818bb6f0 libobjc.A.dylib`CALLING_SOME_+initialize_METHOD + 20</span></span><br><span class="line">    frame <span class="comment">#2: 0x00000001818c1074 libobjc.A.dylib`initializeNonMetaClass + 640</span></span><br><span class="line">    frame <span class="comment">#3: 0x00000001818c2318 libobjc.A.dylib`initializeAndMaybeRelock(objc_class*, objc_object*, mutex_tt&lt;false&gt;&amp;, bool) + 284</span></span><br><span class="line">    frame <span class="comment">#4: 0x00000001818cf074 libobjc.A.dylib`lookUpImpOrForward + 732</span></span><br><span class="line">    frame <span class="comment">#5: 0x00000001818bbe9c libobjc.A.dylib`_objc_msgSend_uncached + 60</span></span><br><span class="line">    frame <span class="comment">#6: 0x0000000104911f9c Test`-[ViewController viewDidLoad](self=0x0000000104e0cf90, _cmd=&quot;viewDidLoad&quot;) at ViewController.m:33:5</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>可以看到，在调用<code>init</code>方法的时候，调用了<code>objc_msgSend_uncached</code>，然后，走到了<code>lookUpImpOrForward</code>方法，我们在objc4源码中查看该方法</p><p><img src="/images/post/objc_msgSend_uncached.png" alt="_"></p><p>在<code>_objc_msgSend_uncached</code>方法调用了<code>MethodTableLookup</code></p><p><img src="/images/post/MethodTableLookup.png" alt="_"></p><p>在<code>MethodTableLookup</code>方法调用了<code>lookUpImpOrForward</code>，并且behavior传了<code>LOOKUP_INITIALIZE | LOOKUP_RESOLVER</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">IMP lookUpImpOrForward(<span class="type">id</span> inst, SEL sel, Class cls, <span class="type">int</span> behavior)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> IMP forward_imp = (IMP)_objc_msgForward_impcache;</span><br><span class="line">    IMP imp = <span class="literal">nil</span>;</span><br><span class="line">    Class curClass;</span><br><span class="line"></span><br><span class="line">    runtimeLock.assertUnlocked();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Optimistic cache lookup</span></span><br><span class="line">    <span class="keyword">if</span> (fastpath(behavior &amp; LOOKUP_CACHE)) &#123;</span><br><span class="line">        imp = cache_getImp(cls, sel);</span><br><span class="line">        <span class="keyword">if</span> (imp) <span class="keyword">goto</span> done_nolock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// runtimeLock is held during isRealized and isInitialized checking</span></span><br><span class="line">    <span class="comment">// to prevent races against concurrent realization.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// runtimeLock is held during method search to make</span></span><br><span class="line">    <span class="comment">// method-lookup + cache-fill atomic with respect to method addition.</span></span><br><span class="line">    <span class="comment">// Otherwise, a category could be added but ignored indefinitely because</span></span><br><span class="line">    <span class="comment">// the cache was re-filled with the old value after the cache flush on</span></span><br><span class="line">    <span class="comment">// behalf of the category.</span></span><br><span class="line"></span><br><span class="line">    runtimeLock.lock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We don&#x27;t want people to be able to craft a binary blob that looks like</span></span><br><span class="line">    <span class="comment">// a class but really isn&#x27;t one and do a CFI attack.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// To make these harder we want to make sure this is a class that was</span></span><br><span class="line">    <span class="comment">// either built into the binary or legitimately registered through</span></span><br><span class="line">    <span class="comment">// objc_duplicateClass, objc_initializeClassPair or objc_allocateClassPair.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> this check is quite costly during process startup.</span></span><br><span class="line">    checkIsKnownClass(cls);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (slowpath(!cls-&gt;isRealized())) &#123;</span><br><span class="line">        cls = realizeClassMaybeSwiftAndLeaveLocked(cls, runtimeLock);</span><br><span class="line">        <span class="comment">// runtimeLock may have been dropped but is now locked again</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (slowpath((behavior &amp; LOOKUP_INITIALIZE) &amp;&amp; !cls-&gt;isInitialized())) &#123;</span><br><span class="line">        cls = initializeAndLeaveLocked(cls, inst, runtimeLock);</span><br><span class="line">        <span class="comment">// runtimeLock may have been dropped but is now locked again</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// If sel == initialize, class_initialize will send +initialize and</span></span><br><span class="line">        <span class="comment">// then the messenger will send +initialize again after this</span></span><br><span class="line">        <span class="comment">// procedure finishes. Of course, if this is not being called</span></span><br><span class="line">        <span class="comment">// from the messenger then it won&#x27;t happen. 2778172</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runtimeLock.assertLocked();</span><br><span class="line">    curClass = cls;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The code used to lookpu the class&#x27;s cache again right after</span></span><br><span class="line">    <span class="comment">// we take the lock but for the vast majority of the cases</span></span><br><span class="line">    <span class="comment">// evidence shows this is a miss most of the time, hence a time loss.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The only codepath calling into this without having performed some</span></span><br><span class="line">    <span class="comment">// kind of cache lookup is class_getInstanceMethod().</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">unsigned</span> attempts = unreasonableClassCount();;) &#123;</span><br><span class="line">        <span class="comment">// curClass method list.</span></span><br><span class="line">        Method meth = getMethodNoSuper_nolock(curClass, sel);</span><br><span class="line">        <span class="keyword">if</span> (meth) &#123;</span><br><span class="line">            imp = meth-&gt;imp;</span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (slowpath((curClass = curClass-&gt;superclass) == <span class="literal">nil</span>)) &#123;</span><br><span class="line">            <span class="comment">// No implementation found, and method resolver didn&#x27;t help.</span></span><br><span class="line">            <span class="comment">// Use forwarding.</span></span><br><span class="line">            imp = forward_imp;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Halt if there is a cycle in the superclass chain.</span></span><br><span class="line">        <span class="keyword">if</span> (slowpath(--attempts == <span class="number">0</span>)) &#123;</span><br><span class="line">            _objc_fatal(<span class="string">&quot;Memory corruption in class list.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Superclass cache.</span></span><br><span class="line">        imp = cache_getImp(curClass, sel);</span><br><span class="line">        <span class="keyword">if</span> (slowpath(imp == forward_imp)) &#123;</span><br><span class="line">            <span class="comment">// Found a forward:: entry in a superclass.</span></span><br><span class="line">            <span class="comment">// Stop searching, but don&#x27;t cache yet; call method</span></span><br><span class="line">            <span class="comment">// resolver for this class first.</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fastpath(imp)) &#123;</span><br><span class="line">            <span class="comment">// Found the method in a superclass. Cache it in this class.</span></span><br><span class="line">            <span class="keyword">goto</span> done;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// No implementation found. Try method resolver once.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (slowpath(behavior &amp; LOOKUP_RESOLVER)) &#123;</span><br><span class="line">        behavior ^= LOOKUP_RESOLVER;</span><br><span class="line">        <span class="keyword">return</span> resolveMethod_locked(inst, sel, cls, behavior);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> done:</span><br><span class="line">    log_and_fill_cache(cls, imp, sel, inst, curClass);</span><br><span class="line">    runtimeLock.unlock();</span><br><span class="line"> done_nolock:</span><br><span class="line">    <span class="keyword">if</span> (slowpath((behavior &amp; LOOKUP_NIL) &amp;&amp; imp == forward_imp)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> imp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果传入的behavior是<code>LOOKUP_INITIALIZE</code>并且没有被初始化，就会进入<code>initializeAndLeaveLocked</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initializeAndLeaveLocked -&gt; initializeAndMaybeRelock -&gt; initializeNonMetaClass -&gt; callInitialize</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> initializeNonMetaClass(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(!cls-&gt;isMetaClass());</span><br><span class="line"></span><br><span class="line">    Class supercls;</span><br><span class="line">    <span class="type">bool</span> reallyInitialize = <span class="literal">NO</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure super is done initializing BEFORE beginning to initialize cls.</span></span><br><span class="line">    <span class="comment">// See note about deadlock above.</span></span><br><span class="line">    supercls = cls-&gt;superclass;</span><br><span class="line">    <span class="keyword">if</span> (supercls  &amp;&amp;  !supercls-&gt;isInitialized()) &#123;</span><br><span class="line">        initializeNonMetaClass(supercls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> callInitialize(Class cls)</span><br><span class="line">&#123;</span><br><span class="line">    ((<span class="type">void</span>(*)(Class, SEL))objc_msgSend)(cls, <span class="keyword">@selector</span>(initialize));</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>initializeNonMetaClass</code>对<code>superclass</code>进行了递归，如果存在父类，则先调用父类的方法<br>而<code>callInitialize</code>方法用到了消息发送<code>objc_msgSend</code>，根据消息发送机制，如果子类没有找到实现的方法，会到父类里面查找，找到方法，则调用，所以，如果多个子类没有实现initialize，而父类实现了，在不同的子类初始化的时候都会调用父类的<code>initialize</code>方法，导致<code>initialize</code>被调用多次</p><ol><li>第一次使用的时候（objc_msgSend）调用</li><li>先调用父类<code>initialize</code>，再调用子类的</li><li>调用方法使用<code>objc_msgSend</code>，如果子类没有实现<code>initialize</code>，会调用父类的<code>initialize</code>（存在多次调用的问题）</li><li>由于使用<code>objc_msgSend</code>调用，与普通方法一样，分类的<code>initialize</code>方法会先找到，相当于覆盖类的<code>initialize</code>方法，顺序与编译顺序相反（后编译的分类方法会被加到前面）</li></ol>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS逆向】为Tweak插件添加设置项</title>
      <link href="/2019-10-12/ios-tweak-preference/"/>
      <url>/2019-10-12/ios-tweak-preference/</url>
      
        <content type="html"><![CDATA[<p><code>THEOS</code>提供了<code>iphone/preference_bundle_modern</code>工具，可以为插件添加设置项，该设置项会被打包成bundle并和tweak插件合并打包到<code>deb</code>文件中</p><span id="more"></span><img src="/images/post/tweak-preference-entry.png" class="" width="300"><h2 id="创建preference-bundle"><a href="#创建preference-bundle" class="headerlink" title="创建preference bundle"></a>创建preference bundle</h2><p>先进入我们tweak插件的目录，然后通过<code>nic.pl</code>创建<code>preference_bundle_modern</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ nic.pl</span><br><span class="line">NIC 2.0 - New Instance Creator</span><br><span class="line">------------------------------</span><br><span class="line">  [1.] iphone/activator_event</span><br><span class="line">  [2.] iphone/application_modern</span><br><span class="line">  [3.] iphone/application_swift</span><br><span class="line">  [4.] iphone/flipswitch_switch</span><br><span class="line">  [5.] iphone/framework</span><br><span class="line">  [6.] iphone/library</span><br><span class="line">  [7.] iphone/preference_bundle_modern</span><br><span class="line">  [8.] iphone/tool</span><br><span class="line">  [9.] iphone/tool_swift</span><br><span class="line">  [10.] iphone/tweak</span><br><span class="line">  [11.] iphone/xpc_service</span><br><span class="line">Choose a Template (required): 7</span><br><span class="line">Project Name (required): testprereference</span><br><span class="line">Package Name [com.yourcompany.testprereference]: com.bomo.testprereference</span><br><span class="line">Author/Maintainer Name [bomo]:</span><br><span class="line">[iphone/preference_bundle_modern] Class name prefix (three or more characters unique to this project) [XXX]: BM</span><br><span class="line">Instantiating iphone/preference_bundle_modern <span class="keyword">in</span> testprereference/...</span><br><span class="line">Adding <span class="string">&#x27;testprereference&#x27;</span> as an aggregate subproject <span class="keyword">in</span> Theos makefile <span class="string">&#x27;Makefile&#x27;</span>.</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>生成下面<code>testprereference</code>文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- control</span><br><span class="line">- Makefile</span><br><span class="line">- Tweak.x</span><br><span class="line">- tweaktest</span><br><span class="line">- testprereference</span><br><span class="line">        | - Resources</span><br><span class="line">                | - Info.plist</span><br><span class="line">                | - Root.plist              配置设置页面Root页面（从entry.plist进入）</span><br><span class="line">        | - entry.plist                     定义在设置页面的入口按钮和文字</span><br><span class="line">        | - Makefile</span><br><span class="line">        | - BMRootListController.h</span><br><span class="line">        | - BMRootListController.m          Root页面绑定的控制器，可以在这里实现action事件</span><br></pre></td></tr></table></figure><h3 id="图标处理"><a href="#图标处理" class="headerlink" title="图标处理"></a>图标处理</h3><p>图标放在<code>Resources</code>目录下大小为<code>29*29</code>，可以使用2&#x2F;3倍图</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">testprereference</span><br><span class="line">        | - Resources</span><br><span class="line">                | - icon.png</span><br><span class="line">                | - icon@2x.png</span><br><span class="line">                | - icon@3x.png</span><br></pre></td></tr></table></figure><h3 id="entry-plist"><a href="#entry-plist" class="headerlink" title="entry.plist"></a>entry.plist</h3><p>我们看一下设置入口配置的定义<code>entry.plist</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>entry<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>bundle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>testprereference<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- cell类型 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>PSLinkCell<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 详情页绑定的控制器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>BMRootListController<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图标，放在Resources目录下，可以是icon@3x.png --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>icon<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>icon.png<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否绑定控制器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>isController<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 显示的文本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">key</span>&gt;</span>label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>测试设置<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编译后可以打开<code>设置.app</code>可以看到该项，如上图，接下来我们配置设置主页面<code>Root.plist</code></p><h3 id="Root-plist"><a href="#Root-plist" class="headerlink" title="Root.plist"></a>Root.plist</h3><p>定义设置主页面的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>items<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>PSGroupCell<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>分组1<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- cell类型：开关类型 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>PSSwitchCell<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 默认值：true --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>default<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- userdefault关联的bundleId --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>defaults<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.bomo.testprereference<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 关联的userDefault的key --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>key<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>testpreferenceMainSwitch<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 显示的文本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>插件开关<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 当值改变的时候回发出通知 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>PostNotification<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.bomo.testprereference/reloadSettings<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>PSButtonCell<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 关联的事件，在BMRootListController定义 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>action<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>openHomePage<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按钮颜色 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>isDestructive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按钮文本 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">key</span>&gt;</span>label<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">string</span>&gt;</span>打开项目主页<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- navigationbar标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>title<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>测试插件<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编译后可以查看效果</p><img src="/images/post/tweak-preference-root.png" class="" width="300"><h3 id="RootListController"><a href="#RootListController" class="headerlink" title="RootListController"></a>RootListController</h3><p>关联的controller<code>BMRootListController</code>实现<code>PSButtonCell</code>绑定的action</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">BMRootListController</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)openHomePage &#123;</span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@&quot;https://blog.bombox.org&quot;</span>];</span><br><span class="line">    [<span class="built_in">UIApplication</span>.sharedApplication openURL:url options:@&#123;&#125; completionHandler:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="读取配置"><a href="#读取配置" class="headerlink" title="读取配置"></a>读取配置</h2><p>在<code>Root.plist</code>里面，对于每一个设置项，<a href="https://iphonedevwiki.net/index.php/Preferences_specifier_plist"><code>这里</code></a>有详细的说明</p><p><img src="/images/post/preference_specifier_generalkeys.png" alt="_"></p><p>其中有两个属性</p><ul><li>defaults：设置UserDefault关联的bundleId</li><li>key：设置关联UserDefaults的key，例如PSSwitchCell开关变化的时候，会把值保存到plist文件里面</li></ul><p>如上面的设置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- userdefault关联的bundleId --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>defaults<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>com.bomo.testprereference<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 关联的userDefault的key --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>key<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>testpreferenceMainSwitch<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以<code>NSUserDefault</code>在bundle的程序中读取（如：<code>BMRootListController</code>）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *bundleId = <span class="string">@&quot;com.bomo.testprereference&quot;</span>;</span><br><span class="line"><span class="built_in">NSString</span> *switchStatusKey = <span class="string">@&quot;testpreferenceMainSwitch&quot;</span>;</span><br><span class="line"><span class="built_in">NSDictionary</span> *bundleDefaults = [[<span class="built_in">NSUserDefaults</span> standardUserDefaults] persistentDomainForName:bundleId];</span><br><span class="line"><span class="type">BOOL</span> isSwitchOn = [[bundleDefaults objectForKey:switchStatusKey] boolValue];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, @(isSwitchOn));</span><br></pre></td></tr></table></figure><p>在Tweak项目中无法使用<code>NSUserDefault</code>的方式读取配置，我们的配置会被保存在<code>/var/mobile/Library/Preferences/&#123;bundle_id&#125;.plist</code>，我们在tweak插件中，可以通过该文件读取到设置的值，<strong>但不要代码中写入值</strong></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *bundleId = <span class="string">@&quot;com.bomo.testprereference&quot;</span>;</span><br><span class="line"><span class="built_in">NSString</span> *plistPath = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@&quot;/var/mobile/Library/Preferences/%@.plist&quot;</span>, bundleId];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSDictionary</span> *settings = [[<span class="built_in">NSDictionary</span> alloc] initWithContentsOfFile:plistPath];</span><br><span class="line"><span class="type">BOOL</span> isOn = [settings[<span class="string">@&quot;testpreferenceMainSwitch&quot;</span>] boolValue];</span><br></pre></td></tr></table></figure><h2 id="监听设置变化"><a href="#监听设置变化" class="headerlink" title="监听设置变化"></a>监听设置变化</h2><p>通过下面方法监听系统通知</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFNotificationCenterAddObserver</span>(<span class="built_in">CFNotificationCenterGetDarwinNotifyCenter</span>(),        <span class="comment">// 系统的notifycenter，固定</span></span><br><span class="line">                    <span class="literal">NULL</span>,</span><br><span class="line">                    reloadSettings,                                                 <span class="comment">// 回调函数</span></span><br><span class="line">                    <span class="built_in">CFSTR</span>(<span class="string">&quot;com.bomo.testprereference/reloadSettings&quot;</span>),              <span class="comment">// 通知Key</span></span><br><span class="line">                    <span class="literal">NULL</span>,</span><br><span class="line">                    <span class="built_in">CFNotificationSuspensionBehaviorCoalesce</span>);</span><br></pre></td></tr></table></figure><p>通知的key在配置cell的时候定义（<code>Root.plist</code>）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- cell类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>cell<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>PSSwitchCell<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- 当值改变的时候回发出通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>PostNotification<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.bomo.testprereference/reloadSettings<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br></pre></td></tr></table></figure><p>监听函数</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">void</span> reloadSettings(<span class="built_in">CFNotificationCenterRef</span> center, <span class="type">void</span> *observer, <span class="built_in">CFStringRef</span> name, <span class="keyword">const</span> <span class="type">void</span> *object, <span class="built_in">CFDictionaryRef</span> userInfo) &#123;</span><br><span class="line">    <span class="comment">// reload setting，这里需要重新读取配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>插件编译打包后，preferencebundle会被编译成bundle放到deb里面，<code>PreferenceLoaders</code>是MobileSubstrate其中的一个工具，可以把tweak扩展PreferenceBundles注入到iOS的设置中</p><ul><li>入口文件<code>entry.plist</code>会被装到<code>/Library/PreferenceLoader/Preferences</code></li><li>我们编译好的<code>preference bundle</code>（可执行文件和资源）会被安装到<code>/Library/PreferenceBundles</code>下面</li><li>而配置数据文件<code>&#123;bundle_id&#125;.plist</code>，会被存放在<code>/var/mobile/Library/Preferences/</code>目录下</li></ul><p>在编译的时候可能会报下面问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ld: warning: directory not found <span class="keyword">for</span> option <span class="string">&#x27;-F/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS13.4.sdk/System/Library/PrivateFrameworks&#x27;</span></span><br><span class="line">ld: framework not found Preferences</span><br></pre></td></tr></table></figure><p>这是由于<code>Preferences</code>是私有库，我们可以从<a href="https://github.com/theos/sdks"><code>theos/sdk</code></a>找到<a href="https://github.com/theos/sdks/tree/master/iPhoneOS11.2.sdk/System/Library/PrivateFrameworks/Preferences.framework"><code>Preferences.framework</code></a>，下载下来放到<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS.sdk/System/Library/PrivateFrameworks</code>，这样就可以正常引用了</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://iphonedevwiki.net/index.php/Preferences_specifier_plist">Preferences_specifier_plist</a></li><li><a href="https://iphonedevwiki.net/index.php/PreferenceLoader">PreferenceLoader</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建自己的Cydia源</title>
      <link href="/2019-10-10/make-cydia-source/"/>
      <url>/2019-10-10/make-cydia-source/</url>
      
        <content type="html"><![CDATA[<p>对于自己开发的插件，也需要使用软件源来维护和备份，可以向其他源一样，直接安装插件，这个记录一下搭建的过程</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>创建一个目录 <code>cydia</code></li><li>在<code>cydia</code>里面再创建一个目录<code>debs</code>，把所有的插件都放到里面</li><li>新建一个文本文件<code>Release</code>，用于描述源信息</li><li>在<code>cydia</code>添加一个图标<code>CydiaIcon.png</code>，在软件源列表显示</li></ol><p>目录如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- cydia</span><br><span class="line">    |- CydiaIcon.png                    源图标</span><br><span class="line">    |- Release                          描述源信息</span><br><span class="line">    |- debs                             插件</span><br><span class="line">        |- com.bomo.tweaksb_0.0.1-7_iphoneos-arm.deb</span><br><span class="line">        |- com.bomo.tweakjianshu_0.0.1-7_iphoneos-arm.deb</span><br></pre></td></tr></table></figure><p><code>Release</code> 文件如下</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Origin: BigBoss</span><br><span class="line">Label: BigBoss</span><br><span class="line">Suite: stable</span><br><span class="line">Version: 1.0</span><br><span class="line">Codename: BigBoss</span><br><span class="line">Support: http://cydia.saurik.com/support/*</span><br><span class="line">Architectures: darwin-arm iphoneos-arm</span><br><span class="line">Components: main</span><br><span class="line">Description: apps &amp; tweaks</span><br><span class="line">MD5Sum:</span><br><span class="line">  be8806290d5904cdf45b542706f6a3ad 165020 main/binary-darwin-arm/Packages</span><br><span class="line">  03026ac993187b0eecae50466f64fb3c 35049 main/binary-darwin-arm/Packages.gz  </span><br></pre></td></tr></table></figure><p><code>Release</code>相关说明</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">必须</span><br><span class="line">Origin: 软件源名称，可以使用中文（Cydia的软件源列表中显示的标题）</span><br><span class="line">Label:  同上，也可以使用中文</span><br><span class="line">Suite: 软件源的类型，比如正式源，测试源等，可以分别用stable, beta, unstable等来表示，一般填stable就可以了</span><br><span class="line">Version: 版本号，这个其实不重要，随便填，一般都是写1.0</span><br><span class="line">Codename: 代码代号，比如BigBoss的就写BigBoss，威锋的就写WeiPhone，也没什么限制，只能用英文</span><br><span class="line">Architectures: 结构。iPhone平台统一写iphoneos-arm</span><br><span class="line">Components: main</span><br><span class="line">Description: 软件介绍，可以使用中文和html代码，具体能使用哪些代码在下面会介绍。</span><br><span class="line"></span><br><span class="line">可选</span><br><span class="line">Support: 支持，没什么作用，除非特别需要，否则可以不要这个。</span><br><span class="line">MD5Sum: 不是必须的，但如果Packages文件位置不与Release文件在同一目录下，则必须有此项。另外，如果需要签名Release文件，也必须有这个。关于MD5Sum的格式，在下文也会介绍。</span><br></pre></td></tr></table></figure><h2 id="打包插件"><a href="#打包插件" class="headerlink" title="打包插件"></a>打包插件</h2><p>接下来我们需要 linux 环境，并且需要安装<code>dpkg-dev</code>，我这里使用 docker 创建的环境，其他 linux 环境也可以</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新系统源</span></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装dpkg-dev</span></span><br><span class="line">apt-get install dpkg-dev</span><br></pre></td></tr></table></figure><p>把我们准备好的文件拷贝到 linux 系统</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> ~/Desktop/cydia 75119aae5029:/var/cydia</span><br></pre></td></tr></table></figure><p>生成Packages</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入我们的文件目录</span></span><br><span class="line"><span class="built_in">cd</span> /var/cydia</span><br><span class="line"></span><br><span class="line"><span class="comment"># 扫描插件到 Package</span></span><br><span class="line">dpkg-scanpackages debs /dev/null &gt; Packages</span><br><span class="line"></span><br><span class="line">tar zcvf Packages.gz Packages</span><br><span class="line">bzip2 -k Packages Packages.bz2</span><br></pre></td></tr></table></figure><p>上面步骤生成三个文件</p><ul><li>Package</li><li>Packages.bz2</li><li>Package.gz</li></ul><p>接下来是先生成一个密钥</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure><p>提示输入<code>Email</code>和<code>Real name</code>，输入密码，生成过程可能需要等一会</p><p>签名 Package</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg -abs -r <span class="string">&quot;你刚才的输入的 Real name&quot;</span> -o Release.gpg Release</span><br></pre></td></tr></table></figure><p>输入密码，生成<code>Release.gpg</code>，文件目录如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- cydia</span><br><span class="line">    |- CydiaIcon.png                    源图标</span><br><span class="line">    |- Release                          描述源信息</span><br><span class="line">    |- debs                             插件</span><br><span class="line">        |- com.bomo.tweaksb_0.0.1-7_iphoneos-arm.deb</span><br><span class="line">        |- com.bomo.tweakjianshu_0.0.1-7_iphoneos-arm.deb</span><br><span class="line">        |- Release.gpg</span><br><span class="line">    |- Packages</span><br><span class="line">    |- Packages.bz2</span><br><span class="line">    |- Packages.gz</span><br><span class="line">    |- Release.gpg</span><br></pre></td></tr></table></figure><p>接下来把整个<code>cydia</code>文件夹放到可以被 web 访问到的地方，访问的路径就是源地址，如<code>http://192.168.0.3:8080/cydia</code>，然后可以添加到 <code>Cydia</code> 安装插件了</p><img src="/images/post/cydia-source-list.png" class="" width="300" title="cydia-source-list"><img src="/images/post/cydia-myrepo-package-list.png" class="" width="300" title="cydia-myrepo-package-list"><img src="/images/post/cydia-myrepo-tweak.png" class="" width="300" title="cydia-myrepo-tweak"><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>如果有 deb 更新，重新执行一下上面命令重新导出即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> cydia;</span><br><span class="line"><span class="comment"># 删除原来的 package</span></span><br><span class="line"><span class="built_in">rm</span> Packages; <span class="built_in">rm</span> Packages.gz; <span class="built_in">rm</span> Packages.bz2;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成新的package</span></span><br><span class="line">dpkg-scanpackages debs /dev/null &gt; Packages &amp;&amp; tar zcvf Packages.gz Packages &amp;&amp; bzip2 -k Packages Packages.bz2</span><br></pre></td></tr></table></figure><p>然后替换原来的文件即可，在 Cydia 就会收到更新</p><img src="/images/post/cydia-repo-update.png" class="" width="300" title="cydia-repo-update"><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol><li><a href="http://www.saurik.com/id/7">http://www.saurik.com/id/7</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识ARM64汇编</title>
      <link href="/2019-10-08/ios-arm64-asm/"/>
      <url>/2019-10-08/ios-arm64-asm/</url>
      
        <content type="html"><![CDATA[<p>所有的程序，最终编译为机器（汇编）代码，运行起来，本质都是操作CPU的寄存器和内存，了解了寄存器和内存的操作，就能知道程序具体做了什么</p><span id="more"></span><p>汇编是依赖机器架构的，不同的CPU的指令不同</p><p>iOS汇编</p><ul><li>真机：amr64，GNU 汇编</li><li>模拟器：x86，AT&amp;T 汇编</li></ul><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>CPU运行时用于临时存储的数据，都会放到寄存器中</p><h3 id="通用寄存器-数据地址寄存器"><a href="#通用寄存器-数据地址寄存器" class="headerlink" title="通用寄存器(数据地址寄存器)"></a>通用寄存器(数据地址寄存器)</h3><p>主要用户存储临时数据，例如加法运算，地址操作等</p><ul><li>64bit 的：0x ~ x28，有29个寄存器</li><li>32bit 的：w0 ~ w28（属于 x0 ~ x28的低32bit）</li></ul><blockquote><p>其中 x0 ~ x7通常用来存放函数的参数，超过的食用堆栈来存放<br>x0 通常用来存放函数的返回值</p></blockquote><p>通过 lldb 存取寄存器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取所有寄存器地址的值</span></span><br><span class="line">registe <span class="built_in">read</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取寄存器地址为x0的值</span></span><br><span class="line">registe <span class="built_in">read</span> x0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向寄存器地址为x0写入值</span></span><br><span class="line">registe write x0 0x1100000000000011</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取寄存器x0的值</span></span><br><span class="line">registe <span class="built_in">read</span> x0</span><br><span class="line">    x0 = 0x1100000000000011</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取寄存器 w0的值(相当于取 x0 的低32bit)</span></span><br><span class="line">registe <span class="built_in">read</span> w0</span><br><span class="line">    x0 = 0x00000011</span><br></pre></td></tr></table></figure><p>再xcode查看寄存器的值</p><p><img src="/images/post/xcode-show-register.png" alt=" "></p><h3 id="PC寄存器-program-counter"><a href="#PC寄存器-program-counter" class="headerlink" title="PC寄存器(program counter)"></a>PC寄存器(program counter)</h3><p>PC寄存器为指令指针寄存器，用于存放当前CPU要读取的指令的地址，PC寄存器指到哪，CPU执行到哪</p><p><img src="/images/post/pc-register.png" alt=" "></p><h3 id="SP寄存器（stack-pointer-registers）"><a href="#SP寄存器（stack-pointer-registers）" class="headerlink" title="SP寄存器（stack pointer registers）"></a>SP寄存器（stack pointer registers）</h3><p>是一个指向堆栈顶部的寄存器，通常用于为方法执行开辟空间和回收空间，进入方法入栈，离开方法出栈，例如下面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Test`main:</span><br><span class="line">    0x100dc3f9c &lt;+0&gt;:  sub    sp, sp, #0x10             ; sp的指针往下移 0x10，开辟栈空间用于存放临时变量</span><br><span class="line">    0x100dc3fa0 &lt;+4&gt;:  str    wzr, [sp, #0xc]</span><br><span class="line">    0x100dc3fa4 &lt;+8&gt;:  str    w0, [sp, #0x8]</span><br><span class="line">    0x100dc3fa8 &lt;+12&gt;: str    x1, [sp]</span><br><span class="line">-&gt;  0x100dc3fac &lt;+16&gt;: mov    w0, #0x1</span><br><span class="line">    0x100dc3fb0 &lt;+20&gt;: add    sp, sp, #0x10             ; sp的指针往上移 0x10，回收栈空间</span><br><span class="line">    0x100dc3fb4 &lt;+24&gt;: ret</span><br></pre></td></tr></table></figure><h3 id="CPSR状态寄存器（current-program-status-register）"><a href="#CPSR状态寄存器（current-program-status-register）" class="headerlink" title="CPSR状态寄存器（current program status register）"></a>CPSR状态寄存器（current program status register）</h3><p>CPSR是状态寄存器，用于存放程序运行中一些状态标识。其他寄存器是用来存放数据的，而CPSR寄存器是按位起作用的，它的每一位都有专门的含义，通常存放比较结果，溢出等信息，下面为C语言判断语句的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bb&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的汇编代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line">cmp    w8, #0xa                  ; =0xa                      ; 比较w8和#0xa的值，w8就是a，比较结果会放到CPSR寄存器中</span><br><span class="line">b.ne   0x104037f64               ; &lt;+60&gt; at main.m:16:9      ; 如果不等，则跳到 0x104037f64，通过CPSR的状态判断</span><br><span class="line"></span><br><span class="line">adrp   x0, 0</span><br><span class="line">add    x0, x0, #0xfb0            ; =0xfb0</span><br><span class="line">bl     0x104037f80               ; symbol stub for: printf</span><br><span class="line">b      0x104037f70               ; &lt;+72&gt; at main.m:18:1      ; 跳到 0x104037f70</span><br><span class="line"></span><br><span class="line">adrp   x0, 0</span><br><span class="line">add    x0, x0, #0xfb3            ; =0xfb3</span><br><span class="line">bl     0x104037f80               ; symbol stub for: printf</span><br><span class="line"></span><br><span class="line">ldur   w0, [x29, #-0x4]                                      ; 判断外</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="高速缓存"><a href="#高速缓存" class="headerlink" title="高速缓存"></a>高速缓存</h2><p>由于CPU读取指令需要从内存中读取，而内存的读写速度要远远低于寄存器的速度，为了拟补这里的时间差，通常CPU还会提供一个速度介于内存和寄存器的高速缓存，再程序运行前，会先将要执行的指令和数据提前读取到高速缓存中，而CPU从高速缓存中读取指令来执行</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>汇编使用<code>;</code>分号开头表示注释</p><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>声名 test 函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">; global 用于声明函数为公开的，可以被外部调用</span><br><span class="line">; 汇编语言的函数比上层函数多一个下划线（外部调用为 test），如果是内部使用的函数，可以不加下划线</span><br><span class="line">.global _test, _add, _sub</span><br><span class="line"></span><br><span class="line">_test:</span><br><span class="line">; 赋值操作: x0 = 0x8</span><br><span class="line">mov x0 #0x8</span><br><span class="line">; 赋值赋值: x1 = x0</span><br><span class="line">mov x1, x0</span><br><span class="line">; 函数返回: return</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><h3 id="mov：赋值操作"><a href="#mov：赋值操作" class="headerlink" title="mov：赋值操作"></a>mov：赋值操作</h3><p>mov指令只允许操作寄存器的，不允许直接操作内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; 把 0x8 赋值给寄存器 x0</span><br><span class="line">mov x0, #0x8</span><br></pre></td></tr></table></figure><h3 id="add-加法运算"><a href="#add-加法运算" class="headerlink" title="add: 加法运算"></a>add: 加法运算</h3><p>add只能对寄存器做加法，内存中的数据必须先放到寄存器中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; x1 = x1 + x0</span><br><span class="line">add x1, x0</span><br></pre></td></tr></table></figure><h3 id="sub：减法"><a href="#sub：减法" class="headerlink" title="sub：减法"></a>sub：减法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; sp的指针往下移 0x20</span><br><span class="line">sub    sp, sp, #0x20  </span><br><span class="line"></span><br><span class="line">; sp的指针往上移 0x20</span><br><span class="line">add    sp, sp, #0x20</span><br></pre></td></tr></table></figure><h3 id="ret指令"><a href="#ret指令" class="headerlink" title="ret指令"></a>ret指令</h3><p>返回函数调用出，相当于c语言的return，与<code>bl</code>和<code>lr</code>配合使用，本质是将lr寄存器的值赋值给pc寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret</span><br></pre></td></tr></table></figure><h3 id="cmp：比较两个数（减法）"><a href="#cmp：比较两个数（减法）" class="headerlink" title="cmp：比较两个数（减法）"></a>cmp：比较两个数（减法）</h3><p>比较结果会被放在 cpsr（程序状态寄存器里面），cpsr使用标识位控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov x0, #0x3</span><br><span class="line">mov x1, #0x2</span><br><span class="line">cmp x0, x1</span><br></pre></td></tr></table></figure><h3 id="b跳转指令"><a href="#b跳转指令" class="headerlink" title="b跳转指令"></a>b跳转指令</h3><p>相当于 C 语言的 goto</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">; 直接跳到 mycode</span><br><span class="line">b mycode</span><br><span class="line">mov x0, #0x5</span><br><span class="line">mycode:</span><br><span class="line">mov x1, #0x6</span><br></pre></td></tr></table></figure><p><code>b</code>指令可以带条件，通常跟 cmp 配合使用</p><ul><li>eq: 相等</li><li>ne：不相等</li><li>gt：大于</li><li>lt：小于</li><li>ge：大于或等于</li><li>le：小于或等于</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mov x0, #0x1</span><br><span class="line">mov x1, #0x2</span><br><span class="line">; 比较 x0, x1</span><br><span class="line">cmp x0, x1</span><br><span class="line"></span><br><span class="line">; 如果x0 = x1就跳转</span><br><span class="line">beq mycode</span><br><span class="line">; 如果x0 &gt; x1则跳转</span><br><span class="line">bgt mycode</span><br></pre></td></tr></table></figure><h3 id="bl指令"><a href="#bl指令" class="headerlink" title="bl指令"></a>bl指令</h3><p>可以带返回的跳转指令，跳转执行完成后会回到调用的地方继续往下执行，相当于函数调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">privatecode:</span><br><span class="line">mov x0, #0x1</span><br><span class="line">mov x2, #0x2</span><br><span class="line">add x2, x0, x1</span><br><span class="line">ret</span><br><span class="line"></span><br><span class="line">_test:</span><br><span class="line">; 在 privatecode ret 之后，回继续走下面的语句，如果是 b 指令的话，不会走下面的语句</span><br><span class="line">bl privatecode</span><br><span class="line">mov x3, #0x2</span><br><span class="line">mov x4, #0x4</span><br></pre></td></tr></table></figure><blockquote><p>bl 会将吓一跳指令的地址存储到 lr（x30）寄存器中</p></blockquote><h3 id="ldr-x2F-ldur-x2F-ldp（从内存读取数据）"><a href="#ldr-x2F-ldur-x2F-ldp（从内存读取数据）" class="headerlink" title="ldr&#x2F;ldur&#x2F;ldp（从内存读取数据）"></a>ldr&#x2F;ldur&#x2F;ldp（从内存读取数据）</h3><p>如果偏移地址是正数，用<code>ldr</code>，如果是负数，用<code>ldur</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">; 从x1的地址中读取数据值到 x0 中</span><br><span class="line">ldr x0, [x1]</span><br><span class="line"></span><br><span class="line">; 从[x1 + 0x4]地址读取数据值到 x0 中</span><br><span class="line">ldr x0, [x1, #0x4]</span><br><span class="line"></span><br><span class="line">; 在上面的基础上，加上 x1 = x1 + 0x4 的操作，会改变 x1</span><br><span class="line">ldr x0, [x1, #0x4]!</span><br><span class="line"></span><br><span class="line">ldur x0, [x1, #-0x8]</span><br></pre></td></tr></table></figure><p><code>ldp</code>，读取一对数据到（2个）寄存器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; x1偏移0x4的地址分别读取4个字节到 w1 和 w2</span><br><span class="line">ldp w1, w2, [x1, #0x4]</span><br></pre></td></tr></table></figure><h3 id="str-x2F-stur-x2F-stp（往内存写数据）"><a href="#str-x2F-stur-x2F-stp（往内存写数据）" class="headerlink" title="str&#x2F;stur&#x2F;stp（往内存写数据）"></a>str&#x2F;stur&#x2F;stp（往内存写数据）</h3><p>寄存器在左边，如果偏移地址是正数，用<code>str</code>，如果是负数，用<code>stur</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">; 把 w0的数据写到 x1的地址</span><br><span class="line">str w0, [x1, #0x5]</span><br><span class="line"></span><br><span class="line">stur w0, [x1, #-0x5]</span><br></pre></td></tr></table></figure><p><code>stp</code>: 写入2个寄存器的数据到连续的内存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; x1偏移0x4的地址分别读取4个字节到 w1 和 w2</span><br><span class="line">stp w1, w2, [x1, #-0x5]!</span><br></pre></td></tr></table></figure><h3 id="wzr-x2F-xzr（零寄存器）"><a href="#wzr-x2F-xzr（零寄存器）" class="headerlink" title="wzr&#x2F;xzr（零寄存器）"></a>wzr&#x2F;xzr（零寄存器）</h3><p>里面存储的值为0，不能在lldb中读&#x2F;写，表示清零操作（false, nil, 0）</p><ul><li>wzr（32bit）</li><li>xzr（64bit）</li></ul><h3 id="lr寄存器"><a href="#lr寄存器" class="headerlink" title="lr寄存器"></a>lr寄存器</h3><p><code>lr</code>：存储函数的返回地址，与<code>bl</code>配合使用（bl执行跳转执行指令ret后，会回到调用的地方，就是根据lr存放的地址）</p><h2 id="函数的分类"><a href="#函数的分类" class="headerlink" title="函数的分类"></a>函数的分类</h2><ul><li>叶子函数：内部不再调用其他函数的函数，不用再开辟栈空间</li><li>非叶子函数：函数内部会调用其他的函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> ARM64 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS逆向】Mach-O文件</title>
      <link href="/2019-09-12/ios-mach-o/"/>
      <url>/2019-09-12/ios-mach-o/</url>
      
        <content type="html"><![CDATA[<p>Mach-O是Mach object的缩写，是Mac&#x2F;iOS上用于存储程序、库的标准格式，这里简要解析Mach-O文件格式，结构和一些要点</p><span id="more"></span><h2 id="Mach-O格式"><a href="#Mach-O格式" class="headerlink" title="Mach-O格式"></a>Mach-O格式</h2><p>Mach-O是一个以数据块分组的二进制字节流，这些数据块包含元信息，比如字节顺序、CPU类型、数据块大小等等</p><p>典型的Mach-O文件通常包含三个主要区域</p><ul><li><code>Header</code>: 描述Mach-O文件的基本信息，如标识文件类型，目标架构类型，内存对齐大小，大小端序，加载命令数量，flags信息等</li><li><code>Load commands</code>: 描述文件中每个段的信息（物理内存大小，虚拟内存等信息）</li><li><code>Raw data</code>: 在Load command中定义的segment的原始数据</li></ul><p>如下图</p><img src="/images/post/mach-o-info.png" class="" width="400"><h3 id="查看Mach-O文件结构"><a href="#查看Mach-O文件结构" class="headerlink" title="查看Mach-O文件结构"></a>查看Mach-O文件结构</h3><ol><li><p><code>file</code>: 查看Mach-O文件类型</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hugu为可执行文件</span></span><br><span class="line">file Hugo</span><br></pre></td></tr></table></figure></li><li><p><code>otool</code>：查看Mach-O特定部分和段的内容</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看mach-o header</span></span><br><span class="line">otool -h Hugo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看load command</span></span><br><span class="line">otool -l Hugo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看链接的动态库</span></span><br><span class="line">otool -L Hugo</span><br><span class="line"></span><br><span class="line"><span class="comment"># otool 支持很多参数，查看不同的信息</span></span><br></pre></td></tr></table></figure></li><li><p><code>size</code>：查看段的内存分布</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">size -l -m -x Hugo</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Segment __PAGEZERO: 0x100000000 (vmaddr 0x0 fileoff 0)</span><br><span class="line">Segment __TEXT: 0x1308000 (vmaddr 0x100000000 fileoff 0)</span><br><span class="line">Section __text: 0x104f4cc (addr 0x100005150 offset 20816)</span><br><span class="line">Section __stubs: 0x42d8 (addr 0x10105461c offset 17122844)</span><br><span class="line">Section __stub_helper: 0x42c0 (addr 0x1010588f4 offset 17139956)</span><br><span class="line">Section __objc_methname: 0xbf942 (addr 0x10105cbb4 offset 17157044)</span><br><span class="line">Section __objc_classname: 0x130d2 (addr 0x10111c4f6 offset 17941750)</span><br><span class="line">Section __objc_methtype: 0x1c635 (addr 0x10112f5c8 offset 18019784)</span><br><span class="line">Section __cstring: 0xf26fd (addr 0x10114bc00 offset 18136064)</span><br><span class="line">Section __ustring: 0xd3a0 (addr 0x10123e2fe offset 19129086)</span><br><span class="line">Section __const: 0x2db07 (addr 0x10124b6a0 offset 19183264)</span><br><span class="line">Section __gcc_except_tab: 0x21a80 (addr 0x1012791a8 offset 19370408)</span><br><span class="line">Section __swift5_typeref: 0xc382 (addr 0x10129ac28 offset 19508264)</span><br><span class="line">Section __swift5_fieldmd: 0xb028 (addr 0x1012a6fac offset 19558316)</span><br><span class="line">Section __swift5_builtin: 0x76c (addr 0x1012b1fd4 offset 19603412)</span><br><span class="line">Section __swift5_reflstr: 0x1417d (addr 0x1012b2740 offset 19605312)</span><br><span class="line">Section __swift5_assocty: 0xd38 (addr 0x1012c68c0 offset 19687616)</span><br><span class="line">Section __swift5_proto: 0x624 (addr 0x1012c75f8 offset 19691000)</span><br><span class="line">Section __swift5_types: 0x998 (addr 0x1012c7c1c offset 19692572)</span><br><span class="line">Section __swift5_capture: 0xb524 (addr 0x1012c85b4 offset 19695028)</span><br><span class="line">Section __swift5_protos: 0x50 (addr 0x1012d3ad8 offset 19741400)</span><br><span class="line">Section __dof_RACSignal: 0x37b (addr 0x1012d3b28 offset 19741480)</span><br><span class="line">Section __dof_RACCompou: 0x2e8 (addr 0x1012d3ea3 offset 19742371)</span><br><span class="line">Section __unwind_info: 0x31ce4 (addr 0x1012d418c offset 19743116)</span><br><span class="line">Section __eh_frame: 0x2184 (addr 0x101305e70 offset 19947120)</span><br><span class="line">total 0x1302e97</span><br><span class="line">Segment __DATA: 0x560000 (vmaddr 0x101308000 fileoff 19955712)</span><br><span class="line">Section __got: 0x1190 (addr 0x101308000 offset 19955712)</span><br><span class="line">Section __la_symbol_ptr: 0x2c90 (addr 0x101309190 offset 19960208)</span><br><span class="line">Section __mod_init_func: 0x40 (addr 0x10130be20 offset 19971616)</span><br><span class="line">Section __const: 0x48950 (addr 0x10130be60 offset 19971680)</span><br><span class="line">Section __cfstring: 0x6fea0 (addr 0x1013547b0 offset 20268976)</span><br><span class="line">Section __objc_classlist: 0x68c8 (addr 0x1013c4650 offset 20727376)</span><br><span class="line">Section __objc_nlclslist: 0x2c0 (addr 0x1013caf18 offset 20754200)</span><br><span class="line">Section __objc_catlist: 0x1ef8 (addr 0x1013cb1d8 offset 20754904)</span><br><span class="line">Section __objc_nlcatlist: 0x88 (addr 0x1013cd0d0 offset 20762832)</span><br><span class="line">Section __objc_protolist: 0x11f8 (addr 0x1013cd158 offset 20762968)</span><br><span class="line">Section __objc_imageinfo: 0x8 (addr 0x1013ce350 offset 20767568)</span><br><span class="line">Section __objc_const: 0x3c85f8 (addr 0x1013ce358 offset 20767576)</span><br><span class="line">Section __objc_selrefs: 0x2e430 (addr 0x101796950 offset 24734032)</span><br><span class="line">Section __objc_protorefs: 0x4a8 (addr 0x1017c4d80 offset 24923520)</span><br><span class="line">Section __objc_classrefs: 0x5c00 (addr 0x1017c5228 offset 24924712)</span><br><span class="line">Section __objc_superrefs: 0x39d8 (addr 0x1017cae28 offset 24948264)</span><br><span class="line">Section __objc_ivar: 0xc120 (addr 0x1017ce800 offset 24963072)</span><br><span class="line">Section __objc_data: 0x59c10 (addr 0x1017da920 offset 25012512)</span><br><span class="line">Section __data: 0x1c885 (addr 0x101834530 offset 25380144)</span><br><span class="line">Section __swift_hooks: 0xb8 (addr 0x101850db8 offset 25497016)</span><br><span class="line">Section __bss: 0x12e30 (addr 0x101850e70 offset 0)</span><br><span class="line">Section __common: 0x1b88 (addr 0x101863ca0 offset 0)</span><br><span class="line">total 0x55d825</span><br><span class="line">Segment __LINKEDIT: 0x168000 (vmaddr 0x101868000 fileoff 25509888)</span><br><span class="line">total 0x1019d0000</span><br></pre></td></tr></table></figure></li><li><p>也可以通过<a href="https://github.com/gdbinit/MachOView"><code>MachOView</code></a>查看Segment相关信息</p><p> <img src="/images/post/machoview-demo.png" alt="_"></p></li><li><p>还有一个功能非常强大的二进制编辑器<a href="https://www.sweetscape.com/010editor/"><code>010Editor</code></a>，需要安装一下MachO模板，与MachOView类似，使用起来也非常方便</p><p> <img src="/images/post/010editor-demo.png" alt="_"></p></li></ol><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>我们通过machoview查看</p><p><img src="/images/post/macho-header.png" alt="_"></p><table><thead><tr><th>名称</th><th>解释</th></tr></thead><tbody><tr><td>magic</td><td>Mach-O魔数，FAT:0xcafebabe, ARMv7:0xfeedface, ARM64:0xfeedfacf</td></tr><tr><td>cputype、cpusubtype</td><td>CPU架构及子版本</td></tr><tr><td>filetype</td><td>mach-o文件类型</td></tr><tr><td>ncmds</td><td>加载命令的数量</td></tr><tr><td>sizeofcmds</td><td>所有加载命令的大小</td></tr><tr><td>flags</td><td>dyld加载需要的一些标记</td></tr><tr><td>reserved</td><td>64位保留字段</td></tr></tbody></table><blockquote><p>在Header信息中，flags标志信息有一个标志为<code>MH_PIE</code>（在xnu项目的<code>EXTERNAL_HEADERS/mach-o/loader.h</code>中可以找到），意思是开启<code>ASLR</code></p></blockquote><p>笔者尝试把<code>MH_PIE</code>去掉，然后重签名跑到真机上，发现会闪退</p><h2 id="Mach-O文件类型"><a href="#Mach-O文件类型" class="headerlink" title="Mach-O文件类型"></a>Mach-O文件类型</h2><p>在苹果开源的内核<a href="https://opensource.apple.com/tarballs/xnu/"><code>xnu</code></a>源码中<code>EXTERNAL_HEADERS/mach-o/loader.h</code>可以找到Mach-O文件格式的定义</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MH_OBJECT 0x1  <span class="comment">/* relocatable object file */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_EXECUTE 0x2  <span class="comment">/* demand paged executable file */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_FVMLIB 0x3  <span class="comment">/* fixed VM shared library file */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_CORE  0x4  <span class="comment">/* core file */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_PRELOAD 0x5  <span class="comment">/* preloaded executable file */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_DYLIB 0x6  <span class="comment">/* dynamically bound shared library */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_DYLINKER 0x7  <span class="comment">/* dynamic link editor */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_BUNDLE 0x8  <span class="comment">/* dynamically bound bundle file */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_DYLIB_STUB 0x9  <span class="comment">/* shared library stub for static */</span></span></span><br><span class="line">     <span class="comment">/*  linking only, no section contents */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_DSYM  0xa  <span class="comment">/* companion file with only debug */</span></span></span><br><span class="line">     <span class="comment">/*  sections */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MH_KEXT_BUNDLE 0xb  <span class="comment">/* x86_64 kexts */</span></span></span><br></pre></td></tr></table></figure><p>常见的类型有</p><ul><li>MH_OBJECT<ul><li>目标文件（.o）</li><li>静态库文件（.a）（多个目标文件合并）</li></ul></li><li>MH_EXECUTE：<ul><li>可执行文件，我们编译出来的App的主程序就是该类型</li></ul></li><li>MH_DYLIB：动态库<ul><li>dylib文件</li><li>framework动态库(.framework&#x2F;xx)</li></ul></li><li>MH_DYLINKER<ul><li><code>/usr/lib/dyld</code>：动态链接器</li></ul></li><li>MH_DSYM<ul><li>.dSYM&#x2F;Contents&#x2F;Resources&#x2F;DWARF&#x2F;xx（符号表）</li></ul></li></ul><h3 id="Universal-Binary（通用二进制文件）"><a href="#Universal-Binary（通用二进制文件）" class="headerlink" title="Universal Binary（通用二进制文件）"></a>Universal Binary（通用二进制文件）</h3><p>包含多个CPU架构的二进制文件，在运行时，只会加载对应架构的二进制</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ file jcm</span><br><span class="line">jcm: Mach-O universal binary with 2 architectures: [arm_v7:Mach-O executable arm_v7] [arm64]</span><br><span class="line">jcm (<span class="keyword">for</span> architecture armv7):   Mach-O executable arm_v7</span><br><span class="line">jcm (<span class="keyword">for</span> architecture arm64):   Mach-O 64-bit executable arm64</span><br></pre></td></tr></table></figure><h2 id="Segment"><a href="#Segment" class="headerlink" title="Segment"></a>Segment</h2><p>在machoview的load commands可以看到所有段的</p><p><img src="/images/post/macho-segment.png" alt="_"></p><ul><li>LC_SEGMENT_64：记录一个段，加载后被映射到内存中</li><li>LC_DYLD_INFO_ONLY：记录动态链接的重要信息，动态链接器要根据它来进行地址重定向</li><li>LC_SYMTAB：文件所使用的符号表，符号数，字符串表的偏移量和大小</li><li>LC_DYSYMTAB：动态链接器所使用的符号表，找到后获取间接符号表偏移量</li><li>LC_LOAD_DYLINKER：默认的加载器路径（<code>/usr/bin/dylb</code>）</li><li>LC_UUID: Mach-O文件的唯一标识</li><li>LC_MAIN：程序的入口，动态链接器获取该地址，然后程序跳转到该处运行</li><li>LC_SOURCE_VERSION：构建二进制文件的源代码版本</li><li>LC_VERSION_MIN_IPHONEOS：最低支持系统版本</li><li>LC_ENCRYPTION_INFO_64：文件加密信息，我们判断是否脱壳，就是用了这里的信息</li><li>LC_RPATH：链接器搜索路径列表，主要搜索framework</li><li>LC_FUNCTION_STARTS: 函数其实地址表，调试器货其他程序能判断一个地址是否在该表范围内</li><li>LC_DATA_IN_CODE: 定义在代码内的非指令表</li><li>LC_CODE_SIGNATURE: 代码签名信息</li></ul><h3 id="LC-SEGMENT-64"><a href="#LC-SEGMENT-64" class="headerlink" title="LC_SEGMENT_64"></a>LC_SEGMENT_64</h3><p>图中可以看到，<code>LC_SEGMENT_64</code>段有4个</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">* LC_SEGMENT_64(`__PAGEZERO`)</span><br><span class="line">  * VM Address：0x0000000000000000</span><br><span class="line">  * VM Size：   0x0000000100000000</span><br><span class="line">  * File Offset: 0</span><br><span class="line">  * File Offset: 0</span><br><span class="line">* LC_SEGMENT_64(`__TEXT`)</span><br><span class="line">  * VM Address：0x100000000</span><br><span class="line">  * VM Size：   0x001308000</span><br><span class="line">  * File Offset: 0x000000000</span><br><span class="line">  * File Size:   0x001308000</span><br><span class="line">* LC_SEGMENT_64(`__DATA`)</span><br><span class="line">  * VM Address：0x101308000</span><br><span class="line">  * VM Size：   0x000560000</span><br><span class="line">  * File Offset: 0x001308000</span><br><span class="line">  * File Size:   0x00054C000</span><br><span class="line">* LC_SEGMENT_64(`__LINKEDIT`)</span><br><span class="line">  * VM Address：0x101868000</span><br><span class="line">  * VM Size：   0x000168000</span><br><span class="line">  * File Offset: 0x001854000</span><br><span class="line">  * File Size:   0x000166AB0</span><br></pre></td></tr></table></figure><p>上面可以看出</p><ul><li>PAGEZERO段并不占用文件大小，当mach-o加载到内存时会占用8个字节（64位）</li><li>TEXT段从0开始的，也就是header和loadcommand也属于TEXT段，加载到内存后，排在PAGEZERO后面</li></ul><p><img src="/images/post/macho-load.png" alt="_"></p><h3 id="TEXT段"><a href="#TEXT段" class="headerlink" title="__TEXT段"></a>__TEXT段</h3><p>TEXT段包含可执行的代码和一些只读数据，静态链接器设置该段位可读可执行，进程被允许执行这些代码，但不能修改</p><img src="/images/post/machoview-text.png" class="" width="400"><ul><li>__text：主程序代码</li><li>__stubs: 帮助动态链接库绑定符号</li><li>__const: const关键字修饰的常量</li><li>__cstring: 只读c语言字符串</li><li>__objc_methname: OC方法名</li><li>__objc_classname：OC类名</li><li>__objc_methtype：OC方法类型（方法签名）</li><li>__unwind_info：编译器自动生成，用于确定异常发生时栈所对应的信息</li></ul><h3 id="DATA段"><a href="#DATA段" class="headerlink" title="__DATA段"></a>__DATA段</h3><p>包含了将会被更改的数据，静态链接器设置该段的虚拟内存权限位可读写</p><img src="/images/post/machoview-data.png" class="" width="400"><ul><li>__got: 全局非懒绑定符号指针表</li><li>__la_symbol_ptr: 懒绑定符号指针表</li><li>__mod_init_func：C++类的构造函数</li><li>__const：未初始化过的常亮</li><li>__cfstring：CoreFoundation字符串</li><li>__objc_class_list：OC类列表</li><li>__objc_nlclslist：实现了<code>+load</code>方法的OC类列表</li><li>__objc_catlist：OC分类列表</li><li>__objc_protolist：OC协议列表</li><li>__objc_imageinfo：镜像信息，可用它区别Objective1.0与2.0</li><li>__objc_const：OC初始化过的常量</li><li>__objc_selrefs：OC选择器引用列表</li><li>__objc_protorefs：OC协议引用列表</li><li>__objc_classrefs：OC类引用列表</li><li>__objc_superrefs: OC父类引用列表</li><li>__objc_ivar: OC类的实例变量</li><li>__objc_data: OC初始化过的变量</li><li>__data：实际初始化数据段</li><li>__common：未初始化过的符号声明</li><li>__bss：未初始化的全局变量</li></ul><h3 id="LINKEDIT"><a href="#LINKEDIT" class="headerlink" title="__LINKEDIT"></a>__LINKEDIT</h3><p>包含动态链接库的原始数据，如符号，字符串，重定向表条目等</p><h2 id="dyld"><a href="#dyld" class="headerlink" title="dyld"></a>dyld</h2><p>dyld用于加载以下类型的Mach-O文件，在iOS中，App的可执行文件和动态库都是由dyld负责加载的</p><ul><li>MH_EXECUTE</li><li>MH_DYLIB</li><li>MH_BUNDLE</li></ul><p>关于dyld如何加载mach-o文件，可以参考<a href="https://www.dllhook.com/post/238.html">这里</a></p><h3 id="ASLR（Address-Space-Layout-Randomization）"><a href="#ASLR（Address-Space-Layout-Randomization）" class="headerlink" title="ASLR（Address Space Layout Randomization）"></a>ASLR（Address Space Layout Randomization）</h3><p>iOS4.3开始引入了ASLR技术，地址空间布局随机化，系统在加载Mach-O文件的时候，会随机在头部添加一部分内存空间，从而让Mach-O文件在每次加载到内存时的地址都不相同，是一种针对缓冲区溢出的安全保护技术，通过对堆、栈、共享库映射等线性区布局的随机化，通过增加攻击者预测目的地址的难度，防止攻击者直接定位攻击代码位置，达到阻止溢出攻击的目的的一种技术</p><p>ASLR 会在程序每次载入的时候随机在原来的基础上添加随机的内存区域，已达到每次运行的程序地址都不一样，相当于<code>__PAGEZERO</code>段的位置后移了</p><p>我们可以在<code>lldb</code>调试器查看程序每个模块的偏移大小<code>ASLR</code>偏移的大小</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -o 表示虚拟地址偏移量，-f 表示路径</span></span><br><span class="line">(lldb) image list -o -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line">[  0] 0x00000000003f8000 /private/var/containers/Bundle/Application/943EF984-E5F8-45FC-A466-99474D559B68/Test.app/Test(0x00000001003f8000)</span><br></pre></td></tr></table></figure><ul><li><code>0x00000000003f8000</code> 为主程序Test的内存偏移地址，这个偏移地址每次启动App都是随机的</li><li><code>0x00000001003f8000</code> 为主程序__TEXT段的起始地址，即ASLR偏移地址+__PAGEZERO的大小</li></ul><p>由于MachO文件加载到内存中的数据和MachO文件的数据是一致的，连续的，所以，我们可以通过ASLR的偏移地址加上在MachO静态分析的地址，得到运行时的地址，我们再Hopper查看到的地址，其实就是没有算上ASLR，即上面的<code>0x00000000003f8000</code></p><p><img src="/images/post/hopper-method-address.png" alt="_"></p><p>再Hopper搜索<code>[ViewController test:]</code>方法，可以看到该函数的地址为<code>0x0000000100005744</code>，根据上面得到的ASLR的偏移地址，就可以算出函数在内存中的地址，由于Hopper显示的地址是算上<code>__PAGEZERO</code>段的，所以直接加上即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x00000000003f8000 + 0x0000000100005744</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>了解Mach-O可以帮助我们理解dyld的加载Mach-O的过程以及与Mach-O相关的读取或操作，为逆向分析提供更好的思路</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS逆向】LLDB动态调试</title>
      <link href="/2019-08-17/ios-lldb-debug/"/>
      <url>/2019-08-17/ios-lldb-debug/</url>
      
        <content type="html"><![CDATA[<p>正向开发的时候通常是使用xcode对app进行调试，我们先来看看xcode的调试流程</p><ul><li>手机启动app进程</li><li>手机启动<code>debugservice</code>服务，debugserver附加到App进程</li><li>调试器<code>lldb</code>通过连接<code>debugservice</code>进行调试</li></ul><span id="more"></span><img src="/images/post/xcode-lldb-debug.png" class="" width="500"><h2 id="debugservice"><a href="#debugservice" class="headerlink" title="debugservice"></a>debugservice</h2><p>Xcode调试用到的<code>debugservice</code>位于<code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport/13.2/DeveloperDiskImage.dmg</code>这个dmg下面，打开后可以在<code>usr/bin/debugserver</code>找到</p><p>当手机第一次通过xcode调试时，会把该文件拷贝到手机<code>/Developer/usr/bin/debugserver</code>下，未使用xcode调试过的手机没有该文件，这个程序只能调试通过xcode安装的app，无法调试从商店下载的app，为了调试其他的App，我们需要修改它的权限，把下面权限签到可执行文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.debugapplications<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>get-task-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>task_for_pid-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">key</span>&gt;</span>run-unsigned-code<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用ldid签名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ldid</span></span><br><span class="line">brew install ldid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从原来的debugserver导出权限文件</span></span><br><span class="line">ldid -e debugserver &gt; debugserver.entitlements</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改debugserver.entitlements，换成上面文件的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新签名</span></span><br><span class="line">ldid -Sdebugserver.entitlements debugserver</span><br></pre></td></tr></table></figure><p>得到新的<code>debugserver</code>，传到手机<code>/user/bin/debugserver</code>上，这样可以直接在命令行使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp debugserver root@xx.xx.xx.xx:/user/bin/</span><br></pre></td></tr></table></figure><p>还需要给<code>debugserver</code>添加可执行权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x debugserver</span><br></pre></td></tr></table></figure><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><h3 id="1-debugserver附加到进程"><a href="#1-debugserver附加到进程" class="headerlink" title="1. debugserver附加到进程"></a>1. debugserver附加到进程</h3><p>让<code>debugserver</code>附加到App进程上，指定<code>端口号</code>和<code>进程</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">debugserver 127.0.0.1:端口号 -a 进程<span class="built_in">id</span>/进程名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如调试器附加到微信进程，端口号随机，只要没有被占用都可以</span></span><br><span class="line">debugserver 127.0.0.1:3333 -a WeChat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 附加成功后会等待链接，输出下面字符</span></span><br><span class="line">debugserver-@(<span class="comment">#)PROGRAM:LLDB  PROJECT:lldb-900.3.98</span></span><br><span class="line"> <span class="keyword">for</span> arm64.</span><br><span class="line">Attaching to process WeChat...</span><br><span class="line">Listening to port 3333 <span class="keyword">for</span> a connection from localhost...</span><br></pre></td></tr></table></figure><p>我们如果直接使用xcode自带的<code>debugserver</code>来操作的话，会报下面错误，原因是debugserver权限不足</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">debugserver-@(<span class="comment">#)PROGRAM:LLDB  PROJECT:lldb-900.3.98</span></span><br><span class="line"> <span class="keyword">for</span> arm64.</span><br><span class="line">Attaching to process wework...</span><br><span class="line">error: failed to attach to process named: <span class="string">&quot;&quot;</span> unable to start the exception thread</span><br><span class="line">Exiting.</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://www.iosre.com/t/ios12-debugserver-lldb/14429">iOS12 下配置debugserver + lldb调试环境的小技巧和问题处理</a></p></blockquote><h3 id="2-debugserver启动调试"><a href="#2-debugserver启动调试" class="headerlink" title="2. debugserver启动调试"></a>2. debugserver启动调试</h3><p>如果App没有运行，可以直接启动App调试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后面接的是完整路径</span></span><br><span class="line">debugserver -x auto xx.xx.xx.xx:3333 /private/var/containers/Bundle/Application/B7984908-D77C-47AE-97AF-3803988F1401/Test.app/Test</span><br></pre></td></tr></table></figure><h3 id="通过lldb连接调试器"><a href="#通过lldb连接调试器" class="headerlink" title="通过lldb连接调试器"></a>通过lldb连接调试器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入lldb模式</span></span><br><span class="line">$ lldb</span><br><span class="line"><span class="comment"># 连接调试器</span></span><br><span class="line">(lldb) process connect connect://xx.xx.xx.xx:3333</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接成功后，会输出下面信息</span></span><br><span class="line">Process 40349 stopped</span><br><span class="line">* thread <span class="comment">#1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = signal SIGSTOP</span></span><br><span class="line">    frame <span class="comment">#0: 0x0000000181971198 libsystem_kernel.dylib`mach_msg_trap + 8</span></span><br><span class="line">libsystem_kernel.dylib`mach_msg_trap:</span><br><span class="line">-&gt;  0x181971198 &lt;+8&gt;: ret</span><br><span class="line"></span><br><span class="line">libsystem_kernel.dylib`mach_msg_overwrite_trap:</span><br><span class="line">    0x18197119c &lt;+0&gt;: mov    x16, <span class="comment">#-0x20</span></span><br><span class="line">    0x1819711a0 &lt;+4&gt;: svc    <span class="comment">#0x80</span></span><br><span class="line">    0x1819711a4 &lt;+8&gt;: ret</span><br><span class="line">Target 0: (WeChat) stopped.</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure><p>这个时候进程会被暂停，可以使用<code>continue</code>让程序继续走</p><p>可能会出现下面问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) process connect connect://xx.xx.xx.xx:12121</span><br><span class="line">error: Failed to connect port</span><br></pre></td></tr></table></figure><p>如果出现上面问题，可以通过端口转发到本地，使用USB端口转发速度也会更快，ip换成localhost</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iproxy 2333 3333</span><br></pre></td></tr></table></figure><p>接下来使用lldb命令即可，与xcode调试一样</p><p>退出调试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>每次连接调试的时候都很麻烦，我们可以通过<code>别名</code>来简化连接，如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 con 代替 process connect connect://xx.xx.xx.xx:12121</span></span><br><span class="line">(lldb) <span class="built_in">command</span> <span class="built_in">alias</span> con process connect connect://xx.xx.xx.xx:12121</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来就可以直接使用con连接</span></span><br><span class="line">(lldb) con</span><br></pre></td></tr></table></figure><h3 id="lldb常用命令"><a href="#lldb常用命令" class="headerlink" title="lldb常用命令"></a>lldb常用命令</h3><ul><li>列出所有断点：<code>breakpoint list, br li</code></li><li>打开、关闭某个断点：<code>breakpoint enable, breakpoint disable, br dis, br del</code></li><li>打印参数：<code>frame variable, fr v</code></li><li>打印方法名和行数：<code>frame info</code></li><li>打印寄存器的值：<code>register read</code></li><li>修改寄存器的值：<code>register write rax 123</code></li><li>列出文件加载基地址：<code>image list</code></li><li>执行地址的加减运算：<code>p/x</code></li></ul><h2 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h2><h3 id="使用ptrace函数反调试"><a href="#使用ptrace函数反调试" class="headerlink" title="使用ptrace函数反调试"></a>使用<code>ptrace</code>函数反调试</h3><p><code>debugserver</code>之所以可以调试APP, 是依赖一个系统函数<code>ptrace</code>(process trace 进程跟踪). 此函数提供了一个进程监听控制另外一个进程, 并且可以检查被控制进程的内容和寄存器里面的数据. 可以用来实现断电调试和系统调用跟踪. iOS中没有提供此函数的头文件, 但不是私有API.</p><p><code>ptrace</code>函数在iOS项目中不能找到，在MacOS工程可以引用到，我们把需要用到的函数声明搬过来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * request: 要做的事情</span></span><br><span class="line"><span class="comment"> * pid: 要监听/操作的id</span></span><br><span class="line"><span class="comment"> * addr: 为request代表的操作提供的地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ptrace(<span class="type">int</span> _request, <span class="type">pid_t</span> _pid, <span class="type">caddr_t</span> _addr, <span class="type">int</span> _data)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_TRACE_ME 0   <span class="comment">/* child declares it&#x27;s being traced */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_READ_I   1   <span class="comment">/* read word in child&#x27;s I space */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_READ_D   2   <span class="comment">/* read word in child&#x27;s D space */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_READ_U   3   <span class="comment">/* read word in child&#x27;s user structure */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_WRITE_I  4   <span class="comment">/* write word in child&#x27;s I space */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_WRITE_D  5   <span class="comment">/* write word in child&#x27;s D space */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_WRITE_U  6   <span class="comment">/* write word in child&#x27;s user structure */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_CONTINUE 7   <span class="comment">/* continue the child */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_KILL     8   <span class="comment">/* kill the child process */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_STEP     9   <span class="comment">/* single step the child */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_ATTACH   ePtAttachDeprecated <span class="comment">/* trace some running process */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_DETACH   11  <span class="comment">/* stop tracing a process */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_SIGEXC   12  <span class="comment">/* signals as exceptions for current_proc */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_THUPDATE 13  <span class="comment">/* signal for thread# */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_ATTACHEXC    14  <span class="comment">/* attach to running process with signal exception */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_FORCEQUOTA   30  <span class="comment">/* Enforce quota for root */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_DENY_ATTACH  31</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PT_FIRSTMACH    32  <span class="comment">/* for machine-specific requests */</span></span></span><br></pre></td></tr></table></figure><p>找地方执行，可以在load方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="type">void</span>)load &#123;</span><br><span class="line">    <span class="comment">// PT_DENY_ATTACH 表示拒绝调试</span></span><br><span class="line">    ptrace(PT_DENY_ATTACH, getpid(), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用sysctl函数反调试"><a href="#使用sysctl函数反调试" class="headerlink" title="使用sysctl函数反调试"></a>使用<code>sysctl</code>函数反调试</h3><p>使用<code>sysctl</code>函数可以判断当前程序是否正在被调试，需要隔一段时间检测一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&lt;sys/sysctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isDebuging</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 控制码</span></span><br><span class="line">    <span class="type">int</span> name[<span class="number">4</span>];                <span class="comment">// 里面放字节码, 查询信息</span></span><br><span class="line">    name[<span class="number">0</span>] = CTL_KERN;         <span class="comment">// 内核</span></span><br><span class="line">    name[<span class="number">1</span>] = KERN_PROC;        <span class="comment">// 查询进程</span></span><br><span class="line">    name[<span class="number">2</span>] = KERN_PROC_PID;    <span class="comment">// 通过id查询, 传递的参数是进程id</span></span><br><span class="line">    name[<span class="number">3</span>] = getpid();         <span class="comment">// 拿到当前进程id</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">kinfo_proc</span> <span class="title">info</span>;</span>     <span class="comment">// 结束进程查询结果的结构体</span></span><br><span class="line">    <span class="type">size_t</span> info_size = <span class="keyword">sizeof</span>(info);    <span class="comment">// 结构体的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> error = sysctl(name, <span class="keyword">sizeof</span>(name)/<span class="keyword">sizeof</span>(*name), &amp;info, &amp;info_size, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">        <span class="comment">// p_flag 的值转换为二进制, 假如从低位到高位第12位的值为1(0x800), 则正在被调试</span></span><br><span class="line">        <span class="keyword">if</span> (info.kp_proc.p_flag &amp; P_TRACED) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反反调试"><a href="#反反调试" class="headerlink" title="反反调试"></a>反反调试</h3><p>上面反调试方法都是C语言的方法，而我们知道<a href="https://github.com/facebook/fishhook"><code>fishhook</code></a>可以 hook C方法，所以上面两个方法可以被fishhook替换掉</p><p>这时候我们就需要<code>让系统的C方法不被hook</code>，我们可以在别人hook之前换成我们自己的实现，然后别人再hook的时候就只是hook我们替换过的实现了，如何<code>确保我们的hook在别人之前调用</code>呢</p><p>我们知道，dyld加载App的时候，动态库是先加载的，而动态库的加载顺序是根据MachO文件描述的顺序（XCode中编译的顺序一样，也就是Frameworks,Libraries,and Embedded Content配置的顺序），我们可以用一个<code>防护的动态库</code>让我们的动态库先执行</p><p>当然如果MachO文件的动态链接库的顺序被改变了，还是会被别人先hook，这个成本就比较高了</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
            <tag> lldb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lldb常用命令</title>
      <link href="/2019-08-06/ios-lldb/"/>
      <url>/2019-08-06/ios-lldb/</url>
      
        <content type="html"><![CDATA[<p>lldb是llvm的一个子项目，用于调试llvm编译的程序，做iOS调试时，和<code>lldb</code>打交道应该是最多的，本文对lldb常用的一些命令做一些整理，以便后续查阅</p><span id="more"></span><h2 id="lldb常用操作"><a href="#lldb常用操作" class="headerlink" title="lldb常用操作"></a>lldb常用操作</h2><p>lldb的指令格式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">command</span>&gt; [&lt;subcommand&gt; [&lt;subcommand&gt;...]] &lt;action&gt; [-options [optionvalue]] [argument [argument...]]</span><br></pre></td></tr></table></figure><ul><li>命令</li><li>子命令</li><li>命令操作</li><li>命令选项</li><li>命令参数</li></ul><p>例如给函数test设置短点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint <span class="built_in">set</span> -n <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>我们常用的命令有</p><ul><li>expression：表达式</li><li>thread：线程</li><li>frame：</li><li>breakpoint：符号断点</li><li>watchpoint：内存断点</li><li>image：镜像</li><li>register：寄存器</li><li>memory：内存</li><li>help：查看命令帮助</li></ul><p>所有命令可以通过<code>help &lt;command&gt; [&lt;subcommand&gt;]</code>查看详细文档</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">(lldb) <span class="built_in">help</span> breakpoint</span><br><span class="line">     Commands <span class="keyword">for</span> operating on breakpoints (see <span class="string">&#x27;help b&#x27;</span> <span class="keyword">for</span> shorthand.)</span><br><span class="line"></span><br><span class="line">Syntax: breakpoint &lt;subcommand&gt; [&lt;command-options&gt;]</span><br><span class="line"></span><br><span class="line">The following subcommands are supported:</span><br><span class="line"></span><br><span class="line">      clear   -- Delete or <span class="built_in">disable</span> breakpoints matching the specified <span class="built_in">source</span> file and line.</span><br><span class="line">      <span class="built_in">command</span> -- Commands <span class="keyword">for</span> adding, removing and listing LLDB commands executed when a breakpoint is hit.</span><br><span class="line">      delete  -- Delete the specified breakpoint(s).  If no breakpoints are specified, delete them all.</span><br><span class="line">      <span class="built_in">disable</span> -- Disable the specified breakpoint(s) without deleting them.  If none are specified, <span class="built_in">disable</span> all</span><br><span class="line">                 breakpoints.</span><br><span class="line">      <span class="built_in">enable</span>  -- Enable the specified disabled breakpoint(s). If no breakpoints are specified, <span class="built_in">enable</span> all of them.</span><br><span class="line">      list    -- List some or all breakpoints at configurable levels of detail.</span><br><span class="line">      modify  -- Modify the options on a breakpoint or <span class="built_in">set</span> of breakpoints <span class="keyword">in</span> the executable.  If no breakpoint is</span><br><span class="line">                 specified, acts on the last created breakpoint.  With the exception of -e, -d and -i, passing an</span><br><span class="line">                 empty argument clears the modification.</span><br><span class="line">      name    -- Commands to manage name tags <span class="keyword">for</span> breakpoints</span><br><span class="line">      <span class="built_in">read</span>    -- Read and <span class="built_in">set</span> the breakpoints previously saved to a file with <span class="string">&quot;breakpoint write&quot;</span>.</span><br><span class="line">      <span class="built_in">set</span>     -- Sets a breakpoint or <span class="built_in">set</span> of breakpoints <span class="keyword">in</span> the executable.</span><br><span class="line">      write   -- Write the breakpoints listed to a file that can be <span class="built_in">read</span> <span class="keyword">in</span> with <span class="string">&quot;breakpoint read&quot;</span>.  If given no</span><br><span class="line">                 arguments, writes all breakpoints.</span><br><span class="line"></span><br><span class="line">For more <span class="built_in">help</span> on any particular subcommand, <span class="built_in">type</span> <span class="string">&#x27;help &lt;command&gt; &lt;subcommand&gt;&#x27;</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(lldb) <span class="built_in">help</span> breakpoint <span class="built_in">set</span></span><br><span class="line">     Sets a breakpoint or <span class="built_in">set</span> of breakpoints <span class="keyword">in</span> the executable.</span><br><span class="line"></span><br><span class="line">Syntax: breakpoint <span class="built_in">set</span> &lt;cmd-options&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="expression"><a href="#expression" class="headerlink" title="expression"></a>expression</h3><p><code>expression</code>命令是执行一个表达式，并将表达式返回的结果输出</p><ol><li><p>调用方法<code>expression</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(lldb) expression self.view.hidden = 1</span><br><span class="line"></span><br><span class="line">(lldb) expression [self.view layoutIfNeeded]</span><br></pre></td></tr></table></figure></li><li><p>添加一个本地变量<code>expression</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命名以$开头</span></span><br><span class="line">(lldb) expression int <span class="variable">$a</span> = 10</span><br><span class="line">(lldb) p <span class="variable">$a</span></span><br><span class="line">(int) <span class="variable">$a</span> = 1</span><br></pre></td></tr></table></figure><p> 我们可以通过添加本地变量实现页面跳转</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义变量并赋值</span></span><br><span class="line">(lldb) expression <span class="built_in">id</span> <span class="variable">$navVC</span> = self.navigationController;</span><br><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">(lldb) expression <span class="built_in">id</span> <span class="variable">$vc</span></span><br><span class="line"><span class="comment"># 创建vc</span></span><br><span class="line">(lldb) expression <span class="variable">$vc</span> = [[ViewController alloc] init];</span><br><span class="line"><span class="comment"># push跳转</span></span><br><span class="line">(lldb) expression [<span class="variable">$navVC</span> pushViewController:<span class="variable">$vc</span> animated:YES]</span><br></pre></td></tr></table></figure></li><li><p>打印变量地址<code>expression --</code>, <code>p</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(lldb) expression button</span><br><span class="line">(UIButton *) <span class="variable">$4</span> = 0x00007f9d1ea05b50</span><br><span class="line"></span><br><span class="line"><span class="comment"># `--`表示选项结束</span></span><br><span class="line">(lldb) expression -- button</span><br><span class="line">(UIButton *) <span class="variable">$5</span> = 0x00007f9d1ea05b50</span><br><span class="line"></span><br><span class="line">(lldb) p button</span><br><span class="line">(UIButton *) <span class="variable">$6</span> = 0x00007f9d1ea05b50</span><br></pre></td></tr></table></figure><p> <code>expression --</code>可以简写成<code>expression</code>，<code>print</code>，<code>p</code></p></li><li><p>打印变量值<code>expression -o --</code>,<code>po</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `--` 表示选项结束，`-o`表示按对象输出</span></span><br><span class="line">(lldb) expression -o -- button</span><br><span class="line">&lt;UIButton: 0x7f9d1ea05b50; frame = (184 433; 46 30); opaque = NO; autoresize = RM+BM; layer = &lt;CALayer: 0x600003a54ba0&gt;&gt;</span><br><span class="line"></span><br><span class="line">(lldb) po button</span><br><span class="line">&lt;UIButton: 0x7f9d1ea05b50; frame = (184 433; 46 30); opaque = NO; autoresize = RM+BM; layer = &lt;CALayer: 0x600003a54ba0&gt;&gt;</span><br></pre></td></tr></table></figure><p> <code>expression -o --</code>可以简写成<code>po</code>，实际是调用对象的<code>description</code>方法，输出返回值</p></li></ol><h3 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h3><ol><li><p>打印调用堆栈信息<code>thread backtrace</code>, <code>bt</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(lldb) bt</span><br><span class="line">* thread <span class="comment">#1, queue = &#x27;com.apple.main-thread&#x27;, stop reason = step over</span></span><br><span class="line"> * frame <span class="comment">#0: 0x00000001087d1bbf Test`-[ViewController viewDidLoad](self=0x00007fba7cc0ce10, _cmd=&quot;viewDidLoad&quot;) at ViewController.m:101:1</span></span><br><span class="line">   frame <span class="comment">#1: 0x00007fff4856c066 UIKitCore`-[UIViewController _sendViewDidLoadWithAppearanceProxyObjectTaggingEnabled] + 83</span></span><br><span class="line">   frame <span class="comment">#2: 0x00007fff48570f84 UIKitCore`-[UIViewController loadViewIfRequired] + 1084</span></span><br><span class="line">   frame <span class="comment">#3: 0x00007fff485713a1 UIKitCore`-[UIViewController view] + 27</span></span><br><span class="line">   frame <span class="comment">#4: 0x00007fff48c51ae1 UIKitCore`-[UIWindow addRootViewControllerViewIfPossible] + 326</span></span><br><span class="line">   frame <span class="comment">#5: 0x00007fff48c5110a UIKitCore`-[UIWindow _updateLayerOrderingAndSetLayerHidden:actionBlock:] + 219</span></span><br><span class="line">   frame <span class="comment">#6: 0x00007fff48c52195 UIKitCore`-[UIWindow _setHidden:forced:] + 362</span></span><br><span class="line">   frame <span class="comment">#7: 0x00007fff48c655bc UIKitCore`-[UIWindow _mainQueue_makeKeyAndVisible] + 42</span></span><br><span class="line">   frame <span class="comment">#8: 0x00007fff48e84d2c UIKitCore`-[UIWindowScene _makeKeyAndVisibleIfNeeded] + 202</span></span><br><span class="line">   frame <span class="comment">#9: 0x00007fff48177720 UIKitCore`+[UIScene _sceneForFBSScene:create:withSession:connectionOptions:] + 1405</span></span><br><span class="line">   frame <span class="comment">#10: 0x00007fff48c15561 UIKitCore`-[UIApplication _connectUISceneFromFBSScene:transitionContext:] + 1019</span></span><br><span class="line">   frame <span class="comment">#11: 0x00007fff48c15898 UIKitCore`-[UIApplication workspace:didCreateScene:withTransitionContext:completion:] + 291</span></span><br><span class="line">   frame <span class="comment">#12: 0x00007fff4876a160 UIKitCore`-[UIApplicationSceneClientAgent scene:didInitializeWithEvent:completion:] + 361</span></span><br><span class="line">   frame <span class="comment">#13: 0x00007fff36c6091e FrontBoardServices`-[FBSSceneImpl _callOutQueue_agent_didCreateWithTransitionContext:completion:] + 419</span></span><br><span class="line">   frame <span class="comment">#14: 0x00007fff36c869b1 FrontBoardServices`__86-[FBSWorkspaceScenesClient sceneID:createWithParameters:transitionContext:completion:]_block_invoke.154 + 102</span></span><br><span class="line">   frame <span class="comment">#15: 0x00007fff36c6b347 FrontBoardServices`-[FBSWorkspace _calloutQueue_executeCalloutFromSource:withBlock:] + 220</span></span><br><span class="line">   frame <span class="comment">#16: 0x00007fff36c86642 FrontBoardServices`__86-[FBSWorkspaceScenesClient sceneID:createWithParameters:transitionContext:completion:]_block_invoke + 355</span></span><br><span class="line">   frame <span class="comment">#17: 0x0000000108a81e8e libdispatch.dylib`_dispatch_client_callout + 8</span></span><br><span class="line">   frame <span class="comment">#18: 0x0000000108a84da2 libdispatch.dylib`_dispatch_block_invoke_direct + 300</span></span><br><span class="line">   frame <span class="comment">#19: 0x00007fff36cac2d9 FrontBoardServices`__FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + 30</span></span><br><span class="line">   frame <span class="comment">#20: 0x00007fff36cabfc7 FrontBoardServices`-[FBSSerialQueue _queue_performNextIfPossible] + 441</span></span><br><span class="line">   frame <span class="comment">#21: 0x00007fff36cac4d6 FrontBoardServices`-[FBSSerialQueue _performNextFromRunLoopSource] + 22</span></span><br><span class="line">   frame <span class="comment">#22: 0x00007fff23da1c71 CoreFoundation`__CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17</span></span><br><span class="line">   frame <span class="comment">#23: 0x00007fff23da1b9c CoreFoundation`__CFRunLoopDoSource0 + 76</span></span><br><span class="line">   frame <span class="comment">#24: 0x00007fff23da13cc CoreFoundation`__CFRunLoopDoSources0 + 268</span></span><br><span class="line">   frame <span class="comment">#25: 0x00007fff23d9bf6e CoreFoundation`__CFRunLoopRun + 974</span></span><br><span class="line">   frame <span class="comment">#26: 0x00007fff23d9b884 CoreFoundation`CFRunLoopRunSpecific + 404</span></span><br><span class="line">   frame <span class="comment">#27: 0x00007fff38b5ac1a GraphicsServices`GSEventRunModal + 139</span></span><br><span class="line">   frame <span class="comment">#28: 0x00007fff48c19220 UIKitCore`UIApplicationMain + 1605</span></span><br><span class="line">   frame <span class="comment">#29: 0x00000001087d2072 Test`main(argc=1, argv=0x00007ffee742dd98) at main.m:18:12</span></span><br><span class="line">   frame <span class="comment">#30: 0x00007fff519b910d libdyld.dylib`start + 1</span></span><br><span class="line">   frame <span class="comment">#31: 0x00007fff519b910d libdyld.dylib`start + 1</span></span><br></pre></td></tr></table></figure></li><li><p><code>frame variable [value]</code><br> 打印当前调用栈的变量</p> <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">int</span>)a:(<span class="built_in">NSSet</span> *)a b:(<span class="built_in">NSString</span> *)b c:(<span class="type">long</span>)c d:(<span class="type">int</span>)d e:(<span class="type">int</span>)e &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *f = <span class="string">@&quot;v&quot;</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> g = f.length;</span><br><span class="line">    g += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">[<span class="keyword">self</span> a:<span class="literal">nil</span> b:<span class="string">@&quot;fdd&quot;</span> c:<span class="number">1231</span> d:<span class="number">2123</span> e:<span class="number">23</span>];</span><br></pre></td></tr></table></figure><p> 在函数里面查看</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(lldb) frame variable</span><br><span class="line">(ViewController *) self = 0x00007ffe4f4090b0</span><br><span class="line">(SEL) _cmd = <span class="string">&quot;a:b:c:d:e:&quot;</span></span><br><span class="line">(NSSet *) a = nil</span><br><span class="line">(__NSCFConstantString *) b = 0x0000000101b41088 @<span class="string">&quot;fdd&quot;</span></span><br><span class="line">(long) c = 1231</span><br><span class="line">(int) d = 2123</span><br><span class="line">(int) e = 23</span><br><span class="line">(__NSCFConstantString *) f = 0x0000000101b410a8 @<span class="string">&quot;v&quot;</span></span><br><span class="line">(NSUInteger) g = 2</span><br></pre></td></tr></table></figure></li><li><p>流程控制</p><ul><li><code>thread continue̵</code>&#x2F;<code>continue̵</code>&#x2F;<code>c</code>: 程序继续运行</li><li><code>thread step-over</code>&#x2F;<code>next</code>&#x2F;<code>n</code>：单步运行（源码），不会进入子函数</li><li><code>thread step-in</code>&#x2F;<code>step</code>&#x2F;<code>s</code>: 单步运行（源码），会进入子函数</li><li><code>thread step-out</code>&#x2F;<code>finish</code>: 直接执行完当前函数的所有代码，返回到调用的地方</li><li><code>thread return [value]</code>&#x2F;<code>thread r</code>：让当前函数直接返回，不执行当前断点后面代码</li><li><code>thread step-inst-over</code>&#x2F;<code>nexti</code>&#x2F;<code>ni</code>：单步运行（汇编），不会进入子函数</li><li><code>thread step-inst</code>&#x2F;<code>stepi</code>&#x2F;<code>si</code>：单步运行（汇编），会进入子函数</li></ul><p> 前面四个对应Xcode工具栏的前四个<br> <img src="/images/post/lldb-toolbar.png" alt="-"></p></li><li><p>调用栈回退和前进  </p><ul><li><code>up</code>&#x2F;<code>down</code></li></ul></li></ol><h3 id="breakpoint"><a href="#breakpoint" class="headerlink" title="breakpoint"></a>breakpoint</h3><ol><li><p>设置断点<code>breakpoint set</code></p><ul><li><code>breakpoint set -a 函数地址</code></li><li><code>breakpoint set -n 函数符号</code></li></ul> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint <span class="built_in">set</span> -a 0x0000000101b3eab3</span><br><span class="line">Breakpoint 6: <span class="built_in">where</span> = Test`-[ViewController viewDidLoad] + 147 at ViewController.m:101:5, address = 0x0000000101b3eab3</span><br><span class="line"></span><br><span class="line">(lldb) breakpoint <span class="built_in">set</span> -n <span class="string">&quot;-[ViewController viewDidLoad]&quot;</span></span><br><span class="line"></span><br><span class="line">(lldb) breakpoint <span class="built_in">set</span> -n touchesBegan:withEvent:</span><br></pre></td></tr></table></figure></li><li><p>列出所有的断点：<code>breakpoint list</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint list</span><br><span class="line">Current breakpoints:</span><br><span class="line">1: file = <span class="string">&#x27;/Users/bomo/Desktop/Test/Test/ViewController.m&#x27;</span>, line = 116, exact_match = 0, locations = 1, resolved = 1, hit count = 0</span><br><span class="line">1.1: <span class="built_in">where</span> = Test`-[ViewController <span class="built_in">test</span>:] + 60 at ViewController.m:116:21, address = 0x0000000101b3ebec, resolved, hit count = 0</span><br><span class="line"></span><br><span class="line">2: file = <span class="string">&#x27;/Users/bomo/Desktop/Test/Test/ViewController.m&#x27;</span>, line = 114, exact_match = 0, locations = 1, resolved = 1, hit count = 0</span><br><span class="line">2.1: <span class="built_in">where</span> = Test`-[ViewController <span class="built_in">test</span>:] + 36 at ViewController.m:114:21, address = 0x0000000101b3ebd4, resolved, hit count = 0</span><br><span class="line"></span><br><span class="line">3: file = <span class="string">&#x27;/Users/bomo/Desktop/Test/Test/ViewController.m&#x27;</span>, line = 109, exact_match = 0, locations = 1, resolved = 1, hit count = 1</span><br><span class="line">3.1: <span class="built_in">where</span> = Test`-[ViewController a:b:c:d:e:] + 162 at ViewController.m:110:1, address = 0x0000000101b3eb72, resolved, hit count = 1</span><br><span class="line"></span><br><span class="line">4: address = 0x00000001007f1cac, locations = 1</span><br><span class="line">4.1: address = 0x00000001007f1cac, unresolved, hit count = 0 </span><br></pre></td></tr></table></figure><p> 上面有4个断点，每个断点都有一个整数编号</p></li><li><p>设置断点状态</p><ul><li><code>breakpoint disable 断点编号</code>: 禁用断点</li><li><code>breakpoint enable 断点编号</code>: 启用断点</li><li><code>breakpoint delete 断点编号</code>: 删除断点</li></ul></li><li><p>断点命令：</p><ul><li><p><code>breakpoint command add 断点编号</code>: 给断点预先设置需要执行的命令，当触发断点时候，就会执行</p></li><li><p><code>breakpoint command list 断点编号</code>: 列出断点的绑定的命令</p></li><li><p><code>breakpoint command delete 断点编号</code>: 删除断点绑定的命令</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) breakpoint <span class="built_in">command</span> add 1</span><br><span class="line">Enter your debugger <span class="built_in">command</span>(s).  Type <span class="string">&#x27;DONE&#x27;</span> to end.</span><br><span class="line">&gt; <span class="built_in">print</span> <span class="string">&quot;断点命中了&quot;</span></span><br><span class="line">&gt; <span class="built_in">print</span> <span class="string">&quot;断点参数为&quot;</span></span><br><span class="line">&gt; po sender</span><br><span class="line">&gt; DONE</span><br></pre></td></tr></table></figure><p>   当断点命中的时候时候</p>   <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&quot;断点命中了&quot;</span></span><br><span class="line">(const char [16]) <span class="variable">$0</span> = <span class="string">&quot;断点命中了&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;断点参数为&quot;</span></span><br><span class="line">(const char [16]) <span class="variable">$1</span> = <span class="string">&quot;断点参数为&quot;</span></span><br><span class="line"></span><br><span class="line">po sender</span><br><span class="line">&lt;UIButton: 0x7fa86f80bf10; frame = (184 433; 46 30); opaque = NO; autoresize = RM+BM; layer = &lt;CALayer: 0x600001826580&gt;&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看断点的命令</span></span><br><span class="line">(lldb) breakpoint <span class="built_in">command</span> list 1</span><br><span class="line">1: file = <span class="string">&#x27;/Users/bomo/Desktop/Test/Test/ViewController.m&#x27;</span>, line = 105, exact_match = 0, locations = 1, resolved = 1, hit count = 4</span><br><span class="line">    Breakpoint commands:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;断点命中了&quot;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;断点参数为&quot;</span></span><br><span class="line">    po sender</span><br><span class="line"></span><br><span class="line">1.1: <span class="built_in">where</span> = Test`-[ViewController <span class="built_in">test</span>:] + 36 at ViewController.m:105:20, address = 0x000000010375ed24, resolved, hit count = 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除断点的命令</span></span><br><span class="line">(lldb) breakpoint <span class="built_in">command</span> delete 1</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="内存断点"><a href="#内存断点" class="headerlink" title="内存断点"></a>内存断点</h3><p>内存断点与符号断点用法类似</p><ul><li><p><code>watchpoint set variable 变量</code></p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) watchpoint <span class="built_in">set</span> variable self-&gt;age</span><br></pre></td></tr></table></figure></li><li><p><code>watchpoint set expression 地址</code></p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(lldb) watchpoint <span class="built_in">set</span> expression 0x0000000101b3eab3</span><br></pre></td></tr></table></figure></li><li><p><code>watchpoint list</code></p></li><li><p><code>watchpoint diable 断点编号</code></p></li><li><p><code>watchpoint enable 断点编号</code></p></li><li><p><code>watchpoint delete 断点编号</code></p></li><li><p><code>watchpoint command add 断点编号</code></p></li><li><p><code>watchpoint command list 断点编号</code></p></li><li><p><code>watchpoint command delete 断点编号</code></p></li></ul><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><ol><li><p>列出所加载的模块信息<code>image list -o -f</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(lldb) image list -o -f</span><br><span class="line">[  0] 0x000000000375d000 /Users/bomo/Library/Developer/Xcode/DerivedData/Test-frsrzegtqyfuthfhcjefdlbaqmgi/Build/Products/Debug-iphonesimulator/Test.app/Test</span><br><span class="line">[  1] 0x0000000108ca5000 /usr/lib/dyld</span><br><span class="line">[  2] 0x000000010376c000 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/usr/lib/dyld_sim</span><br><span class="line">[  3] 0x00000001039c7000 /Users/bomo/Library/Developer/Xcode/DerivedData/Test-frsrzegtqyfuthfhcjefdlbaqmgi/Build/Products/Debug-iphonesimulator/Test.app/Frameworks/AppOrderFiles.framework/AppOrderFiles</span><br><span class="line">[  4] 0x00007fff2587b000 /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Library/Developer/CoreSimulator/Profiles/Runtimes/iOS.simruntime/Contents/Resources/RuntimeRoot/System/Library/Frameworks/Foundation.framework/Foundation</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> 可以使用<code>grep</code>过滤</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(lldb) image list -o -f Test</span><br><span class="line">[  0] /Users/bomo/Library/Developer/Xcode/DerivedData/Test-frsrzegtqyfuthfhcjefdlbaqmgi/Build/Products/Debug-iphoneos/Test.app/Test 0x0000000004a2c000</span><br><span class="line"></span><br><span class="line">(lldb) image list -o -f | grep Test</span><br><span class="line">[  0] /Users/bomo/Library/Developer/Xcode/DerivedData/Test-frsrzegtqyfuthfhcjefdlbaqmgi/Build/Products/Debug-iphoneos/Test.app/Test 0x0000000004a2c000</span><br></pre></td></tr></table></figure><blockquote><p>可以使用<code>image list</code>命令查看<code>ASLR偏移地址</code>，上面表示Test文件的偏移地址为<code>0x0000000004a2c000</code>，MachO的TEXT段的偏移地址为<code>0x0000000104a2c000</code>（ASLR+PAGEZERO）</p></blockquote></li><li><p>查找模块<code>image lookup</code></p><ul><li><code>image lookup -t 类型</code></li><li><code>image lookup -a 地址</code></li><li><code>image lookup -n 符号</code></li></ul> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(lldb) image lookup -t AppDelegate</span><br><span class="line">Best match found <span class="keyword">in</span> /Users/bomo/Library/Developer/Xcode/DerivedData/Test-frsrzegtqyfuthfhcjefdlbaqmgi/Build/Products/Debug-iphonesimulator/Test.app/Test:</span><br><span class="line"><span class="built_in">id</span> = &#123;0x20000002b&#125;, name = <span class="string">&quot;AppDelegate&quot;</span>, byte-size = 8, decl = AppDelegate.h:11, compiler_type = <span class="string">&quot;@interface AppDelegate : UIResponder</span></span><br><span class="line"><span class="string">@end&quot;</span></span><br><span class="line"></span><br><span class="line">(lldb) image lookup -n <span class="built_in">test</span>:</span><br><span class="line">1 match found <span class="keyword">in</span> /Users/bomo/Library/Developer/Xcode/DerivedData/Test-frsrzegtqyfuthfhcjefdlbaqmgi/Build/Products/Debug-iphonesimulator/Test.app/Test:</span><br><span class="line">    Address: Test[0x0000000100001d00] (Test.__TEXT.__text + 688)</span><br><span class="line">    Summary: Test`-[ViewController <span class="built_in">test</span>:] at ViewController.m:103</span><br><span class="line"></span><br><span class="line">(lldb) image lookup -a 0x000000010375ed24</span><br><span class="line">    Address: Test[0x0000000100001d24] (Test.__TEXT.__text + 724)</span><br><span class="line">    Summary: Test`-[ViewController <span class="built_in">test</span>:] + 36 at ViewController.m:105:20</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>image lookup -a 地址</code>经常用于查询崩溃位置，通过地址查询崩溃的地方位于哪个模块哪个文件哪个位置</p></blockquote></li></ol><h3 id="register"><a href="#register" class="headerlink" title="register"></a>register</h3><p><code>register</code>指令能够获取和修改各个寄存器的信息</p><ol><li><p>读取所有寄存器信息</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(lldb) register <span class="built_in">read</span></span><br><span class="line">General Purpose Registers:</span><br><span class="line">    x0 = 0x0000000000000000</span><br><span class="line">    x1 = 0x00000001bcf641e4  </span><br><span class="line">    x2 = 0x000000010536d050</span><br><span class="line">    x3 = 0x000000028283b840</span><br><span class="line">    x4 = 0x000000028283b840</span><br><span class="line">    x5 = 0x000000028283b840</span><br><span class="line">    x6 = 0x0000000000000000</span><br><span class="line">    x7 = 0x0000000000000403</span><br><span class="line">    x8 = 0x0000000104dd1568  (void *)0x0000000104dd15b8: ABC</span><br><span class="line">    x9 = 0x0000000000000006</span><br><span class="line">   x10 = 0x0000000000000008</span><br><span class="line">   x11 = 0x0000000000000000</span><br><span class="line">   x12 = 0x000000010a811840</span><br><span class="line">   x13 = 0x000005a1ce8843c7 (0x00000001ce8843c7) (void *)0x000001ce88448800</span><br><span class="line">   x14 = 0x00000001bd054dde  </span><br><span class="line">   x15 = 0x0000000104dd0220  (void *)0x00000001bd054dde</span><br><span class="line">   x16 = 0x00000001818daa90  libobjc.A.dylib`objc_release</span><br><span class="line">   x17 = 0x0000000186100418  UIKitCore`-[UIView(UIKitManual) retain]</span><br><span class="line">   x18 = 0x0000000000000000</span><br><span class="line">   x19 = 0x000000028283b840</span><br><span class="line">   x20 = 0x000000010536d050</span><br><span class="line">   x21 = 0x00000001be56b4fe  </span><br><span class="line">   x22 = 0x0000000106c04bd0</span><br><span class="line">   x23 = 0x0000000000000001</span><br><span class="line">   x24 = 0x00000001ce893fe8  UIKitCore`UIApp</span><br><span class="line">   x25 = 0x0000000000000000</span><br><span class="line">   x26 = 0x00000001bcf656b4  </span><br><span class="line">   x27 = 0x0000000106c04bd0</span><br><span class="line">   x28 = 0x00000002813adfe0</span><br><span class="line">    fp = 0x000000016b039390</span><br><span class="line">    lr = 0x0000000104dc9d1c  Test`-[ViewController <span class="built_in">test</span>:] + 40 at ViewController.m:104</span><br><span class="line">    sp = 0x000000016b039340</span><br><span class="line">    pc = 0x0000000104dc9d24  Test`-[ViewController <span class="built_in">test</span>:] + 48 at ViewController.m:106:20</span><br><span class="line">  cpsr = 0x00000000</span><br></pre></td></tr></table></figure></li></ol><ul><li><p><code>register read/格式 寄存器名称</code></p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取寄存器x0的值</span></span><br><span class="line">registe <span class="built_in">read</span> <span class="variable">$x0</span></span><br></pre></td></tr></table></figure></li><li><p><code>register write 寄存器名称 数值</code></p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registe write <span class="variable">$x1</span> 10</span><br></pre></td></tr></table></figure></li></ul><h3 id="查看内存"><a href="#查看内存" class="headerlink" title="查看内存"></a>查看内存</h3><p>memory read&#x2F;数量+格式+字节数 内存地址</p><p>格式：<code>x</code>为16进制，<code>f</code>位浮点数，<code>d</code>为10进制<br>字节数：<code>b</code>为1个字节，<code>h</code>为2个字节，<code>w</code>为4个字节，<code>g</code>为8个字节</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">(lldb) memory <span class="built_in">read</span> 0x00006000001600b0</span><br><span class="line">0x6000001600b0: 00 ed c1 89 ff 7f 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line">0x6000001600c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................</span><br><span class="line"></span><br><span class="line">(lldb) memory <span class="built_in">read</span>/3xg 0x00006000001600b0</span><br><span class="line">0x6000001600b0: 0x00007fff89c1ed00 0x0000000000000000</span><br><span class="line">0x6000001600c0: 0x0000000000000000</span><br><span class="line"></span><br><span class="line">(lldb) memory <span class="built_in">read</span>/8xg 0x00006000001600b0</span><br><span class="line">0x6000001600b0: 0x00007fff89c1ed00 0x0000000000000000</span><br><span class="line">0x6000001600c0: 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x6000001600d0: 0x0000000000000000 0x0000000000000000</span><br><span class="line">0x6000001600e0: 0x0000000000000000 0x0000000000000000</span><br><span class="line"></span><br><span class="line">(lldb) memory <span class="built_in">read</span>/8xw 0x00006000001600b0</span><br><span class="line">0x6000001600b0: 0x89c1ed00 0x00007fff 0x00000000 0x00000000</span><br><span class="line">0x6000001600c0: 0x00000000 0x00000000 0x00000000 0x00000000</span><br><span class="line"></span><br><span class="line">(lldb) memory <span class="built_in">read</span>/3dw 0x00006000001600b0</span><br><span class="line">0x6000001600b0: -1983779584</span><br><span class="line">0x6000001600b4: 32767</span><br><span class="line">0x6000001600b8: 0</span><br><span class="line"></span><br><span class="line">(lldb) memory <span class="built_in">read</span>/3fw 0x00006000001600b0</span><br><span class="line">0x6000001600b0: -4.66859336E-33</span><br><span class="line">0x6000001600b4: 4.59163468E-41</span><br><span class="line">0x6000001600bc: 0</span><br></pre></td></tr></table></figure><p>也可以直接使用<code>x</code>查看内存，用法和<code>memory read</code>一样</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x/4xg 0x00006000001600b0</span><br><span class="line">0x6000001600b0: 0x00007fff89c1ed00 0x0000000000000000</span><br><span class="line">0x6000001600c0: 0x0000000000000000 0x0000000000000000</span><br></pre></td></tr></table></figure><p>写内存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory write 内存地址 述职</span><br></pre></td></tr></table></figure><h3 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h3><p>lldb大部分命令都支持缩写</p><table><thead><tr><th>命令</th><th>缩写</th></tr></thead><tbody><tr><td>expression</td><td><code>exp</code></td></tr><tr><td>thread backtrace</td><td><code>bt</code></td></tr><tr><td>breakpoint list</td><td><code>br l</code></td></tr><tr><td>process continue</td><td><code>continue</code>, <code>c</code></td></tr><tr><td>thread step-over</td><td><code>next</code>, <code>n</code></td></tr><tr><td>thread step-in</td><td><code>step</code>, <code>s</code></td></tr><tr><td>thread step-out</td><td><code>finish</code>, <code>f</code></td></tr><tr><td>thread step-inst-over</td><td><code>nexti</code>, <code>ni</code></td></tr><tr><td>thread step-inst</td><td><code>stepi</code>, <code>si</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> lldb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS逆向】iOS可执行文件权限签名</title>
      <link href="/2019-08-04/ios-entitlement/"/>
      <url>/2019-08-04/ios-entitlement/</url>
      
        <content type="html"><![CDATA[<p>iOS中使用<code>entitlement</code>文件来描述可执行文件的权限，例如，当我们在Xcode中勾选了推送的权限，就会看到生成了一个<code>entitlement</code>文件，里面包含下面内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>aps-environment<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>development<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果勾选了<code>Sign With Apple</code>，会出现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.developer.applesignin<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只有配置了对应的权限声明，并签名到可执行文件中，程序才有权限执行对应的功能，例如如果我们没有加上<code>Sign With Apple</code>，则苹果登录相关的接口会失败</p><span id="more"></span><h2 id="Entitlement"><a href="#Entitlement" class="headerlink" title="Entitlement"></a>Entitlement</h2><p>iOS中可执行文件会包含entitlement来声明可执行文件有用哪些权限，默认的iOS开发的应用程序的权限有限，例如只能访问沙盒数据，不能访问系统目录，不能访问其他App，而系统程序却可以，主要差别在于可执行文件签名的权限，系统程序拥有更高的权限，例如<code>SpringBoard</code></p><h2 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h2><p>在Mac上，我们可以通过<code>ldid</code>工具，对可执行文件的权限重新签名，也可以导出可执行文件的<code>entitlement</code>描述</p><h3 id="0-安装ldid"><a href="#0-安装ldid" class="headerlink" title="0. 安装ldid"></a>0. 安装ldid</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install ldid</span><br></pre></td></tr></table></figure><h3 id="1-导出entitlement描述"><a href="#1-导出entitlement描述" class="headerlink" title="1. 导出entitlement描述"></a>1. 导出entitlement描述</h3><p>使用<code>ldid</code>，导出可执行文件<code>SpringBoard</code>的权限到<code>SpringBoard.entitlements</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldid -e SpringBoard &gt; SpringBoard.entitlements</span><br></pre></td></tr></table></figure><h3 id="2-重新签名entitlement"><a href="#2-重新签名entitlement" class="headerlink" title="2. 重新签名entitlement"></a>2. 重新签名<code>entitlement</code></h3><p>把权限<code>SpringBoard.entitlements</code>签名到可执行文件<code>TestTool</code>中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldid -SSpringBoard.entitlements TestTool</span><br></pre></td></tr></table></figure><p>此时，<code>TestTool</code>就拥有跟<code>SpringBoard</code>一样的执行权限</p><h3 id="3-使用codesign签名"><a href="#3-使用codesign签名" class="headerlink" title="3. 使用codesign签名"></a>3. 使用codesign签名</h3><p>除<code>ldid</code>外，也可以通过<code>codesign</code>进行签名，<code>codesign</code>就有一个entitlement参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">codesign -d --entitlements TestTool.entitlements TestTool</span><br></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="1-导出SpringBoard程序的权限"><a href="#1-导出SpringBoard程序的权限" class="headerlink" title="1. 导出SpringBoard程序的权限"></a>1. 导出SpringBoard程序的权限</h3><p><code>SpringBoard</code>应用位于<code>/System/Library/CoreServices/SpringBoard.app</code>，我们先把他拷贝出来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@xx.xx.xx.xx:/System/Library/CoreServices/SpringBoard.app/SpringBoard ~/Desktop/SpringBoard</span><br></pre></td></tr></table></figure><p>通过上面的<code>ldid</code>命令导出得到entitlement，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>allow-obliterate-device<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>application-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>aps-connection-initiate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>backupd-connection-initiate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>checklessPersistentURLTranslation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.BTServer.allowRestrictedServices<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.BTServer.programmaticPairing<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.CallHistory.sync.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.CommCenter.fine-grained<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>spi<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>preferences-reset<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>voice<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>identity<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>phone<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>carrier-settings<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.CompanionLink<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.Contacts.database-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.CoreRoutine.LocationOfInterest<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.MobileInternetSharing.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.QuartzCore.cache-asynchronous<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.QuartzCore.displayable-context<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.QuartzCore.global-capture<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.QuartzCore.secure-capture<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.QuartzCore.secure-mode<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.SystemConfiguration.SCDynamicStore-write-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.SystemConfiguration.SCPreferences-write-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.AutoWake.xml<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>preferences.plist<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.radios.plist<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.accounts.appleaccount.fullaccess<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.assistant.client<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.authkit.writer.internal<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.avfoundation.allow-identifying-output-device-details<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.avfoundation.allow-still-image-capture-shutter-sound-manipulation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.avfoundation.allow-system-wide-context<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.avfoundation.allows-access-to-device-list<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.avfoundation.allows-set-output-device<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.backboard.client<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.backboard.display.archive<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.backboard.displaybrightness<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.backboardd.cancelsTouchesInHostedContent<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.backboardd.hostCanRequireTouchesFromHostedContent<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.backboardd.lastUserEventTime<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.backboardd.launchapplications<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.backboardd.touchDeliveryObservation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.backboardd.virtualDisplay<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.bluetooth.system<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.bulletinboard<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.bulletinboard.dataprovider<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.bulletinboard.observer<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.bulletinboard.serverconduit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.bulletinboard.settings<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.bulletinboard.systemstate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.bulletinboard.utilities<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.cards.all-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coreaudio.CanRecordPastData<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coreaudio.allow-amr-decode<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coreaudio.allow-opus-codec<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coreaudio.allow-speex-codec<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coreduetd.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coreduetd.batterysaver.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coreduetd.context<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coremedia.allow-pre-wiring-pixel-buffers<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coremedia.allow-protected-content-playback<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.coremedia.virtualdisplaysession<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.developer.extension-host.widget-extension<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.developer.homekit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.developer.ubiquity-kvstore-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.duet.activityscheduler.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.duet.expertcenter.consumer<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.fileprovider.enumerate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.fileprovider.fetch-url<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.frontboard.app-badge-value-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.frontboard.launchapplications<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.frontboard.shutdown<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.frontboardservices.display-layout-monitor<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.geoservices.navigation_info<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.homekit.private-spi-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.iapd.accessibility<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.icloud.findmydeviced.access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.icloud.fmfd.access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.idle-timer-services<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.imagent<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.imagent.av<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.imagent.chat<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.intents.extension.discovery<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.intents.uiextension.discovery<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.itunesstored.private<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.keystore.device<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.keystore.lockassertion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.keystore.stash.access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.launchservices.clearadvertisingid<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.locationd.activity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.locationd.authorizeapplications<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.locationd.effective_bundle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.locationd.place_inference<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.locationd.prompt_behavior<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.locationd.region_proxy_service<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.locationd.status<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.locationd.usage_oracle<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.locationd.vehicle_data<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.logind.client.entitlement<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.lsapplicationproxy.deviceidentifierforvendor<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.managedconfiguration.mdmd-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.managedconfiguration.profiled-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.mediastream.mstreamd-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.messages.composeclient<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.mkb.usersession.info<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.mkb.usersession.loginwindow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.mobile.deleted.AllowFreeSpace<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.mobile.keybagd.UserManager.logoutcritical<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.mobilemail.mailservices<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.multitasking.systemappassertions<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.multitasking.termination<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.nfcd.hwmanager<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.nfcd.seshat<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.notificationcenter.widgetcontrollerhascontent<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.osanalytics.otatasking-service-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.payment.configuration<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.payment.presentation<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.CallHistory.read<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.CoreAuthentication.SPI<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.InstallCoordination.allowed<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.MobileContainerManager.otherIdLookup<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.MobileGestalt.AllowedProtectedKeys<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>InverseDeviceID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.SafariServices.PasswordPicker.setRemoteAppProperties<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.StarBoard.session<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>YES<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.WebClips.read-write<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.accounts.allaccounts<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.airdrop.settings<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.appleaccount.app-hidden-from-icloud-settings<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.applecredentialmanager.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.appstored<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Repair<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>TestFlightFeedback<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.attentionawareness<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.attentionawareness.poll<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.bmk.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.calendar.allow-suggestions<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.canGetAppLinkInfo<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.canModifyAppLinkPermissions<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.carkit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.carkit.app<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.carkit.dnd<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.clouddocs.can-grant-access-to-document<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.contactsui<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.corerecents<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.coreservices.canopenactivity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.coreservices.lsuseractivityd.bestappsuggestion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.corespotlight.internal<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.corespotlight.search.internal<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.dmd.policy<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.donotdisturb.behavior.resolution.client-identifiers<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBNCSoundController<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBNCScreenController<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBNotificationBannerDestination<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBNotificationLegacyCarDestination<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBDashBoardCombinedListViewController<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBBulletinSpokenObserverGateway<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.donotdisturb.mode.assertion.client-identifiers<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.donotdisturb.control-center.module<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.donotdisturb.notifications<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.donotdisturb.mode.assertion.user-requested.client-identifiers<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.donotdisturb.control-center.module<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.donotdisturb.notifications<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.donotdisturb.settings.request.client-identifiers<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.donotdisturb.notifications<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.donotdisturb.settings.updates.client-identifiers<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.donotdisturb.notifications<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.donotdisturb.state.request.client-identifiers<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBStatusBarStateAggregator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBDashBoardCombinedListViewController<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.donotdisturb.control-center.module<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.donotdisturb.notifications<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.donotdisturb.awdmetrics<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.dashboard.bedtime<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.accessibility.visual.alerts<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.donotdisturb.state.updates.client-identifiers<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBStatusBarStateAggregator<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBDashBoardCombinedListViewController<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.donotdisturb.control-center.module<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.donotdisturb.notifications<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.donotdisturb.awdmetrics<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.dashboard.bedtime<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.accessibility.visual.alerts<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.externalaccessory.showallaccessories<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.game-center<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Account<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Games<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.game-center.bypass-authentication<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.healthkit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.healthkit.read_authorization_override<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>HKCategoryTypeIdentifierSleepAnalysis<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.healthkit.source_override<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.mobiletimer<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.healthkit.write_authorization_override<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>HKCategoryTypeIdentifierSleepAnalysis<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.hid.client.event-dispatch<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.hid.client.service-protected<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.hid.manager.client<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.homekit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.icfcallserver<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.ids.idsquery<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.ids.messaging<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.private.alloy.bulletinboard<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.private.alloy.donotdisturb<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.madrid<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.private.alloy.siri.phrasespotter<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.ids.messaging.urgent-priority<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.private.alloy.bulletinboard<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.private.alloy.donotdisturb<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.private.alloy.siri.phrasespotter<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.ids.registration-reset<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.imavcore.imavagent<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.imcore.imdpersistence.database-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.imcore.imremoteurlconnection<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.imcore.spi.database-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.in-app-payments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.iokit.powersource-control<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.kernel.darkboot<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.kernel.jetsam<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.librarian.can-get-application-info<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.lockdown.finegrained-get<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>NULL/ActivationState<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>NULL/BrickState<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>NULL/SBLockdownEverRegisteredKey<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.xcode.developerdomain/DeveloperStatus<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>NULL/BuildExpireTime<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.lockdown.finegrained-remove<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.mobile.iTunes.store/AppleID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.mobile.data_sync/Contacts<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.mobile.data_sync/Calendars<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.mobile.data_sync/Bookmarks<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.mobile.data_sync/Mail Accounts<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.mis.online_auth_agent<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.mobileinstall.allowedSPI<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>UninstallForLaunchServices<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>SetCapabilities<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Lookup<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.mobilesafari.searchengine<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.mobilestoredemo.enabledemo<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Manage<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.mobiletimerd<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.network.socket-delegate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.networkextension.configuration<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.persona.read<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.photos.service.demo<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.replay-kit<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.screen-time<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.security.container-manager<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.security.storage.Photos<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.suggestions.contacts<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.suggestions.events<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.system-keychain<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.tcc.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceAddressBook<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceCalendar<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceReminders<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServicePhotos<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServicePhotosAdd<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceMediaLibrary<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceMicrophone<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceCamera<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceWillow<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>kTCCServiceFaceID<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.tcc.manager<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.tty.settings<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.ubiquity-kvstore-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.weather<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.stocks<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.backboardd<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.Accessibility<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.Accessibility.SwitchControl<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.Accessibility.TouchAccommodations<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.AssistiveTouch<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.HearingAids<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.SpeakSelection<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.VoiceOverTouch<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.ZoomTouch<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.usernotifications.bundle-identifiers<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.donotdisturb<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.mobiletimer<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.usernotifications.example<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.vfs.open-by-id<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.private.xpc.launchd.app-server<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.proactive.ActionPrediction.predictions<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.proactive.AppPrediction.predictions<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.purplebuddy.budd.access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.remotenotification.access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.remotenotification.preferences<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.rootless.storage.proactivepredictions<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.runningboard.hereditarygrantoriginator<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.runningboard.primitiveattribute<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.runningboard.process-state<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.runningboard.request.identity<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.runningboard.terminatemanagedprocesses<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.runningboard.underlyingassertion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.securebackupd.access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.application-groups<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>group.com.apple.weather<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>group.com.apple.stocks<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.enterprise-volume-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.exception.mach-lookup.global-name<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.siri.activation.service<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.springboard.SBRendererService<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.appstored.xpc<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.appstored.xpc.request<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.system-container<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.security.system-groups<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>systemgroup.com.apple.sharedpclogging<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>systemgroup.com.apple.regulatory_images<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.sharing.Client<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.sharing.CoordinatedAlerts<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.sharing.Diagnostics<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.sharing.Session<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.siri.VoiceShortcuts.xpc<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.siri.activation.service<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.siri.client_lite<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.siri.external_request<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.sos.trigger<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard-ui.client<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.activateRemoteAlert<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.activateawayviewplugins<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.allowallcallurls<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.application-removability.proxy<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.lockScreenContentAssertion<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.multiwindow.triggerShowAllWindows<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.opensensitiveurl<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.openurlswhenlocked<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.setbadgestring<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.shortcutitems.fullaccess<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.statusbarstyleoverrides<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.springboard.statusbarstyleoverrides.coordinator<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIStatusBarStyleOverrideAutoAirPlayReady<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>UIStatusBarStyleOverrideAutoAirPlayPlaying<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.symptom_analytics.query<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.symptom_analytics.refresh<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.symptoms.NetworkOfInterest<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.telephonyutilities.callservicesd<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>access-calls<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>modify-calls<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>access-call-providers<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>access-moments<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.timed<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.tzlink.allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.ui-services-discovery<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.videoconference.allow-conferencing<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.visualvoicemail.client<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.voiceservices.tts.customvoice<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.voicetrigger.voicetriggerservice<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.watchlist.private<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.wifi.manager-access<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.wipedevice<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>fairplay-client<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>1172857363<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>keychain-access-groups<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>apple<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>com.apple.preferences<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>vm-pressure-level<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，包含的权限非常多，苹果并没有给出这些权限的说明，通常我们直接用就行了，这里有一篇文章做一些整理<a href="https://blog.0xbbc.com/2014/12/ios-entitlement%E5%88%86%E6%9E%90/">iOS Entitlement分析</a></p><h3 id="1-导出默认iOS应用程序的权限文件"><a href="#1-导出默认iOS应用程序的权限文件" class="headerlink" title="1. 导出默认iOS应用程序的权限文件"></a>1. 导出默认iOS应用程序的权限文件</h3><p>新建一个iOS工程，开启推送和<code>Sign With Apple</code>，编译，得到<code>xxx.app</code>，拿到可执行文件<code>xxx</code>，使用<code>ldid</code>导出得到</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">plist</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//Apple//DTD PLIST 1.0//EN&quot;</span> <span class="string">&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>aps-environment<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>development<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.developer.applesignin<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">string</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>com.apple.developer.team-identifier<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span>&gt;</span>9PCJKE8K5A<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span>&gt;</span>get-task-allow<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中<code>get-task-allow</code>为允许其他进程（如调试器）附加到您的应用程序。我们自己编译的App可以进行调试，而商店下载的App没有该选项</p><p>相比之下，默认的App权限少得可怜，我们可以吧SpringBoard的权限<code>SpringBoard.entitlement</code>签名到我们的程序<code>XXX</code>中，这样就可以有更多的操作权限了，例如访问沙盒外的路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldid -SSpringBoard.entitlement XXX</span><br></pre></td></tr></table></figure><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/AboutEntitlements.html">官方AboutEntitlements</a></li><li><a href="https://blog.0xbbc.com/2014/12/ios-entitlement%E5%88%86%E6%9E%90/">iOS Entitlement分析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS逆向】iOS动态库共享缓存</title>
      <link href="/2019-07-18/ios-dyld-shared-cache/"/>
      <url>/2019-07-18/ios-dyld-shared-cache/</url>
      
        <content type="html"><![CDATA[<p>我们在开发的过程中，经常会用到系统自带的库，如 Foundation，UIKit 等，这些库存放在什么地方呢，我们可以用 <code>MachOView</code>查看编译好的文件的<code>Load Command</code>看到依赖的动态库的路径</p><span id="more"></span><p><img src="/images/post/macho-framework.png" alt="macho-framework"></p><p>这里可以看到，动态库的路径为<code>/System/Library/Frameworks/AVFoundation.framework/AVFoundation</code>，我们连接到手机查看发现，<code>framework</code> 文件夹存在，但是并没有可执行文件</p><p><img src="/images/post/system-lib-path.png" alt="system-lib-path"></p><h2 id="动态库共享缓存"><a href="#动态库共享缓存" class="headerlink" title="动态库共享缓存"></a>动态库共享缓存</h2><p>从iOS 3.1开始，为了提高系统的性能，所有的系统库文件都被打包合并成一个大的缓存文件中，而原来的动态库文件则被去除了，系统直接去缓存文件中加载动态库，该共享缓存文件保存在<code>/System/Library/Caches/com.apple.dyld/</code>目录下</p><p><img src="/images/post/dyld-cache-path.png" alt="dyld-cache-path"></p><p>可以看到，该缓存库有<code>1547MB</code>，我们把共享库拷贝到本地</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@xx.xx.xx.xx:/System/Library/Caches/com.apple.dyld/dyld_shared_cache_arm64 ~/Desktop/dyld_shared_cache_arm64</span><br></pre></td></tr></table></figure><p>我们通过工具<code>dsc_extractor</code>把系统库从共享缓存库分离出来，该工具也在<a href="https://opensource.apple.com/tarballs/dyld/"><code>dyld</code></a>项目里面，在该项目中找到<code>/launch-cache/dsc_extractor.cpp</code>文件，我们需要自己编译一下，修改文件，只保留下面代码，其他删除</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #if 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 1</span></span><br><span class="line"><span class="comment">// test program</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*extractor_proc)</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* shared_cache_file_path, <span class="type">const</span> <span class="type">char</span>* extraction_root_path,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="type">void</span> (^progress)(<span class="type">unsigned</span> current, <span class="type">unsigned</span> total))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( argc != <span class="number">3</span> ) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;usage: dsc_extractor &lt;path-to-cache-file&gt; &lt;path-to-device-dir&gt;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void* handle = dlopen(&quot;/Volumes/my/src/dyld/build/Debug/dsc_extractor.bundle&quot;, RTLD_LAZY);</span></span><br><span class="line">    <span class="type">void</span>* handle = <span class="built_in">dlopen</span>(<span class="string">&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/usr/lib/dsc_extractor.bundle&quot;</span>, RTLD_LAZY);</span><br><span class="line">    <span class="keyword">if</span> ( handle == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;dsc_extractor.bundle could not be loaded\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    extractor_proc proc = (extractor_proc)<span class="built_in">dlsym</span>(handle, <span class="string">&quot;dyld_shared_cache_extract_dylibs_progress&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> ( proc == <span class="literal">NULL</span> ) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;dsc_extractor.bundle did not have dyld_shared_cache_extract_dylibs_progress symbol\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> result = (*proc)(argv[<span class="number">1</span>], argv[<span class="number">2</span>], ^(<span class="type">unsigned</span> c, <span class="type">unsigned</span> total) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d/%d\n&quot;</span>, c, total); &#125; );</span><br><span class="line">    <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;dyld_shared_cache_extract_dylibs_progress() =&gt; %d\n&quot;</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>使用<code>clang++</code>编译该源文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang++ -o dsc_extractor dsc_extractor.cpp</span><br></pre></td></tr></table></figure><p>编译后得到<code>dsc_extractor</code>，创建文件夹<code>dyld_shared_cache</code>，存放分离出来的动态库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dsc_extractor dyld_shared_cache_arm64 dyld_shared_cache</span><br></pre></td></tr></table></figure><p>在<code>dyld_shared_cache/System/Library/Frameworks</code>可以看到动态缓存库中的所有合并的系统库，找到<code>UIKit.framework/UIKit</code>，这个就是真实的UIKit，但是只有<code>8kb</code></p><p><img src="/images/post/uikit-file.jpg" alt="uikit-file"></p><p>使用MachOView工具查看，可以看到，UIKit引用<code>UIKitCore</code>，核心代码在<code>PrivateFrameworks/UIKitCore.framework/UIKitCore</code>，有<code>30MB</code></p><p><img src="/images/post/uikit-machoview.jpg" alt="uikit-machoview"></p><p>可以通过hopper分析系统库的代码</p><p><img src="/images/post/uikit-uibutton.jpg" alt="uikit-uibutton"></p><h2 id="动态库的加载"><a href="#动态库的加载" class="headerlink" title="动态库的加载"></a>动态库的加载</h2><p>在Mac&#x2F;iOS中，使用<code>/usr/lib/dyld</code>加载动态库，<code>[NSBundle loadBundle]</code>内部也是使用<code>dyld</code></p><p>dyld加载过程可细分为九步：</p><ol><li>设置运行环境：主要设置运行参数，环境变量，检查进程权限<br> 在<code>Product -&gt; Scheme -&gt; Edit Scheme -&gt; Argument</code>可以配置<code>dyld</code>参数，如: <code>DYLD_PRINT_ENV</code></li><li>加载共享缓存：也就是<code>dyld_shared_cache_arm64</code></li><li>实例化主程序：读取mach-o文件，加载链接库，segment等信息</li><li>加载插入的动态库<code>DYLD_INSERT_LIBRARIES</code></li><li>链接主程序</li><li>链接插入的动态库</li><li>执行弱符号绑定</li><li>执行初始化方法。</li><li>查找入口点并返回。</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ol><li><a href="https://www.dllhook.com/post/238.html">dyld详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS逆向】使用Cycript调试应用</title>
      <link href="/2019-07-03/ios-cycript/"/>
      <url>/2019-07-03/ios-cycript/</url>
      
        <content type="html"><![CDATA[<p>Cycript是由Cydia创始人Saurik推出的一款脚本语言，Cycript混合了OC、JavaScript语法的解释器，这意味着我们能够在一个命令中使用Oc或者JavaScript，甚至两者并用。它能够附加到正在运行的进程，能够查看和修改运行时的数据</p><span id="more"></span><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ol><li><p>通过cydia安装，自带的源<code>https://apt.bingner.com/</code>就有cycript</p> <img src="/images/post/cydia-cycript.png" class="" width="300" title="cydia-cycript"></li><li><p>打开 App ，通过 ssh 连接设备，然后进入Cycrypt调试模式</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 调试进程（PID=323）</span></span><br><span class="line">cycript -p 323</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调试进程（进程名）</span></span><br><span class="line">cycript -p SpringBoard</span><br><span class="line">cycript -p neteasemusic</span><br><span class="line"></span><br><span class="line"><span class="comment"># `Control+D`退出cycript模式</span></span><br></pre></td></tr></table></figure></li><li><p>获取进程Id</p><p> 需要先安装插件：<code>adv-cmds</code>（在自带源<code>https://apt.bingner.com/</code>可找到）</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有进程</span></span><br><span class="line">ps -A</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索进程</span></span><br><span class="line">ps -A | grep neteasemusic</span><br></pre></td></tr></table></figure></li><li><p>常用语法</p><ul><li>UIApp：<code>[UIApplication sharedApplication]</code></li><li>定义变量：<code>var 变量名 = 变量值</code></li><li>通过内存获得对象：<code>#内存地址</code></li><li>查看对象的所有成员：<code>*对象</code></li><li>获取所有已加载的OC类：<code>ObjectiveC.classes</code></li><li>获取当前内存中所有UITableViewCell（包含子类）的实例：<code>choose(UITableViewCell)</code></li><li>递归打印所有的子控件：<code>[view recursiveDescription].toString()</code></li><li>查看 bundleId: <code>[[NSBundle mainBundle] bundleIdentifier]</code></li></ul></li><li><p>函数</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">KenPrintIvars</span>(<span class="params">objc</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> x = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(i <span class="keyword">in</span> *objc)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x[i] = (*objc)[i];</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="引用外部脚本"><a href="#引用外部脚本" class="headerlink" title="引用外部脚本"></a>引用外部脚本</h2><p>这里使用<a href="https://github.com/CoderMJLee/mjcript"><code>mjcript</code></a>作为外部脚本引入，下载得到<code>mjcript.cy</code></p><p>把文件拷贝到手机上</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp mjcript.cy root@xx.xx.xx.xx:/usr/lib/cycript0.9/mjcript.cy</span><br></pre></td></tr></table></figure><p>把手机的文件拷贝到本地</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@xx.xx.xx.xx:/usr/lib/cycript0.9/mjcript.cy ~/Desktop/mjcript.cy</span><br></pre></td></tr></table></figure><p>加载脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 附加到进程</span></span><br><span class="line">cycript -p XXX</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载</span></span><br><span class="line">cy<span class="comment"># @import mjcript</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用脚本</span></span><br><span class="line">cy<span class="comment"># MJFrontVc()</span></span><br><span class="line"><span class="comment">#&quot;&lt;ZTPersonCenterViewController: 0x10520ba00&gt;&quot;</span></span><br></pre></td></tr></table></figure><p><code>mjcript</code>功能列表</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包名</span></span><br><span class="line">MJAppId;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bundle path</span></span><br><span class="line">MJAppPath;</span><br><span class="line"></span><br><span class="line"><span class="comment">// document path</span></span><br><span class="line">MJDocPath;</span><br><span class="line"></span><br><span class="line"><span class="comment">// caches path</span></span><br><span class="line">MJCachesPath;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载系统动态库（/System/Library/Frameworks/xxx.framework，/System/Library/Private/Frameworks/xxx.framework）</span></span><br><span class="line">MJLoadFramework(<span class="string">&quot;BluetoothManager&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// keyWindow</span></span><br><span class="line">MJKeyWin();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根控制器</span></span><br><span class="line">MJRootVc();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到显示在最前面的控制器</span></span><br><span class="line">MJFrontVc();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归打印UIViewController view的层级结构</span></span><br><span class="line">MJVcSubviews(vc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归打印最上层UIViewController view的层级结构</span></span><br><span class="line">MJFrontVcSubViews();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取按钮绑定的所有TouchUpInside事件的方法名</span></span><br><span class="line">MJBtnTouchUpEvent(btn);</span><br><span class="line"></span><br><span class="line"><span class="comment">// CG函数</span></span><br><span class="line">MJPointMake(x, y);</span><br><span class="line"></span><br><span class="line">MJSizeMake(w, h);</span><br><span class="line"></span><br><span class="line">MJRectMake(x, y, w, h);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归打印controller的层级结构</span></span><br><span class="line">MJChildVcs(vc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归打印view的层级结构</span></span><br><span class="line">MJSubviews(view);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为字符串 &quot;str&quot; @&quot;str&quot;</span></span><br><span class="line">MJIsString(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为数组 []、@[]</span></span><br><span class="line">MJIsArray(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否为数字 666 @666</span></span><br><span class="line">MJIsNumber(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有的子类</span></span><br><span class="line">MJSubclasses(className, reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有的对象方法</span></span><br><span class="line">MJInstanceMethods(className, reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有的对象方法名字</span></span><br><span class="line">MJInstanceMethodNames(className, reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有的类方法</span></span><br><span class="line">MJClassMethods(className, reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有的类方法名字</span></span><br><span class="line">MJClassMethodNames(className, reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有的成员变量</span></span><br><span class="line">MJIvars(obj, reg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印所有的成员变量名字</span></span><br><span class="line">MJIvarNames(obj, reg);</span><br></pre></td></tr></table></figure><blockquote><p>Cycript默认不支持中文，可以使用 unicode 字符表示中文<code>\**\**\**\**</code><br>技巧：使用python把中文转成unicode字符</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unicode(<span class="string">&quot;登录&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="封装cycript脚本"><a href="#封装cycript脚本" class="headerlink" title="封装cycript脚本"></a>封装cycript脚本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span></span>) &#123;</span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">sum</span> = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">minus</span> = <span class="keyword">function</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">&#125;)(<span class="built_in">exports</span>);</span><br></pre></td></tr></table></figure><p>导入(<code>/usr/lib/cycript0.9/test.cy</code>)，并引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> test</span><br><span class="line"></span><br><span class="line">test.<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">30</span>)     <span class="comment">// 31</span></span><br><span class="line">test.<span class="title function_">minus</span>(<span class="number">6</span>, <span class="number">2</span>)    <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>通过目录引用<code>/usr/lib/cycript0.9/com/mj/cycript.cy</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> com.<span class="property">mj</span>.<span class="property">mjcript</span></span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Cycript 可以直接附加到App 进行内存调试，可以查看和修改 UIViewController，UIView，可以动态修改和分析应用的业务逻辑，用起来非常方便</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="http://www.cycript.org/">Cycript 官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS逆向】使用Reveal查看AppUI结构</title>
      <link href="/2019-06-25/ios-reveal/"/>
      <url>/2019-06-25/ios-reveal/</url>
      
        <content type="html"><![CDATA[<p>在开发中，我们可能需要参考其它app界面的实现方式来寻找开发思路，通过Reveal工具，我们可以很方便的查看App在内存中的视图结构，如下(AppStore)</p><span id="more"></span><p><img src="/images/post/reveal_appstore.png" alt="RevealAppstore"></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>一台越狱的手机</li><li><a href="https://xclient.info/s/reveal.html">Reveal</a>，推荐使用v4以上的版本，支持USB链接，速度快</li></ol><h2 id="手机安装Reveal2Loader插件"><a href="#手机安装Reveal2Loader插件" class="headerlink" title="手机安装Reveal2Loader插件"></a>手机安装Reveal2Loader插件</h2><p>在Cydia搜索<code>Reveal2Loader</code>，该插件在<code>BissBoss</code>源，直接就能搜到，安装</p><img src="/images/post/reveal2loader.jpg" class="" width="300" title="Reveal2Loader"><p>安装完成后重启SpringBoard</p><img src="/images/post/restartspringboard.jpg" class="" width="300" title="RestartSpringBoard"><h2 id="拷贝Reveal服务文件到iPhone中"><a href="#拷贝Reveal服务文件到iPhone中" class="headerlink" title="拷贝Reveal服务文件到iPhone中"></a>拷贝Reveal服务文件到iPhone中</h2><p>打开mac上的Reveal，<code>Help</code>-&gt;<code>Show Reveal Library in Finder</code>-&gt;<code>iOS Library</code><br><img src="/images/post/reveal_ios_library.png" alt="Reveal2Loader"></p><p>进入目录<code>/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/RevealServer.framework</code>，也可以直接打开这个目录</p><p>将<code>RevealServer.framework</code>库中的<code>RevealServer</code>拷贝到手机<code>Library/RHRevealLoader/</code>并重命名为<code>libReveal.dylib</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/RevealServer.framework</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果手机上没有/Library/RHRevealLoader这个目录，需要先创建一下</span></span><br><span class="line">scp RevealServer root@xx.xx.xx.xx:/Library/RHRevealLoader/libReveal.dylib</span><br></pre></td></tr></table></figure><p>将<code>RevealServer.framework</code>复制到手机的<code>/System/Library</code>中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程拷贝目录</span></span><br><span class="line">scp -r RevealServer.framework root@xx.xx.xx.xx://System/Library/RevealServer.framework</span><br></pre></td></tr></table></figure><h2 id="重启手机"><a href="#重启手机" class="headerlink" title="重启手机"></a>重启手机</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall SpringBoard</span><br></pre></td></tr></table></figure><p>这时候设置里面会出现<code>Reveal</code>选项</p><img src="/images/post/setting_reveal.jpg" class="" width="300" title="SettingReveal"><p>我们进入<code>Enabled Applications</code>打开<code>AppStore</code></p><img src="/images/post/reveal_list_appstore.jpg" class="" width="300" title="EnableAppStore"><p>打开Mac上的Reveal，打开手机上的AppStore，可以看到Reveal识别到AppStore<br><img src="/images/post/reveal_list.png" alt="RevealList"></p><p>进入查看视图<br><img src="/images/post/reveal_appstore.png" alt="RevealAppstore"></p><p>Reveal可以看到视图结构，内存地址，还能看到<code>View</code>对应的<code>ViewController</code></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
            <tag> Reveal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【iOS逆向】使用Theos编写CydiaSubstrate插件</title>
      <link href="/2019-06-03/ios-theos/"/>
      <url>/2019-06-03/ios-theos/</url>
      
        <content type="html"><![CDATA[<p>常用的逆向手段有</p><ol><li>通过<code>Reveal</code>查看App的视图和ViewController</li><li>通过<code>cycript</code>动态调试正在运行的App</li><li>通过<code>class-dump</code>导出脱壳后的可执行文件的头文件</li><li>通过<code>IDA</code>或<code>Hopper</code>反编译脱壳后的可执行文件</li></ol><span id="more"></span><p>通过逆向确定了实现逻辑，可以通过<code>Theos</code>的tweak编写hook插件</p><h2 id="安装Theos"><a href="#安装Theos" class="headerlink" title="安装Theos"></a>安装Theos</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> --recursive https://github.com/theos/theos.git ~/theos</span><br></pre></td></tr></table></figure><h3 id="2-添加环境变量"><a href="#2-添加环境变量" class="headerlink" title="2. 添加环境变量"></a>2. 添加环境变量</h3><p>编辑<code>~/.bash_profile</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> THEOS=~/theos</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$THEOS</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>打开终端，这时候可以使用命令了<code>nic.pl</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ nic.pl</span><br><span class="line">NIC 2.0 - New Instance Creator</span><br><span class="line">------------------------------</span><br><span class="line">  [1.] iphone/activator_event</span><br><span class="line">  [2.] iphone/application_modern</span><br><span class="line">  [3.] iphone/application_swift</span><br><span class="line">  [4.] iphone/flipswitch_switch</span><br><span class="line">  [5.] iphone/framework</span><br><span class="line">  [6.] iphone/library</span><br><span class="line">  [7.] iphone/preference_bundle_modern</span><br><span class="line">  [8.] iphone/tool</span><br><span class="line">  [9.] iphone/tool_swift</span><br><span class="line">  [10.] iphone/tweak</span><br><span class="line">  [11.] iphone/xpc_service</span><br><span class="line">Choose a Template (required):</span><br></pre></td></tr></table></figure><h3 id="3-创建tweak项目"><a href="#3-创建tweak项目" class="headerlink" title="3. 创建tweak项目"></a>3. 创建tweak项目</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择 [10.] iphone/tweak</span></span><br><span class="line">Choose a Template (required): 10</span><br><span class="line"><span class="comment"># 项目名</span></span><br><span class="line">Project Name (required): mytweak</span><br><span class="line"><span class="comment"># 唯一标识bundleId（自己定）</span></span><br><span class="line">Package Name [com.yourcompany.mytweak]: com.bomo.mytweak</span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line">Author/Maintainer Name [bomo]: bomo</span><br><span class="line"><span class="comment"># 需要hook的App包名</span></span><br><span class="line">[iphone/tweak] MobileSubstrate Bundle filter [com.apple.springboard]: com.bomo.demo</span><br><span class="line"><span class="comment"># 安装完成后需要重启的App（貌似没用，可以生成后手动改）</span></span><br><span class="line">[iphone/tweak] List of applications to terminate upon installation (space-separated, <span class="string">&#x27;-&#x27;</span> <span class="keyword">for</span> none) [SpringBoard]:</span><br><span class="line">Instantiating iphone/tweak <span class="keyword">in</span> mytweak/...</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>得到4个文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">control</span><br><span class="line">Makefile</span><br><span class="line">mytweak.plist</span><br><span class="line">Tweak.x</span><br></pre></td></tr></table></figure><p><code>Tweak.x</code>就是源码文件，编写tweak代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">%hook ClassName</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hooking a class method</span></span><br><span class="line">+ (<span class="type">id</span>)sharedInstance &#123;</span><br><span class="line">    <span class="keyword">return</span> %orig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hooking an instance method with an argument.</span></span><br><span class="line">- (<span class="type">void</span>)messageName:(<span class="type">int</span>)argument &#123;</span><br><span class="line">    %log; <span class="comment">// Write a message about this call, including its class, name and arguments, to the system log.</span></span><br><span class="line"></span><br><span class="line">    %orig; <span class="comment">// Call through to the original function with its original arguments.</span></span><br><span class="line">    %orig(<span class="literal">nil</span>); <span class="comment">// Call through to the original function with a custom argument.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// If you use %orig(), you MUST supply all arguments (except for self and _cmd, the automatically generated ones.)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hooking an instance method with no arguments.</span></span><br><span class="line">- (<span class="type">id</span>)noArguments &#123;</span><br><span class="line">    %log;</span><br><span class="line">    <span class="type">id</span> awesome = %orig;</span><br><span class="line">    [awesome doSomethingElse];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> awesome;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Always make sure you clean up after yourself; Not doing so could have grave consequences!</span></span><br><span class="line">%end</span><br></pre></td></tr></table></figure><h2 id="编写Tweak"><a href="#编写Tweak" class="headerlink" title="编写Tweak"></a>编写Tweak</h2><p><code>Logos</code>语法其实是CydiaSubstruct框架提供的一组宏定义。便于开发者使用宏进行HOOK操作。语法简单，功能强大且稳定。</p><p>Logos语法分为三大类</p><ul><li>Top level</li><li>Block level</li><li>Function level</li></ul><h3 id="Top-level"><a href="#Top-level" class="headerlink" title="Top level"></a>Top level</h3><p>这个TopLevel指令不放在BlockLevel中。<br><code>%config</code>全局配置<br><code>%hookf</code>：用于hook符号（C&#x2F;C++方法）<br><code>%ctor</code>会在动态库(dylib)被加载的时候调用，用于初始化<br><code>%dtor</code>会在程序结束的时候调用，通常用于回收资源</p><h3 id="Block-level"><a href="#Block-level" class="headerlink" title="Block level"></a>Block level</h3><p>这一类型的指令会开辟一个代码块，以<code>%end</code>结束</p><h4 id="group"><a href="#group" class="headerlink" title="%group"></a>%group</h4><p>与<code>%init</code>配合使用，<code>%group</code>用于给代码块分组，<code>%init</code>用于让代码块生效</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">%group iOS8</span><br><span class="line">%hook IOS8ClassName</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> your code here</span></span><br><span class="line">%end</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%group iOS9</span><br><span class="line">%hook IOS9ClassName</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> your code here</span></span><br><span class="line">%end</span><br><span class="line">%end</span><br><span class="line"></span><br><span class="line">%ctor &#123;</span><br><span class="line">    <span class="keyword">if</span> (kCFCoreFoundationVersionNumber &gt; <span class="number">1200</span>) &#123;</span><br><span class="line">        %init(iOS9);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        %init(iOS8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="hook"><a href="#hook" class="headerlink" title="%hook"></a>%hook</h4><p>用于hook类方法，<code>%new</code>用于声明新方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">%hook SBApplicationController</span><br><span class="line"></span><br><span class="line"><span class="comment">// hook实例方法</span></span><br><span class="line">-(<span class="built_in">NSInteger</span>)method:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="comment">// 调用原来方法</span></span><br><span class="line">    <span class="built_in">NSInteger</span> result = %orig;</span><br><span class="line">    <span class="comment">// 修改返回值</span></span><br><span class="line">    <span class="keyword">return</span> result + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增类方法</span></span><br><span class="line">%new</span><br><span class="line">+ (<span class="built_in">NSInteger</span>)someNewMethod &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure><h4 id="subclass"><a href="#subclass" class="headerlink" title="%subclass"></a>%subclass</h4><p>用于新增类，新增方法都要加上<code>%new</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">%subclass MyNewObject : <span class="built_in">NSObject</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明属性</span></span><br><span class="line">%property (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="type">id</span> someValue2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">- (<span class="type">id</span>)init &#123;</span><br><span class="line">    <span class="keyword">self</span> = %orig;</span><br><span class="line">    [<span class="keyword">self</span> setSomeValue:<span class="string">@&quot;value&quot;</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// someValue和setSomeValue:方法等价于声明属性</span></span><br><span class="line"><span class="comment">// `@property (nonatomic, retain) id someValue;`</span></span><br><span class="line">%new</span><br><span class="line">- (<span class="type">id</span>)someValue &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(someValue));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%new</span><br><span class="line">- (<span class="type">void</span>)setSomeValue:(<span class="type">id</span>)value &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(someValue), value, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%end</span><br></pre></td></tr></table></figure><p>使用新类<code>MyNewObject</code></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyNewObject *myObject = [[%c(MyNewObject) alloc] init];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;myObject: %@&quot;</span>, [myObject someValue]);</span><br></pre></td></tr></table></figure><h3 id="Function-level"><a href="#Function-level" class="headerlink" title="Function level"></a>Function level</h3><p>这一块的指令就放在方法中。<br><code>%init</code>：如上，与<code>%group</code>配合使用<br><del><code>%class</code>：废弃不用</del><br><code>%c(className)</code>：生成一个Class对象，如：%c(NSObject)，相当于NSObject.class<br><code>%orig</code>：调用方法原来的实现，包括参数<br><code>%log</code>：打印方法和参数</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h3><p>再<code>Makefile</code>配置编译选项和设备信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装完成后重启SB</span></span><br><span class="line">after-install::</span><br><span class="line">    install.exec <span class="string">&quot;killall -9 SpringBoard&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是RELEASE，设置DEBUG=0</span></span><br><span class="line">DEBUG = 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 越狱iPhone的ip地址和端口(也可以配置到 ~/.bash_profile 上)</span></span><br><span class="line">THEOS_DEVICE_IP = 192.168.1.2</span><br><span class="line">THEOS_DEVICE_PORT = 22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定支持的处理器架构</span></span><br><span class="line">ARCHS = armv7 arm64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定需要的SDK版本iphone:Base SDK:Deployment Target</span></span><br><span class="line">TARGET = iphone:latest:9.0  //最新的SDK，程序发布在iOS9.0以上</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入框架，多个框架时用空格隔开</span></span><br><span class="line">mytweak_FRAMEWORKS = UIKit</span><br><span class="line">mytweak_PRIVATE_FRAMEWORKS = AppSupport</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接libsqlite3.0.dylib、libz.dylib和dylib1.o</span></span><br><span class="line">mytweak_LDFLAGS = -lz –lsqlite3.0 –dylib1.o</span><br></pre></td></tr></table></figure><h3 id="安装到手机"><a href="#安装到手机" class="headerlink" title="安装到手机"></a>安装到手机</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译（make package包含了make，这个也可以省略）</span></span><br><span class="line">make</span><br><span class="line"><span class="comment"># 打包（release）</span></span><br><span class="line">make packages debug=0</span><br><span class="line"><span class="comment"># 安装到手机上（需要设置环境变量THEOS_DEVICE_IP和THEOS_DEVICE_PORT）</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>合并起来</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make packages debug=0 &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>包会被安装到<code>/Library/MobileSubstrate/DynamicLibraries/</code>目录下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/Library/MobileSubstrate/DynamicLibraries/xxx.plist（存放要hook App的bundleId）</span><br><span class="line">/Library/MobileSubstrate/DynamicLibraries/xxx.dylib</span><br></pre></td></tr></table></figure><h2 id="资源处理"><a href="#资源处理" class="headerlink" title="资源处理"></a>资源处理</h2><p>有时候我们有一些资源需要添加到插件中，例如图片<br>在tweak中使用到的资源，可以放到工程的<code>layout/Library/PreferenceLoader/Preferences/xxx</code>下面，在代码中通过绝对路径读取，工程中的<code>layout</code>路径相当于手机的根路径，该路径下的文件会被安装到手机对应的路径下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- Makefile</span><br><span class="line">- control</span><br><span class="line">- tweakxxx.plist</span><br><span class="line">- layout/Library/PreferenceLoader/Preferences</span><br><span class="line">   |- mytweak</span><br><span class="line">        |- icon.png</span><br></pre></td></tr></table></figure><p>上面<code>icon.png</code>资源会被安装到手机的<code>/Library/PreferenceLoader/Preferences/mytweak/icon.png</code>路径下</p><h3 id="多文件"><a href="#多文件" class="headerlink" title="多文件"></a>多文件</h3><p>插件代码多的时候，可能会有多个源文件（<code>Person.m</code>, <code>Tweak1.mx</code>, <code>Tweak2.mx</code>），如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- Makefile</span><br><span class="line">- control</span><br><span class="line">- tweakxxx.plist</span><br><span class="line">- src</span><br><span class="line">   |- Tweak1.mx</span><br><span class="line">   |- Tewak2.mx</span><br><span class="line">   |- Model</span><br><span class="line">        |- Person.h</span><br><span class="line">        |- Person.m</span><br></pre></td></tr></table></figure><p>需要在Makefile里面配置需要编译的文件，使用空格隔开</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweakwechat_FILES = src/Tweak1.xm src/Tweak2.xm src/Model/Person.m</span><br></pre></td></tr></table></figure><p>如果文件多，可以使用通配符<code>*</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tweakwechat_FILES = src/*.xm src/Model/*.m</span><br></pre></td></tr></table></figure><p>在<code>Tweak1.mx</code>中引用其他头文件的时候需要使用<code>相对路径</code>，如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="string">&quot;Model/Person.h&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="Theos-Tweak原理"><a href="#Theos-Tweak原理" class="headerlink" title="Theos-Tweak原理"></a>Theos-Tweak原理</h2><ol><li><code>make</code>编译代码为动态库dylib</li><li><code>make package</code>将 dylib 和资源打包成 deb</li><li><code>make install</code>将 deb 发送到手机上，并通过 cydia 安装 deb</li><li>插件会安装到<code>/Library/MobileSubstrate/DynamicLibraries</code></li><li>启动App，<code>Cydia Substrate</code>会根据已装插件的plist里面配置的bundleId与App的bundleId一致，就会自动注入对应的dylib</li><li>dylib会根据编写的代码自动hook对应的类和方法</li></ol><p>卸载插件只需要删除<code>/Library/MobileSubstrate/DynamicLibraries</code>里面对应的<code>xxx.dylib</code>和<code>xxx.plist</code>即可，如果有包含资源的话，还需要把对应的资源删掉</p><blockquote><p>未脱壳的App也可以注入dylib<br>在内存中修改逻辑，不修改原来的App</p></blockquote><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul><li><a href="http://iphonedevwiki.net/index.php/Logos">http://iphonedevwiki.net/index.php/Logos</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 签名机制</title>
      <link href="/2019-05-21/ios-sign/"/>
      <url>/2019-05-21/ios-sign/</url>
      
        <content type="html"><![CDATA[<p>我们都知道，iOS 有非常严格的签名机制，来限制App的安装方式，iOS 用户（不越狱）只能通过（开发者证书，AppStore）安装应用，iOS 的签名机制与 https 的有写类似，理解了 https 就能理解 iOS 的签名机制</p><span id="more"></span><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>先做一些知识储备</p><h3 id="加解密"><a href="#加解密" class="headerlink" title="加解密"></a>加解密</h3><ul><li>对称加密：AES，DES，3DES（其中DES，3DES已经不推荐使用了）</li><li>非对称加密：RSA（使用公钥加密私钥解密，或者私钥解密公钥加密）</li></ul><blockquote><p>对称加密：解决明文传输的问题<br>非对称加密：解决对称加密带来的<code>密钥配送问题</code>，即使密钥被窃听数据也不会被解密</p></blockquote><p>由于非对称加密的效率比对称加密的效率要慢很多，所以通常使用<code>混合密码</code>解决（主流的安全协议都使用这种方式，如https）</p><blockquote><ol><li>使用非对称加密交换密钥</li><li>然后使用对称加密传输数据</li></ol></blockquote><p>上面还是存在1个问题</p><blockquote><ol><li>如何确保收到的数据是原始的数据，而不是被篡改的数据</li><li>使用了非对称加密，可以保证数据不会被解密，但是由于公钥可以被监听用于加密数据，中间人可以伪造公钥对数据掉包</li></ol></blockquote><h3 id="数据验证"><a href="#数据验证" class="headerlink" title="数据验证"></a>数据验证</h3><p>数据验证通常使用<code>单向散列函数</code>生成数据指纹，用于唯一标识数据，常见的算法有</p><ul><li>MD5</li><li>SHA-1</li><li>SHA-2</li><li>SHA-3</li></ul><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h4><p>数字签名就是<code>数据指纹</code>的一个应用，用于验证数据的完整性（是否被篡改）</p><p>上面我们知道了非对称加密，可以用私钥加密，公钥解密，在数据传输工程中<br>由于验证操作并不敏感，通常发送者可以使用<code>私钥签名</code>数据指纹，然后接受者使用<code>公钥解密</code><br>由于私钥只有发送者拥有，所以能确定数据指纹一定是发送者发送的</p><h3 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h3><p>由于上面数据传输用到的公钥是公开传输的，所以数据可能被掉包，我们需要确保拿到的公钥就是真正的发送者发过来的，而不是中间人伪造的，这个时候就需要<code>证书机构</code>（Certificate Authority，CA）参与公钥的交换，以保证传输过程的公钥的正确</p><blockquote><p>由于 CA 的公钥是公开的，所以 CA 的公钥可以认为不会被伪造，所以可以认为发送方和接收方的通信是安全的<br>因为任何人都可以充当 CA 的角色，这里所说的 CA 是指权威（可信任）的机构</p></blockquote><p><code>权威证书机构</code>这里有两点可以确定的</p><ul><li>发送者和接收者都有有 CA 的公钥，可以验证 CA 发送的数据，这就确保了 CA 的通信过程是安全的</li><li>接收方（公钥） -&gt; CA -&gt; 发送方</li><li>发送方利用接收方的公钥就能安全的发送（公钥）数据给接收方了，这个过程公钥交换也是安全的</li></ul><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>在 https通信过程中，证书会从服务端发给客户端，而不是从 CA 发送给客户端</p><p>服务器会先向 CA 发送公钥和申请信息（资格，身份信息），CA 把服务器公钥和颁发信息（颁发机构，证书有效期等）打包并用私钥签名给服务器，然后走下面流程<br><img src="/images/post/https_client_server_ca.png" alt="https-client-server-ca"></p><h2 id="苹果证书"><a href="#苹果证书" class="headerlink" title="苹果证书"></a>苹果证书</h2><p>苹果的证书的认证就类似于上面说到的 <code>https</code>，我们知道，苹果的开发证书有下面几个文件</p><ul><li><code>*.certSigningRequest</code>: Mac用 <code>Mac公钥</code> 生成<code>*.certSigningRequest</code>文件</li><li><code>*.cer</code>: Apple使用 <code>Apple私钥</code> 签名 <code>Mac公钥</code>，生成 <code>cer</code> 文件</li><li><code>*.mobileprovision</code>: Apple 使用<code>Apple 私钥</code>签名<code>应用信息</code>(bundleId、entitlement、deviceId)和 <code>Mac公钥</code>，生成<code>mobileprovision</code>文件</li><li><code>*.p12</code>: 包含 <code>Mac公钥</code>和<code>Mac私钥</code>，确保多台设备的密钥对是一样的</li></ul><p><img src="/images/post/ios-sign.png" alt="ios-sign-flow"></p><p><img src="/images/post/ios-sign-validate.jpg" alt="ios-sign-validate"></p><blockquote><p>上面是开发时候的证书处理流程，如果是 <code>AppStore</code> 下载的包，则没有<code>mobileprovision</code>文件，经过苹果审核的App，能确保下载来源只需要，不需要再进行多余的验证操作，只需要验证App 是使用<code>Apple私钥</code>签名的就行</p></blockquote><p>上面流程可以看出来，Mac公钥并没有直接传给iOS设备，而是通过苹果的签名的证书来，这里的<strong>苹果就相当于 CA 的角色</strong>，整个流程的密钥都是安全的，修改这个流程中的任何数据都会导致无法验证通过，理解了 https 的安全加密就能很好的理解苹果的签名</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS旋转屏幕</title>
      <link href="/2019-05-06/ios-orientation/"/>
      <url>/2019-05-06/ios-orientation/</url>
      
        <content type="html"><![CDATA[<p>iOS屏幕旋转控制，自动旋转，手动旋转，锁定屏幕</p><span id="more"></span><h2 id="1-设置App支持的旋转方向（2种方式）"><a href="#1-设置App支持的旋转方向（2种方式）" class="headerlink" title="1. 设置App支持的旋转方向（2种方式）"></a>1. 设置App支持的旋转方向（2种方式）</h2><h3 id="1-通过工程设置"><a href="#1-通过工程设置" class="headerlink" title="1. 通过工程设置"></a>1. 通过工程设置</h3><p><code>General</code>-&gt;<code>Deployment Info</code>-&gt;<code>Device Orientation</code>，勾选支持的方向</p><h3 id="2-通过代码设置（AppDelegate）"><a href="#2-通过代码设置（AppDelegate）" class="headerlink" title="2. 通过代码设置（AppDelegate）"></a>2. 通过代码设置（AppDelegate）</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">application</span>(<span class="keyword">_</span> <span class="params">application</span>: <span class="type">UIApplication</span>, <span class="params">supportedInterfaceOrientationsFor</span> <span class="params">window</span>: <span class="type">UIWindow</span>?) -&gt; <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> .allButUpsideDown</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方式1存在一个问题：如果勾选了多个方向，如果横屏进入App，会出现首页横屏的情况，即使设置了<code>VC</code>只支持竖屏，推荐使用方式2</p></blockquote><h2 id="2-ViewController旋转控制"><a href="#2-ViewController旋转控制" class="headerlink" title="2. ViewController旋转控制"></a>2. ViewController旋转控制</h2><p>通常在需要旋转的ViewController，重写下面三个方法即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 控制是否支持自动旋转，回根据设备方向自动调整布局，例如视频横屏播放，微信公众号文章横屏阅读等</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> shouldAutorotate: <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 设置首次进入ViewController时的方向，之后再根据设备方向变动调整，例如可以保证无论设备是否横屏，首次进入一个ViewController的时候为竖屏</span></span><br><span class="line"><span class="comment">/// 注意：这里的设置仅对第二个页面有效，第一个页面无效</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> preferredInterfaceOrientationForPresentation: <span class="type">UIInterfaceOrientation</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> .portrait</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 设置支持旋转的方向</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> supportedInterfaceOrientations: <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> .landscape</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-容器"><a href="#3-容器" class="headerlink" title="3. 容器"></a>3. 容器</h2><p>如果ViewController在容器控制器里面的话（<code>UINavigationController</code>和<code>UITabBarController</code>）需要重写容器，让其指向子控制器</p><p><code>TabBarController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TabBarController</span>: <span class="title class_">UITabBarController</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> shouldAutorotate: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController<span class="operator">?</span>.shouldAutorotate <span class="operator">??</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> supportedInterfaceOrientations: <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController<span class="operator">?</span>.supportedInterfaceOrientations <span class="operator">??</span> <span class="type">UIInterfaceOrientationMask</span>.portrait</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> preferredInterfaceOrientationForPresentation: <span class="type">UIInterfaceOrientation</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.selectedViewController<span class="operator">?</span>.preferredInterfaceOrientationForPresentation <span class="operator">??</span> .portrait</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NavigationController</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NavigationController</span>: <span class="title class_">UINavigationController</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> shouldAutorotate: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.topViewController<span class="operator">?</span>.shouldAutorotate <span class="operator">??</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> supportedInterfaceOrientations: <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.topViewController<span class="operator">?</span>.supportedInterfaceOrientations <span class="operator">??</span> <span class="type">UIInterfaceOrientationMask</span>.portrait</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> preferredInterfaceOrientationForPresentation: <span class="type">UIInterfaceOrientation</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.topViewController<span class="operator">?</span>.preferredInterfaceOrientationForPresentation <span class="operator">??</span> .portrait</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-强制旋转"><a href="#4-强制旋转" class="headerlink" title="4. 强制旋转"></a>4. 强制旋转</h2><p>iOS没有提供公开的API直接修改屏幕方向，通常我们用<code>kvc</code>的方式实现</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 强制竖屏</span></span><br><span class="line"><span class="type">UIDevice</span>.current.setValue(<span class="type">UIInterfaceOrientation</span>.portrait.rawValue, forKey: <span class="string">&quot;orientation&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制左横屏</span></span><br><span class="line"><span class="type">UIDevice</span>.current.setValue(<span class="type">UIInterfaceOrientation</span>.landscapeLeft.rawValue, forKey: <span class="string">&quot;orientation&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="5-方向锁定"><a href="#5-方向锁定" class="headerlink" title="5. 方向锁定"></a>5. 方向锁定</h2><p>通过控制VC支持<code>supportedInterfaceOrientations</code>的方向，就可以控制锁定了，只返回一种方向，就能实现锁定的功能</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 定义锁定的方向</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> lookOrientation: <span class="type">UIInterfaceOrientation</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置当前的方向（锁定屏幕方向）</span></span><br><span class="line"><span class="keyword">self</span>.lookOrientation <span class="operator">=</span> <span class="type">UIApplication</span>.shared.statusBarOrientation</span><br><span class="line"><span class="comment">// 取消当前的方向（解锁）</span></span><br><span class="line"><span class="keyword">self</span>.lookOrientation <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 重载用于控制锁定</span></span><br><span class="line"><span class="keyword">override</span> <span class="keyword">var</span> supportedInterfaceOrientations: <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> orientation <span class="operator">=</span> <span class="keyword">self</span>.lookOrientation &#123;</span><br><span class="line">        <span class="comment">// 锁定方向</span></span><br><span class="line">        <span class="keyword">return</span> orientation.orientationMask</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 默认可选旋转</span></span><br><span class="line">        <span class="keyword">return</span> .allButUpsideDown</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">UIInterfaceOrientation</span> &#123;</span><br><span class="line">    <span class="comment">// UIInterfaceOrientation转换为UIInterfaceOrientationMask</span></span><br><span class="line">    <span class="keyword">var</span> orientationMask: <span class="type">UIInterfaceOrientationMask</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .unknown:</span><br><span class="line">            <span class="keyword">return</span> .allButUpsideDown</span><br><span class="line">        <span class="keyword">case</span> .portrait:</span><br><span class="line">            <span class="keyword">return</span> .portrait</span><br><span class="line">        <span class="keyword">case</span> .portraitUpsideDown:</span><br><span class="line">            <span class="keyword">return</span> .portraitUpsideDown</span><br><span class="line">        <span class="keyword">case</span> .landscapeLeft:</span><br><span class="line">            <span class="keyword">return</span> .landscapeLeft</span><br><span class="line">        <span class="keyword">case</span> .landscapeRight:</span><br><span class="line">            <span class="keyword">return</span> .landscapeRight</span><br><span class="line">        <span class="keyword">@unknown</span> <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> .allButUpsideDown</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StafulWidget自动释放资源Mixin</title>
      <link href="/2019-04-25/flutter-dispose-mixin/"/>
      <url>/2019-04-25/flutter-dispose-mixin/</url>
      
        <content type="html"><![CDATA[<p>平常开发中，经常会用到释放资源的问题，最常见的就是网络请求了，也是最经常被忽略的问题，例如，我们进入一个新的页面会请求数据，在请求回来之前，这个时候如果用户退出了该页面，就需要及时的释放资源（cancel掉之前的请求），避免资源被释放带来的其他问题，例如空指针，而页面中，可能不止网络请求，可能有定时器，动画，等资源都需要及时的释放，这使得我们管理起来非常麻烦</p><span id="more"></span><p>我们用一个网络请求的例子来，我们进入页面后，点击按钮，请求<code>github</code>首页，请求成功或失败后更新文字，网络请求使用<code>dio</code>库</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:dio/dio.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TestPageState createState() =&gt; _TestPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TestPage</span>&gt; </span>&#123;</span><br><span class="line">  CancelToken _token = CancelToken();</span><br><span class="line">  <span class="built_in">String</span> _content = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// 如果没有被释放，则释放掉</span></span><br><span class="line">    <span class="keyword">if</span> (_token != <span class="keyword">null</span> &amp;&amp; !_token.isCancelled) &#123;</span><br><span class="line">      _token.cancel();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;test cancel&quot;</span>)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            RaisedButton(</span><br><span class="line">              onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="keyword">var</span> url = <span class="string">&quot;https://www.github.com&quot;</span>;</span><br><span class="line">                  _token = CancelToken();</span><br><span class="line"></span><br><span class="line">                  Dio dio = <span class="keyword">new</span> Dio();</span><br><span class="line">                  Response response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(url, cancelToken: _token);</span><br><span class="line">                  <span class="built_in">int</span> code = response.statusCode;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (code == <span class="number">200</span>) &#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _content = <span class="string">&quot;请求成功&quot;</span>;</span><br><span class="line">                    &#125;);  </span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _content = <span class="string">&quot;请求失败&quot;</span>;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (!CancelToken.isCancel(e)) &#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _content = <span class="string">&quot;请求失败&quot;</span>;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              child: Text(<span class="string">&quot;请求数据&quot;</span>)</span><br><span class="line">            ),</span><br><span class="line">            Text(_content)</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们不在<code>dispose</code>取消请求的话，用户离开页面后，由于请求没有被<code>cancel</code>，当网络请求回来后，会出现资源被释放导致<code>崩溃</code></p><p>上面例子可以看到，我们需要管理<code>CancelToken</code>，在dispose的时候进行释放，如果需要dispose的对象比较多的时候，管理起来是崩溃的，我们可以把释放的操作封装到<code>mixin</code>中进行统一管理，释放对象（例如：CancelToken）通过闭包管理，而不需要单独维护</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@optionalTypeArgs</span></span><br><span class="line"><span class="keyword">mixin</span> AutomaticDisposeStatefulWidgetMixin&lt;T <span class="keyword">extends</span> StatefulWidget&gt; <span class="keyword">on</span> State&lt;T&gt; &#123;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">Function</span>&gt; _disposeFunc = <span class="built_in">List</span>&lt;<span class="built_in">Function</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> addToDispose(<span class="built_in">Function</span> func) &#123;</span><br><span class="line">    _disposeFunc.add(func);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    <span class="comment">// dispose all func</span></span><br><span class="line">    _disposeFunc.forEach((f) =&gt; f());</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以改为</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TestPageState createState() =&gt; _TestPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TestPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TestPage</span>&gt; <span class="title">with</span> <span class="title">AutomaticDisposeStatefulWidgetMixin</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> _content = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: Text(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Column(</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            RaisedButton(</span><br><span class="line">              onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="keyword">var</span> url = <span class="string">&quot;https://www.github.com&quot;</span>;</span><br><span class="line">                  <span class="keyword">var</span> token = CancelToken();</span><br><span class="line"></span><br><span class="line">                  <span class="comment">// 在widget释放时候执行</span></span><br><span class="line">                  addToDispose(() &#123;</span><br><span class="line">                    token.cancel();</span><br><span class="line">                  &#125;);</span><br><span class="line"></span><br><span class="line">                  Dio dio = <span class="keyword">new</span> Dio();</span><br><span class="line">                  Response response = <span class="keyword">await</span> dio.<span class="keyword">get</span>(url, cancelToken: token);</span><br><span class="line">                  <span class="built_in">int</span> code = response.statusCode;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (code == <span class="number">200</span>) &#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _content = <span class="string">&quot;请求成功&quot;</span>;</span><br><span class="line">                    &#125;);  </span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _content = <span class="string">&quot;请求失败&quot;</span>;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (!CancelToken.isCancel(e)) &#123;</span><br><span class="line">                    setState(() &#123;</span><br><span class="line">                      _content = <span class="string">&quot;请求失败&quot;</span>;</span><br><span class="line">                    &#125;);</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              child: Text(<span class="string">&quot;请求数据&quot;</span>)</span><br><span class="line">            ),</span><br><span class="line">            Text(_content)</span><br><span class="line">          ],</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，除了dispose网络请求，可以在block做任何操作，例如关闭streamController，关闭通知监听等</p><blockquote><p>对于网络请求的释放，一定要在不需要的时候释放<br>对于网络请求的释放，一定要在不需要的时候释放<br>对于网络请求的释放，一定要在不需要的时候释放</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter实现一个ProgressHUD</title>
      <link href="/2019-04-24/flutter-hud/"/>
      <url>/2019-04-24/flutter-hud/</url>
      
        <content type="html"><![CDATA[<p>用惯了iOS的<a href="https://github.com/SVProgressHUD/SVProgressHUD">SVProgressHUD</a>，但是在flutter pub上的并没有找到类似的实现，于是自己实现一个</p><span id="more"></span><p>主要实现四个基本功能</p><ul><li>Loading显示</li><li>成功显示</li><li>错误显示</li><li>进度显示：环形进度条和文字</li></ul><h2 id="库地址"><a href="#库地址" class="headerlink" title="库地址"></a>库地址</h2><p><a href="https://pub.dartlang.org/packages/bmprogresshud">https://pub.dartlang.org/packages/bmprogresshud</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">bmprogresshud:</span> <span class="string">^0.0.2</span></span><br></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://user-gold-cdn.xitu.io/2019/4/24/16a4fd4d6d48cc8f?w=302&h=599&f=gif&s=387661" alt="演示效果"></p><ol><li>由于HUD是盖在视图上面的，通常是整个页面，故考虑直接在目标Widget上套一层<code>ProgressHUD</code></li><li>我们需要在特定的地方获取<code>ProgressHUD</code>进行操作，这个有点类似<code>Navigator</code>，参考Navigator的用法，通过<code>of</code>方法获得</li></ol><p>实际效果如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(<span class="string">&quot;hud demo&quot;</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: ProgressHud(</span><br><span class="line">      child: Container(</span><br><span class="line">        child: Builder(builder: (context) &#123;</span><br><span class="line">          <span class="keyword">return</span> RaisedButton(</span><br><span class="line">            onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">              ProgressHud.of(context).<span class="keyword">show</span>(ProgressHudType.loading, <span class="string">&quot;加载中...&quot;</span>);</span><br><span class="line">              <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>));</span><br><span class="line">              ProgressHud.of(context).dismiss();</span><br><span class="line">            &#125;,</span><br><span class="line">            child: Text(<span class="string">&quot;加载数据&quot;</span>),</span><br><span class="line">          );</span><br><span class="line">        &#125;),</span><br><span class="line">      ),</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h2><h3 id="1-显示和隐藏渐变"><a href="#1-显示和隐藏渐变" class="headerlink" title="1. 显示和隐藏渐变"></a>1. 显示和隐藏渐变</h3><p>通过属性<code>opacity</code>和<code>AnimationController</code>控制透明度，当透明度为0时候，通过<code>Offstage</code>控制控件的隐藏</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProgressHudState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ProgressHud</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  AnimationController _animation;</span><br><span class="line">  <span class="keyword">var</span> _opacity = <span class="number">0.0</span>;</span><br><span class="line">  <span class="keyword">var</span> _isVisible = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    _animation = AnimationController(</span><br><span class="line">      duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">200</span>), </span><br><span class="line">      vsync: <span class="keyword">this</span></span><br><span class="line">    )..addListener(() &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        <span class="comment">// 修改透明度</span></span><br><span class="line">        _opacity = _animation.value;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)..addStatusListener((status) &#123;</span><br><span class="line">      <span class="keyword">if</span> (status == AnimationStatus.dismissed) &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="comment">// 隐藏动画结束，隐藏控件</span></span><br><span class="line">          _isVisible = <span class="keyword">false</span>;          </span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过动画的执行方向控制动画</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 显示动画</span></span><br><span class="line">_animation.forward();</span><br><span class="line">setState(() &#123;</span><br><span class="line">  _isVisible = <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐藏动画</span></span><br><span class="line">_animation.reverse();</span><br></pre></td></tr></table></figure><h3 id="2-通过BuildContext获得Element树的ProgressHUD"><a href="#2-通过BuildContext获得Element树的ProgressHUD" class="headerlink" title="2. 通过BuildContext获得Element树的ProgressHUD"></a>2. 通过<code>BuildContext</code>获得Element树的<code>ProgressHUD</code></h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProgressHud</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> ProgressHudState of(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> context.ancestorStateOfType(<span class="keyword">const</span> TypeMatcher&lt;ProgressHudState&gt;());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建HUD"><a href="#3-创建HUD" class="headerlink" title="3. 创建HUD"></a>3. 创建HUD</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Widget _createHudView(Widget child) &#123;</span><br><span class="line">  <span class="keyword">return</span> Stack(</span><br><span class="line">    children: &lt;Widget&gt;[</span><br><span class="line">      <span class="comment">// 如果不想屏蔽用户操作，ignoring设置为true，这里设置为无法响应</span></span><br><span class="line">      IgnorePointer(</span><br><span class="line">        ignoring: <span class="keyword">false</span>,</span><br><span class="line">        child: Container(</span><br><span class="line">          color: Colors.transparent,</span><br><span class="line">          width: <span class="built_in">double</span>.infinity,</span><br><span class="line">          height: <span class="built_in">double</span>.infinity,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      Center(</span><br><span class="line">        child: Container(</span><br><span class="line">          <span class="comment">// 这里设置一定的偏移，因为iPhoneX有下方安全区域，看起来会偏下</span></span><br><span class="line">          margin: EdgeInsets.fromLTRB(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span> - widget.offsetY * <span class="number">2</span>),</span><br><span class="line">          decoration: BoxDecoration(</span><br><span class="line">            color: Color.fromARGB(<span class="number">255</span>, <span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>), </span><br><span class="line">            borderRadius: BorderRadius.circular(<span class="number">5</span>)</span><br><span class="line">          ),</span><br><span class="line">          <span class="comment">// 设置最小宽高，如果文字比较多，可以自适应</span></span><br><span class="line">          constraints: BoxConstraints(</span><br><span class="line">            minHeight: <span class="number">130</span>,</span><br><span class="line">            minWidth: <span class="number">130</span></span><br><span class="line">          ),</span><br><span class="line">          child: Padding(</span><br><span class="line">            padding: EdgeInsets.all(<span class="number">12</span>),</span><br><span class="line">            child: Column(</span><br><span class="line">              mainAxisSize: MainAxisSize.min,</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                Container(</span><br><span class="line">                  padding: EdgeInsets.all(<span class="number">15</span>),</span><br><span class="line">                  child: child,</span><br><span class="line">                ),</span><br><span class="line">                Container(</span><br><span class="line">                  child: Text(</span><br><span class="line">                    _text,</span><br><span class="line">                    textAlign: TextAlign.center,</span><br><span class="line">                    style: TextStyle(color: Colors.white, fontSize: <span class="number">16</span>)</span><br><span class="line">                  ),</span><br><span class="line">                )</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    ],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-环形进度"><a href="#4-环形进度" class="headerlink" title="4. 环形进度"></a>4. 环形进度</h3><p>通过Painter画两个圆</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleProgressBarPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> progress;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> strokeWidth;</span><br><span class="line">  <span class="keyword">final</span> Color color;</span><br><span class="line">  <span class="keyword">final</span> Color fillColor;</span><br><span class="line">  <span class="keyword">const</span> CircleProgressBarPainter(&#123;</span><br><span class="line">    <span class="keyword">this</span>.progress = <span class="number">0</span>, </span><br><span class="line">    <span class="keyword">this</span>.strokeWidth = <span class="number">3</span>,</span><br><span class="line">    <span class="keyword">this</span>.color = Colors.grey,</span><br><span class="line">    <span class="keyword">this</span>.fillColor = Colors.white</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    <span class="keyword">final</span> paint = <span class="keyword">new</span> Paint()</span><br><span class="line">      ..color = <span class="keyword">this</span>.color</span><br><span class="line">      ..style = PaintingStyle.stroke</span><br><span class="line">      ..strokeWidth = strokeWidth;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">double</span> diam = min(size.width, size.height);</span><br><span class="line">    <span class="keyword">final</span> centerX = size.width * <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">final</span> centerY = size.height * <span class="number">0.5</span>;</span><br><span class="line">    <span class="keyword">final</span> radius = diam / <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">    canvas.drawCircle(Offset(centerX, centerY), radius, paint);</span><br><span class="line">    paint.color = <span class="keyword">this</span>.fillColor;</span><br><span class="line">    <span class="comment">// draw in center</span></span><br><span class="line">    <span class="keyword">var</span> rect = Rect.fromLTWH((size.width - diam) * <span class="number">0.5</span>, <span class="number">0</span>, diam, diam);</span><br><span class="line">    canvas.drawArc(rect, <span class="number">-0.5</span> * pi, progress * <span class="number">2</span> * pi, <span class="keyword">false</span>, paint);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(CustomPainter oldDelegate) =&gt; <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码见<a href="https://github.com/zhengbomo/bmprogresshud">这里</a>：</p>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter切换tab后保留tab状态</title>
      <link href="/2019-02-23/flutter-tab-keep-alive/"/>
      <url>/2019-02-23/flutter-tab-keep-alive/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在用flutter写一个小项目，在写主页面（底部导航栏+子页面）时遇到的一个问题：当点击底部item切换到另一页面, 再返回此页面时会重走它的initState方法（我们一般在initState中发起网络请求，或者初始化的操作），导致不必要的开销</p><span id="more"></span><h2 id="根据Tab动态加载页面"><a href="#根据Tab动态加载页面" class="headerlink" title="根据Tab动态加载页面"></a>根据Tab动态加载页面</h2><p>我们先定义两个页面<code>PageA</code>和<code>PageB</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageA</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  _PageAState createState() =&gt; _PageAState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PageAState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PageA</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;pageA init state&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.orangeAccent,</span><br><span class="line">      child: Center(</span><br><span class="line">        child: Text(<span class="string">&quot;page A&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageB</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  _PageBState createState() =&gt; _PageBState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PageBState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PageB</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;pageB init state&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      color: Colors.blueAccent,</span><br><span class="line">      child: Center(</span><br><span class="line">        child: Text(<span class="string">&quot;page B&quot;</span>),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义Tab主页面</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  _MyAppState createState() =&gt; _MyAppState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyAppState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyApp</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _tabIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">List</span>&lt;Widget&gt; _tabWidget = [</span><br><span class="line">    PageA(),</span><br><span class="line">    PageB()</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;tab demo&#x27;</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: _createBottomItems(),</span><br><span class="line">          currentIndex: <span class="keyword">this</span>._tabIndex,</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              <span class="keyword">this</span>._tabIndex = index;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        body: <span class="keyword">this</span>._tabWidget.elementAt(<span class="keyword">this</span>._tabIndex),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建底部导航item</span></span><br><span class="line"><span class="built_in">List</span>&lt;BottomNavigationBarItem&gt; _createBottomItems() &#123;</span><br><span class="line">  <span class="keyword">return</span> [</span><br><span class="line">    BottomNavigationBarItem(</span><br><span class="line">      icon: Icon(Icons.home),</span><br><span class="line">      title: Text(<span class="string">&quot;首页&quot;</span>)</span><br><span class="line">    ),</span><br><span class="line">    BottomNavigationBarItem(</span><br><span class="line">      icon: Icon(Icons.insert_emoticon),</span><br><span class="line">      title: Text(<span class="string">&quot;我的&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">  ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后发现，每次切换tab都会调用<code>initState</code>，这显然不符合我们的正常的需求，有下面两种解决方式</p><h2 id="IndexedStack"><a href="#IndexedStack" class="headerlink" title="IndexedStack"></a>IndexedStack</h2><p><code>IndexedStack</code>可以控制子元素的显示和隐藏，并且会缓存所有的元素，不会每次都重新创建子元素</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> MaterialApp(</span><br><span class="line">    title: <span class="string">&#x27;tab demo&#x27;</span>,</span><br><span class="line">    home: Scaffold(</span><br><span class="line">      bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">        items: _createBottomItems(),</span><br><span class="line">        currentIndex: <span class="keyword">this</span>._tabIndex,</span><br><span class="line">        onTap: (index) &#123;</span><br><span class="line">          setState(() &#123;</span><br><span class="line">            <span class="keyword">this</span>._tabIndex = index;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      body: IndexedStack(</span><br><span class="line">        children: <span class="keyword">this</span>._tabWidget,</span><br><span class="line">        index: <span class="keyword">this</span>._tabIndex,</span><br><span class="line">      )</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后发现还是有个问题，IndexedStack在初始化的时候会初始化所有的子元素，pageA和pageB的<code>initState</code>会同时调用，这明显还是不符合我们的需求</p><p>正确来说应该是切换到具体页面的时候才进行初始化，而不是一开始就加载所有的页面的数据，避免资源浪费</p><h2 id="PageView-AutomaticKeepAliveClientMixin"><a href="#PageView-AutomaticKeepAliveClientMixin" class="headerlink" title="PageView + AutomaticKeepAliveClientMixin"></a>PageView + AutomaticKeepAliveClientMixin</h2><p>使用PageView支持多个view切换，并且不会一次加载完所有的页面</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">  PageController _pageController;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    <span class="keyword">this</span>._pageController =PageController(initialPage: <span class="keyword">this</span>._tabIndex, keepPage: <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;tab demo&#x27;</span>,</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        bottomNavigationBar: BottomNavigationBar(</span><br><span class="line">          items: _createBottomItems(),</span><br><span class="line">          currentIndex: <span class="keyword">this</span>._tabIndex,</span><br><span class="line">          onTap: (index) &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              <span class="keyword">this</span>._tabIndex = index;</span><br><span class="line">              _pageController.jumpToPage(index);</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">        body: PageView(</span><br><span class="line">          children: <span class="keyword">this</span>._tabWidget,</span><br><span class="line">          controller: _pageController,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用PageView可以正常切换，但是每次切换Tab的时候还是会重复调用<code>initState</code>，我们还需要在子页面实现<code>AutomaticKeepAliveClientMixin</code></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PageAState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PageA</span>&gt; <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PageBState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">PageB</span>&gt; <span class="title">with</span> <span class="title">AutomaticKeepAliveClientMixin</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">get</span> wantKeepAlive =&gt; <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了<code>AutomaticKeepAliveClientMixin</code>就不会每次切换Tab都调用<code>initState</code>了，这也是google推荐的方式</p><p>最后发现<code>PageView</code>可以左右滑动切换，这个可以通过设置<code>physics</code>为<code>NeverScrollableScrollPhysics()</code>来禁止滑动</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PageView(</span><br><span class="line">  children: <span class="keyword">this</span>._tabWidget,</span><br><span class="line">  controller: _pageController,</span><br><span class="line">  physics: NeverScrollableScrollPhysics(),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flutter给控件设置圆角</title>
      <link href="/2019-02-20/flutter-radius-corner/"/>
      <url>/2019-02-20/flutter-radius-corner/</url>
      
        <content type="html"><![CDATA[<p>Flutter给控件设置圆角有几种方式，可以通过裁切Widget包装，也可以通过装饰器设置</p><span id="more"></span><h2 id="裁切控件Clip"><a href="#裁切控件Clip" class="headerlink" title="裁切控件Clip"></a>裁切控件Clip</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圆角</span></span><br><span class="line"><span class="keyword">new</span> ClipRRect(</span><br><span class="line">  borderRadius: BorderRadius.circular(<span class="number">6.0</span>),</span><br><span class="line">  child: Container(</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    color: Colors.redAccent,</span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形</span></span><br><span class="line"><span class="keyword">new</span> ClipOval(</span><br><span class="line">  child: Container(</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    color: Colors.redAccent,</span><br><span class="line">  ),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="装饰器BoxDecoration"><a href="#装饰器BoxDecoration" class="headerlink" title="装饰器BoxDecoration"></a>装饰器BoxDecoration</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圆角</span></span><br><span class="line">DecoratedBox(</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    border: <span class="keyword">new</span> Border.all(color: Colors.black54, width: <span class="number">0.5</span>),</span><br><span class="line">    color: Colors.greenAccent,</span><br><span class="line">    shape: BoxShape.rectangle,</span><br><span class="line">    borderRadius: BorderRadius.circular(<span class="number">12.0</span>),</span><br><span class="line">  ),</span><br><span class="line">  child: Container(</span><br><span class="line">    padding: EdgeInsets.all(<span class="number">12</span>),</span><br><span class="line">    child: Text(<span class="string">&quot;内容&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形</span></span><br><span class="line">DecoratedBox(</span><br><span class="line">  decoration: BoxDecoration(</span><br><span class="line">    border: <span class="keyword">new</span> Border.all(color: Colors.black54, width: <span class="number">0.5</span>),</span><br><span class="line">    color: Colors.greenAccent,</span><br><span class="line">    shape: BoxShape.circle,</span><br><span class="line">  ),</span><br><span class="line">  child: Container(</span><br><span class="line">    padding: EdgeInsets.all(<span class="number">12</span>),</span><br><span class="line">    child: Text(<span class="string">&quot;内容&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>注意：DecoratedBox与Clip控件不同，这里只进行装饰，不进行裁切，如果child的内容超出了范围，装饰器不会进行裁切，<code>BoxDecoration</code>通常可以用来设置边框，例如标签列表等</p></blockquote><p>对于圆形头像我们也用的比较多，这里有一个圆形头像的控件，效果与<code>BoxDecoration</code>一致</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CircleAvatar(</span><br><span class="line">  radius: <span class="number">100</span>,</span><br><span class="line">  backgroundImage: NetworkImage(<span class="string">&quot;https://flutter.io/images/intellij/hot-reload.gif&quot;</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flutter </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frp内网穿透</title>
      <link href="/2018-10-18/frp-start/"/>
      <url>/2018-10-18/frp-start/</url>
      
        <content type="html"><![CDATA[<p>最近用斐讯N1刷了Ubuntu系统，作为一个小型的服务器，偶尔需要在外网访问，内网穿透的工具有很多，例如花生壳，frp，ngrok等，这里使用一个比较简单配置的frp，是一个可用于内网穿透的高性能的反向代理应用，支持多端口多协议，而且是开源的，能满足大部分的需求</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>我们需要一台公网IP的服务器（linux），下面称为服务器</li><li>局域网设备一台（linux），下面称为客户端</li><li>域名（可选）</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>到<a href="https://github.com/fatedier/frp/releases">这里</a>找到对应的版本和系统<br>我用的是谷歌云，我用的是<code>frp_0.20.0_linux_amd64.tar.gz</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf frp_0.20.0_linux_amd64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line"><span class="built_in">cd</span> frp_0.20.0_linux_amd64</span><br></pre></td></tr></table></figure><p>客户端和服务端一样，我用的N1是arm架构的，下载的是<code>frp_0.20.0_linux_arm64.tar.gz</code></p><h3 id="服务器端配置"><a href="#服务器端配置" class="headerlink" title="服务器端配置"></a>服务器端配置</h3><ol><li><p>先删除客户端用的文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> frpc</span><br><span class="line"><span class="built_in">rm</span> frpc.ini</span><br></pre></td></tr></table></figure></li><li><p>配置<code>frps.ini</code></p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim frps.ini</span><br><span class="line"></span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br></pre></td></tr></table></figure><p> 通常不需要修改</p></li><li><p>开启服务</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>服务端需要监听7000端口给客户端访问，如果用是云服务器，需要看一下<code>入站规则</code>是否允许7000端口，否则客户端会报连接超时</p></blockquote><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>客户端配置与服务端基本相同</p><ol><li><p>先删除服务端用的文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> frps</span><br><span class="line"><span class="built_in">rm</span> frps.ini</span><br></pre></td></tr></table></figure></li><li><p>配置<code>frpc.ini</code>, <code>vim frps.ini</code></p> <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">35.221</span>.xx.xx</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[http1]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6001</span></span><br><span class="line"><span class="attr">custom_domains</span> = n1.bombox.org</span><br><span class="line"></span><br><span class="line"><span class="section">[http2]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8080</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6002</span></span><br><span class="line"><span class="attr">custom_domains</span> = n1.bombox.org</span><br></pre></td></tr></table></figure><p> 【server_addr】为服务器公网IP<br> 【server_port】为服务器配置的端口<br> 【remote_port】为通过服务端访问的端口，例如我们通过<code>35.221.xx.xx:6000</code>访问客户端的<code>ssh</code>，通过<code>n1.bombox.org:6001</code>访问客户端的80端口<br> 【custom_domains】可以绑定自己的子域名，需要在域名解析后台添加一条<code>A记录</code>即可，记录值为服务器IP<code>35.221.xx.xx</code>，如下</p></li><li><p>启动</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc</span><br></pre></td></tr></table></figure><p> 接着我们就通过域名访问客户端了</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -p 6000 root@35.221.xx.xx</span><br><span class="line">http://h1.bombox.org:6001</span><br><span class="line">http://h1.bombox.org:6002</span><br></pre></td></tr></table></figure></li></ol><h2 id="后台启动和开机启动"><a href="#后台启动和开机启动" class="headerlink" title="后台启动和开机启动"></a>后台启动和开机启动</h2><p>如果上面测试没有问题，我们可以通过后台启动并设置成开机启动</p><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端（注意后面有个`&amp;`）</span></span><br><span class="line"><span class="built_in">nohup</span> /home/bomo/app/frp/frps -c /home/bomo/app/frp/frps.ini &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端（注意后面有个`&amp;`）</span></span><br><span class="line"><span class="built_in">nohup</span> /home/bomo/app/frp/frpc -c /home/bomo/app/frp/frpc.ini &amp;</span><br></pre></td></tr></table></figure><p>运行后会返回进程号，也可以通过<code>ps</code>命令查看进程信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | grep frp</span><br></pre></td></tr></table></figure><p>杀掉进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 进程号</span><br></pre></td></tr></table></figure><h3 id="开机自动启动"><a href="#开机自动启动" class="headerlink" title="开机自动启动"></a>开机自动启动</h3><p>使用<code>systemctl</code>来控制启动，先添加<code>frps</code>服务，这里演示服务端的，客户端类似</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/frps.service</span><br></pre></td></tr></table></figure><p>写入下面内容，并保存</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=fraps service</span><br><span class="line"><span class="attr">After</span>=network.target syslog.target</span><br><span class="line"><span class="attr">Wants</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">ExecStart</span>=/path/to/frps -c /path/to/frps.ini</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动frps服务</span></span><br><span class="line">systemctl start frps.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> frps.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止开机自启动</span></span><br><span class="line">systemctl <span class="built_in">disable</span> frps.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务当前状态</span></span><br><span class="line">systemctl status frps.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动某服务</span></span><br><span class="line">systemctl restart frps.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> frp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐讯N1刷Armbian Linux做服务器</title>
      <link href="/2018-10-15/n1-run-armbian/"/>
      <url>/2018-10-15/n1-run-armbian/</url>
      
        <content type="html"><![CDATA[<p>N1上了不到两个月，斐讯就翻车了，现在N1也挖不了矿，作为NAS又太鸡肋，看到可以刷Armbian系统还是很激动的，可以作为服务器折腾一下，这里记录一下刷机的过程</p><span id="more"></span><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><ol><li>双公头USB线，可以3.9淘宝一根，<a href="https://detail.tmall.com/item.htm?id=13036924933">https://detail.tmall.com/item.htm?id=13036924933</a></li><li>adb调试工具：<a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">https://dl.google.com/android/repository/platform-tools-latest-windows.zip</a></li><li><a href="https://sourceforge.net/projects/win32diskimager/">DiskImager</a>: 降<code>img</code>文件写入U盘的工具</li><li>降级分区：<code>boot.img</code>, <code>bootloader.img</code>, <code>recovery.img</code></li><li>U盘一个：用于写入系统</li><li>PC一台：我这里用的是Win10</li><li>USB键盘一个：用于连接N1座一些初始化设置</li><li>HDMI线和显示器一台：用于连接N1做一些初始化设置</li><li>armbian固件下载：<a href="https://yadi.sk/d/pHxaRAs-tZiei">https://yadi.sk/d/pHxaRAs-tZiei</a>，我选的是这个<br> Armbian_5.62_Aml-s9xxx_Ubuntu_xenial_default_4.18.7_desktop_20181012.img.xz</li></ol><h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>先降级，然后刷入比较保险，有些帖子说不用降级，但我没成功，还是先降级稳妥些</p><ol><li>先打开adb模式：在N1的主界面的【固件版本】点击4次，会看到<code>adb打开</code>的提示<br> <img src="/images/post/1541040423315.jpg"></li><li>N1与PC需要在同一个局域网，我的N1的IP是：<code>10.10.10.120</code></li><li>测试连接是否成功：在终端输入 <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入adb工具目录</span></span><br><span class="line">cd path<span class="regexp">/to/</span>adb</span><br><span class="line"></span><br><span class="line">adb connect <span class="number">10.10</span>.<span class="number">10.120</span>    </span><br></pre></td></tr></table></figure> 会看到返回<code>connected to 10.10.10.120</code>的提示，说明连接成功<br> <img src="/images/post/5451539908386_.pic_hd.jpg"></li><li>使用双公头链接N1和PC：连接N1靠近HDMI的USB口</li><li>用下面命令让N1重启为fastboot模式 <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb <span class="keyword">shell</span><span class="language-bash"> reboot fastboot</span></span><br></pre></td></tr></table></figure> 这时候N1会重启，重启后没什么变化，可以通过<code>fastboot devices -l</code>命令查看设备<br> <img src="/images/post/WX20181101-134634.png"></li></ol><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><h3 id="刷入降级分区"><a href="#刷入降级分区" class="headerlink" title="刷入降级分区"></a>刷入降级分区</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入工具目录</span></span><br><span class="line">cd <span class="regexp">/path/</span>to/fastboot</span><br><span class="line"></span><br><span class="line">fastboot flash boot boot.img</span><br><span class="line">fastboot flash bootloader bootloader.img</span><br><span class="line">fastboot flash recovery recovery.img</span><br></pre></td></tr></table></figure><p>如果没有错误提示，说明写入成功，接下来重启</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fastboot reboot</span></span><br></pre></td></tr></table></figure><p>重启完成后，就可以刷新固件了</p><h3 id="制作U盘启动固件"><a href="#制作U盘启动固件" class="headerlink" title="制作U盘启动固件"></a>制作U盘启动固件</h3><ol><li>插入U盘，并格式化</li><li>打开<code>Win32DiskImager</code>，选择<code>img</code>文件和<code>U盘盘符</code></li><li>点击写入，等待几分钟后写入成功</li><li>写入完成后，可以看到有个Boot的磁盘<ul><li>5.62后的版本：修改根目录下的<code>uEnv.ini</code>文件，将<code>meson-gxl-s905x-khadas-vim.dtb</code>换成N1对应的<code>meson-gxl-s905d-p230.dtb</code></li><li>之前的版本：复制<code>dtb/meson-gxl-s905d-p230.dtb</code>到根目录，并重命名为<code>dtb.img</code></li></ul></li><li>弹出U盘</li><li>U盘插入N1靠近HDMI的USB口</li></ol><h3 id="写入系统到N1"><a href="#写入系统到N1" class="headerlink" title="写入系统到N1"></a>写入系统到N1</h3><ol><li>连接N1的HDMI到显示器，N1断电重连</li><li>显示器可以看到N1从U盘启动，加载U盘的ubuntu系统</li><li>跟进提示配置即可，默认用户：root，密码：1234</li><li>在<code>/root/</code>目录下，有两个文件<code>install.sh</code>和<code>install-2018.sh</code>，运行这个会把U盘的系统写到N1的<code>eMMC</code>，就可以脱离U盘使用了 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./install.sh</span><br></pre></td></tr></table></figure></li><li>写入完成后重启系统，关机的时候拔出U盘 <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重启</span></span><br><span class="line"><span class="attribute">reboot</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关机</span></span><br><span class="line">poweroff</span><br></pre></td></tr></table></figure></li></ol><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><p>先使用<code>armbian-config</code>配置系统和网络，我们先配置网络就行，其他根据需要配置</p><h3 id="卸载红外模块"><a href="#卸载红外模块" class="headerlink" title="卸载红外模块"></a>卸载红外模块</h3><p>N1不支持红外线，下面命令关闭和删除红外服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭红外服务</span></span><br><span class="line">systemctl stop lircd.service lircd-setup.service lircd.socket lircd-uinput.service lircmd.service</span><br><span class="line"><span class="comment"># 卸载红外模块</span></span><br><span class="line">apt remove -y lirc &amp;&amp; apt autoremove -y</span><br></pre></td></tr></table></figure><h3 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a>更新软件包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure><h3 id="挂在外置存储"><a href="#挂在外置存储" class="headerlink" title="挂在外置存储"></a>挂在外置存储</h3><p>插入外置硬盘或U盘，通过<code>fdisk -l</code>查看磁盘信息和分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Disk /dev/mmcblk1: 7.3 GiB, 7818182656 bytes, 15269888 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0x91950000</span><br><span class="line"></span><br><span class="line">Device         Boot   Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/mmcblk1p1      1368064  1617919   249856  122M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/mmcblk1p2      1619968 15269887 13649920  6.5G 83 Linux</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 931.5 GiB, 1000204886016 bytes, 1953525168 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel type: dos</span><br><span class="line">Disk identifier: 0xa32f3aa6</span><br><span class="line"></span><br><span class="line">Device     Boot Start        End    Sectors   Size Id Type</span><br><span class="line">/dev/sda1           2 1953525167 1953525166 931.5G  7 HPFS/NTFS/exFAT</span><br></pre></td></tr></table></figure><p>通过上面，看到硬盘分区为<code>/dev/sda1</code>通过<code>mount</code>挂在分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果不存在就创建</span></span><br><span class="line"><span class="built_in">mkdir</span> /mnt/usb_disk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂载分区</span></span><br><span class="line">mount /dev/sda1 /mnt/usb_disk</span><br></pre></td></tr></table></figure><p>进入<code>/mnt/usb_disk</code>可以看到硬盘分区的文件</p><h3 id="配置frp用于公网连接"><a href="#配置frp用于公网连接" class="headerlink" title="配置frp用于公网连接"></a>配置frp用于公网连接</h3><p>参考这里：<a href="/2018-10-18/frp-start/">frp内网穿透</a></p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> 斐讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐讯K3N通过ttl刷K3固件</title>
      <link href="/2018-10-15/k3n-ttl-flashing/"/>
      <url>/2018-10-15/k3n-ttl-flashing/</url>
      
        <content type="html"><![CDATA[<p>K3N刚发布，斐讯就翻车了，K3N基本没有讨论的帖子，论坛基本是K3的帖子，好在K3和K3N的固件是通用的，通过TTL可以直接刷入K33的固件，在这里记录一下刷机的过程</p><span id="more"></span><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol><li>K3N和K3的固件是通用的</li><li>K3N目前只能通过TTL刷机（需要拆机）</li><li>TTL刷机需要用到USB转TTL刷机板，由于K3主板上的TTL是圆孔的，所以还需要插针，淘宝，下面是我购买的链接：  <ul><li>刷机板：<a href="https://detail.tmall.com/item.htm?id=577003848649">https://detail.tmall.com/item.htm?id=577003848649</a></li><li>插针：<a href="https://detail.tmall.com/item.htm?id=41428876908">https://detail.tmall.com/item.htm?id=41428876908</a></li></ul></li><li>PC一台</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li>固件：只要是k3的固件都可以，我用的abcc的官改固件（其他K3固件也可以），下载后得到<code>k3_v18.bin</code><br><a href="http://www.right.com.cn/forum/thread-259012-1-1.html">http://www.right.com.cn/forum/thread-259012-1-1.html</a>，</li><li><a href="http://tftpd32.jounin.net/tftpd32_download.html">Tftpd64</a>：用于从PC传输固件到路由器上</li><li><a href="">SecureCRT</a>: 用于连接刷机板</li><li>单片机驱动，购买了刷机板的可以找厂家要，我这里用的是CH340：<a href="http://www.winchiphead.com/download/CH341/CH341SER.ZIP">http://www.winchiphead.com/download/CH341/CH341SER.ZIP</a>，需要先卸载驱动，再安装</li></ol><p>工具打包：<br>链接: <a href="https://pan.baidu.com/s/185d8QLJNuF88pXIjJNaLhA">https://pan.baidu.com/s/185d8QLJNuF88pXIjJNaLhA</a> 提取码: 6dxm</p><h2 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h2><p>第一步肯定是要拆机了，下面是几个K3的拆机贴，跟K3N是一样的，可以参考下</p><ul><li><a href="http://www.right.com.cn/forum/forum.php?mod=viewthread&tid=261298&page=1">小白K3拆机教程，易</a></li><li><a href="http://www.right.com.cn/forum/forum.php?mod=viewthread&tid=313112&page=1">K3拆机高清图片，给即将拆机的朋友一些参考 </a></li><li><a href="https://www.bilibili.com/video/av25547854">斐讯k3拆机 ttl救砖 教程</a></li></ul><p>最后得到主板如下<br><img src="/images/post/1501539561946_.pic.jpg"></p><p>非接口一端有四个圆孔<br><img src="/images/post/1521539561960_.pic.jpg"></p><p>四个孔分别是<code>TX</code>, <code>RX</code>, <code>GND</code>, <code>VCC</code>，我们通过这四个孔连接刷机版</p><p>刷机板也有这四个接口<br><img src="/images/post/9f7dec8a-91fa-4f31-b02c-7a38d50cf7f0.png"></p><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><ol><li>插入刷机版到电脑（注意先安装驱动，安装驱动的时候不要插刷机板），在设备管理器中可以看到，我这里是<code>COM3</code><br><img src="/images/post/5261539508714_.pic_hd.jpg"></li><li>打开<code>SecureCRT</code>，选择快速连接，设置如下，然后点击连接<br> Protocol -&gt; Serial<br> Port -&gt; COM3 USB-SERIAL CH340<br> Baud rate -&gt; 115200<br> Data bits -&gt; 8</li></ol><p><img src="/"><br>3. 这个时候可以可以看到session为绿色，是连上了，但是没有数据<br><img src="/images/post/WechatIMG527.png"></p><ol start="4"><li><p>连接刷机版，刷机板一端连接PC，另一端连接路由器的TTL</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RXD -&gt; RX</span><br><span class="line">TXD -&gt; TX</span><br><span class="line">GND -&gt; GND</span><br></pre></td></tr></table></figure><p> 还有一种接线方式GND接GND，RXD接TX，TXD接RX，我的板就是这种，如果接反了，会读不到数据<br><img src="/images/post/1539572232493.jpg"></p><p> 我在刷机板的线接了四个插针，插入K3N主板的四个孔，用东西卡住，避免接触不良，可以不用焊接</p></li></ol><p><img src="/images/post/1539571592462.jpg"></p><pre><code>只需要接三条线，`VCC`口不用接</code></pre><ol start="5"><li>路由器接上网线（网线连接PC）和电源，电源先不要开，路由器主板最好把屏幕也连接上，方便看进度<br><img src="/images/post/1539572736618.jpg"></li></ol><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><ol><li><p>按住reset键，打开路由器电源<br>可以看到<code>SecureCRT</code>有数据输出，并且可以看到路由器的IP（<code>172.16.10.1</code>）不同路由器IP可能不一样，最后一行为<code>CFE&gt;</code>，这时候可以放开reset键<br><img src="/images/post/1539572872063.jpg"></p><p> 如果能看到IP地址，就说明成功不远了</p></li><li><p>电脑设置网卡的IP，如下，ip地址可以设置为<code>172.16.10.100</code>，不要跟路由器的IP一样，这时候电脑的网卡可能显示没有网络或者断开，不用管，设置就行了<br><img src="/images/post/1539573194674.jpg"></p></li><li><p>打开<code>Tftpd64</code>，选择固件的目录和网卡，如下<br>之前准备的固件<code>k3_18.bin</code>放在选择的目录下，并改名为<code>k3.trx</code><br>选择网卡的时候可以看到刚刚设置的IP（<code>172.16.10.100</code>）<br><img src="/images/post/1539573297662.jpg"></p></li><li><p>在<code>SecureCRT</code>输入下面命令<br>注意替换成上面设置的IP，文件名我们改为了<code>k3.trx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flash -noheader 172.16.10.100:k3.trx nflash0.trx</span><br></pre></td></tr></table></figure><p> 这个过程有点久，路由器会先从PC下载固件（通过<code>Tftpd64</code>），可以在<code>Tftpd64</code>看到进度<br> 下载完成后在<code>SecureCRT</code>会看到输出<br><img src="/images/post/1539573633154.jpg"></p></li><li><p>执行完成之后路由器会重启，如果连接了显示器，可以看到路由器缓慢的启动，启动完会提示系统升级，然后再重启，到这里刷机完成，可以愉快的玩耍了<br><img src="/images/post/1539573821336.jpg"></p></li></ol><p>附件提供的固件是官改固件，也可以根据情况刷其他固件</p>]]></content>
      
      
      <categories>
          
          <category> 路由器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 路由器 </tag>
            
            <tag> 斐讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS内购掉单问题</title>
      <link href="/2018-07-14/ios-iap/"/>
      <url>/2018-07-14/ios-iap/</url>
      
        <content type="html"><![CDATA[<h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><ul><li>iOS IAP 的机制是有问题的。并不是金融级别的支付校对流程</li><li>iOS IAP是在客户端完成的，是单向的过程，使用 IAP 内购会有可能导致订单丢失</li></ul><span id="more"></span><h3 id="2-支付状态"><a href="#2-支付状态" class="headerlink" title="2. 支付状态"></a>2. 支付状态</h3><ul><li>SKPaymentTransactionStatePurchasing：正在支付</li><li>SKPaymentTransactionStatePurchased：已支付</li><li>SKPaymentTransactionStateFailed：支付失败</li><li>SKPaymentTransactionStateRestored：恢复购买，例如非消耗商品在iPad已经购买了，在iPhone恢复，或者卸载了App，重装没有及时更新状态，可以用这个恢复，用于非消耗品</li><li>SKPaymentTransactionStateDeferred：未确定状态，由于外部原因导致的（如家长控制，未测试）</li></ul><h3 id="3-IAP支付流程"><a href="#3-IAP支付流程" class="headerlink" title="3. IAP支付流程"></a>3. IAP支付流程</h3><ol><li><p>根据productId（com.nsdk.sdk.6）获取SKProduct</p></li><li><p>把SKProductId加到购买队列里面，并且把外部的orderId，绑定到SKPayment的applicationUsername上<br><img src="/images/post/image2018-7-5_20-42-59.png"></p></li><li><p>从<code>SKPaymentTransactionObserver</code>监听支付结果，在监听到支付成功后，可以拿到SKPayment绑定的CustomOrderId，把苹果的订单和我们订单绑定上（根据网上描述的掉单情况，有一定概率是在回调的地方获取不到CustomOrderId，这个时候就会出现掉单的情况，而如果这个时候绑定了一个其他的orderId，就会出现串单的情况，但是没有验证成功）<br><img src="/images/post/image2018-7-5_22-9-13.png"></p></li><li><p>当客户端调用finishTransaction时，则表示订单已经完成，则客户端不再接收到支付成功的回调，如果没有finishTransaction，则苹果会一直回调（每次打开App(监听)就会回调，直到调用finishTransaction完成订单）</p></li></ol><h3 id="4-调研汇总"><a href="#4-调研汇总" class="headerlink" title="4. 调研汇总"></a>4. 调研汇总</h3><ol><li><p>同一个商品，如果上次支付用户支付成功<code>SKPaymentTransactionStatePurchased</code>，但是没有调用<code>finishTransaction</code>），再次下单购买的时候，会提示恢复购买，只会调用Purchasing，不会监听到其他状态，并且用户不会扣钱，如果重新打开App，重新监听<code>SKPaymentTransactionObserver</code>，会收到多条回调，并且对应的<code>transactionId</code>一样，也就是同一个商品，再未完成前，不会重复扣款，只有上一个订单完成后，才会继续支付扣款<br><img src="/images/post/image2018-7-5_20-25-28.png"></p></li><li><p><code>purchasing</code>状态下还没有唯一标识<code>transactionIdentifier</code>，只有在<code>purchased</code>和<code>restore</code>状态下才有</p></li><li><p>在iOS7以后，苹果的支付票据保存在<code>Bundle.main.appStoreReceiptURL</code>，票据只有一份，并且是加密的，无法再客户端进行拆分订单，用户支付成功后，信息会存在票据中，当订单完成（finishTransaction），会从票据中把相应的订单删除，客户端无法知道票据包含哪些支付成功的订单，同一个票据里面，会有多个订单，可以从苹果的验证接口返回数据，看到票据包含哪些订单，通常情况下只有一个，不排除有多个，如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sandbox&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;receipt&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;receipt_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ProductionSandbox&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;adam_id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;app_item_id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;bundle_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.nsdk.sdk&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;application_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;download_id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;version_external_identifier&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;receipt_creation_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 12:31:44 Etc/GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;receipt_creation_date_ms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1530793904000&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;receipt_creation_date_pst&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 05:31:44 America/Los_Angeles&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;request_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 12:32:20 Etc/GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;request_date_ms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1530793940135&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;request_date_pst&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 05:32:20 America/Los_Angeles&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_purchase_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2013-08-01 07:00:00 Etc/GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_purchase_date_ms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1375340400000&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_purchase_date_pst&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2013-08-01 00:00:00 America/Los_Angeles&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_application_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;in_app&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;quantity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;product_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.nsdk.sdk.6&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;transaction_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1000000414405534&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_transaction_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1000000414405534&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;purchase_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 12:23:43 Etc/GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;purchase_date_ms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1530793423000&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;purchase_date_pst&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 05:23:43 America/Los_Angeles&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_purchase_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 12:23:43 Etc/GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_purchase_date_ms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1530793423000&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_purchase_date_pst&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 05:23:43 America/Los_Angeles&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;is_trial_period&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;quantity&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;product_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.nsdk.sdk.12&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;transaction_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1000000414404413&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_transaction_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1000000414404413&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;purchase_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 12:20:20 Etc/GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;purchase_date_ms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1530793220000&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;purchase_date_pst&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 05:20:20 America/Los_Angeles&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_purchase_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 12:20:20 Etc/GMT&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_purchase_date_ms&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1530793220000&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;original_purchase_date_pst&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2018-07-05 05:20:20 America/Los_Angeles&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;is_trial_period&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>用户购买了”元宝6”和”元宝12”两个商品，并且支付成功，但由于网络原因，回调的时候没有同步到服务器（还没<code>finishTransaction</code>），下次启动（监听<code>SKPaymentTransactionObserver</code>）时，两个订单都会回调支付成功</p></li><li><p>如果用户购买了”元宝6”，并且支付成功，但是由于网络原因，回调的时候没有同步到服务器（还没finishTransaction），用户又重新购买了几次（提示已购买，此项目将免费恢复），然后重启App，<code>SKPaymentTransactionObserver</code>将会回调多次，并且订单<code>transactionIdentifier</code>相同（这里是个坑，用户在SDK下单多次，但是在苹果支付只一次，而回调成功会多次，而客户端逻辑会以为多次下单都成功了，需要服务端做去重控制）</p></li><li><p>刚打开App的时候，通常会监听订单状态，之前没有同步成功的订单会收到通知，由于苹果的票据只有一份，每个订单都会使用同一个票据去服务端校验（有可能同一个订单会回调多次），服务端需要考虑去重的问题（transactionId），避免同一个票据刷多次</p></li><li><p>如果支付没有完成，卸载App，重装，也能收到回调</p></li><li><p>正常情况下下单，update回调会先触发<code>purchasing</code>，然后触发<code>purchased</code>或<code>failed</code></p></li></ol><ul><li>由于情况1的存在，如果已存在一个已支付但是未完成的订单，这个时候再下一个新的单（productId相同），监听回调只有一次purchasing，不会有purchased或failed回调（巨坑）</li><li>这个时候调用的地方就不知道用户什么时候支付完成了，造成的问题是支付前显示Loading，而没有关闭回调，导致loading一直显示</li><li>推荐解决方案：在监听<code>paymentQueue:updatedTransactions</code>方法时，使用<code>queue.transactions</code>，而不是用参数<code>transaction</code>，如下<figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)paymentQueue:(<span class="built_in">SKPaymentQueue</span> *)queue updatedTransactions:(<span class="built_in">NSArray</span>&lt;<span class="built_in">SKPaymentTransaction</span> *&gt; *)transactions &#123;</span><br><span class="line">    <span class="comment">// 原</span></span><br><span class="line">    <span class="comment">// for (SKPaymentTransaction *transaction in transactions) &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 改</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">SKPaymentTransaction</span> *transaction <span class="keyword">in</span> queue.transactions) &#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span></span></span><br><span class="line">        <span class="keyword">switch</span> (transaction.transactionState) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateFailed</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateDeferred</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStateRestored</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStatePurchased</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">SKPaymentTransactionStatePurchasing</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>TODO：上面还有一个问题，由于取的是数组，可能会有多个，导致触发回调多次，发货也触发多次，就是可能会回调多次</li></ul><h3 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h3><h4 id="串单"><a href="#串单" class="headerlink" title="串单"></a>串单</h4><p>由于正在处理的订单可能不止一个，如果使用单例共用状态orderId，如果时机不对（多个单一起出现），会出现orderId和苹果订单对应不上<br>应该通过<code>applicationUsername</code>把苹果订单和我们的orderId绑定起来，避免关系错乱，导致串单<br>由于苹果票据只有一份，多个订单也会使用同一个票据，而验证通过，这一点需要服务端也做相关的去重处理</p><h4 id="掉单"><a href="#掉单" class="headerlink" title="掉单"></a>掉单</h4><p>客户端把票据传给服务器后，就标识订单<code>finish</code>，服务端校验苹果票据是异步的，如果校验失败，则会调单<br>由于票据只有一份，并且可能包含多个订单，服务端验证票据时，需要进行分别判断，很多人的做法是只取第一个，导致校验失败，从而调单</p><h4 id="刷单"><a href="#刷单" class="headerlink" title="刷单"></a>刷单</h4><p>如果服务器端对苹果平局没有做去重校验，同一个票据可以被校验多次，用户可能会因为这个无意刷单，支付一次，发货多次（概率很低，但是有）</p><h3 id="6-措施"><a href="#6-措施" class="headerlink" title="6. 措施"></a>6. 措施</h3><ol><li>添加applicationUsername用于绑定苹果订单和SDK订单，去除共用orderId</li><li>服务端优化订单校验，校验失败的处理（改为同步，并返回给客户端？）</li><li>由于苹果票据可能含有多个订单，服务端在做订单校验的时候需要针对指定的订单处理</li><li>由于苹果一个票据对应多个订单，客户端可能多个订单使用同一个票据，服务端需要做苹果订单去重处理，同一个票据不应该校验两次（根据transactionId）</li></ol><h3 id="7-不可避免问题"><a href="#7-不可避免问题" class="headerlink" title="7. 不可避免问题"></a>7. 不可避免问题</h3><ol><li><p>苹果订单和SDK订单的绑定关系丢失（网上很多丢单问题这么说，我没用重现出来，只是可能，不能确定，考虑埋点统计）（orderId &#x3D;&#x3D; null）  </p><p> 补救：后台做记录，根据用户反馈手动补单</p></li></ol><h3 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h3><p>上面描述不包含订阅类型</p><h3 id="9-引用"><a href="#9-引用" class="headerlink" title="9 引用"></a>9 引用</h3><ul><li><a href="https://stackoverflow.com/questions/25510678/how-to-test-skpaymenttransactionstatedeferred/27367749">https://stackoverflow.com/questions/25510678/how-to-test-skpaymenttransactionstatedeferred/27367749</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> IAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift泛型笔记</title>
      <link href="/2018-06-14/swift-generic/"/>
      <url>/2018-06-14/swift-generic/</url>
      
        <content type="html"><![CDATA[<p>泛型可以让代码处理类型更加灵活，在某些场景下可以很大程度的重用代码，泛型是什么，使用泛型的好处，这里不多说，网上有很多文章介绍的很详细，这里只讨论用法，Swift的泛型与其他语言有些类型，又有些不一样，搜了一下发现，网上的文章只描述了一点，并不全面，看完后依然没能很全面的说明泛型的用法，在这里记录完整的用法</p><span id="more"></span><h2 id="定义泛型"><a href="#定义泛型" class="headerlink" title="定义泛型"></a>定义泛型</h2><p>swift的泛型定义方式有两种，一种通过<code>&lt;T&gt;</code>指定泛型参数，而在属性或方法，使用指定的泛型类型，下面是一个泛型方法的声明</p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 交换两个同类型的变量</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">swap</span>&lt;<span class="type">T</span>&gt;(<span class="params">a</span>: <span class="keyword">inout</span> <span class="type">T</span>, <span class="params">b</span>: <span class="keyword">inout</span> <span class="type">T</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> c <span class="operator">=</span> a</span><br><span class="line">    a <span class="operator">=</span> b</span><br><span class="line">    b <span class="operator">=</span> c</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> (a, b) <span class="operator">=</span> (<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(<span class="operator">&amp;</span>a, <span class="operator">&amp;</span>b)</span><br><span class="line"><span class="built_in">print</span>(a, b)<span class="comment">// 1, 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(<span class="operator">&amp;</span>a, <span class="operator">&amp;</span>b)        </span><br><span class="line"><span class="built_in">print</span>(a, b)<span class="comment">// 2, 1</span></span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>上面是泛型方法的定义，如果在类里面，可以对类声明泛型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">    <span class="comment">/// 泛型属性</span></span><br><span class="line">    <span class="keyword">var</span> testObj: <span class="type">T</span>?</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 泛型方法，可以直接使用类的泛型参数T</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">swap</span>&lt;<span class="type">T</span>&gt;(<span class="params">a</span>: <span class="keyword">inout</span> <span class="type">T</span>, <span class="params">b</span>: <span class="keyword">inout</span> <span class="type">T</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> c <span class="operator">=</span> a</span><br><span class="line">        a <span class="operator">=</span> b</span><br><span class="line">        b <span class="operator">=</span> c</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 方法的泛型定义可以不依赖于类的泛型参数</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">swap2</span>&lt;<span class="type">TK</span>&gt;(<span class="params">a</span>: <span class="keyword">inout</span> <span class="type">TK</span>, <span class="params">b</span>: <span class="keyword">inout</span> <span class="type">TK</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> c <span class="operator">=</span> a</span><br><span class="line">        a <span class="operator">=</span> b</span><br><span class="line">        b <span class="operator">=</span> c</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性</span></span><br><span class="line"><span class="keyword">let</span> t <span class="operator">=</span> <span class="type">Test</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line">t.testObj <span class="operator">=</span> <span class="number">12</span></span><br><span class="line"><span class="built_in">print</span>(t.testObj)        <span class="comment">// 12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">t.swap(a: <span class="operator">&amp;</span>a, b: <span class="operator">&amp;</span>b)</span><br><span class="line"><span class="built_in">print</span>(a, b)            <span class="comment">// 1, 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;a&quot;</span></span><br><span class="line"><span class="keyword">var</span> s2: <span class="type">String</span>? <span class="operator">=</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">t.swap2(a: <span class="operator">&amp;</span>s1, b: <span class="operator">&amp;</span>s2)</span><br><span class="line"><span class="built_in">print</span>(s1, s2)            <span class="comment">// b, a</span></span><br></pre></td></tr></table></figure><h3 id="泛型参数"><a href="#泛型参数" class="headerlink" title="泛型参数"></a>泛型参数</h3><p>泛型可以支持多个类型参数，在声明处用逗号分开</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="comment">/// 多个泛型参数</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">test</span>&lt;<span class="type">T1</span>, <span class="type">T2</span>&gt;(<span class="params">t1</span>: <span class="type">T1</span>, <span class="params">t2</span>: <span class="type">T2</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;t1: <span class="subst">\(t1)</span>, t2: <span class="subst">\(t2)</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t <span class="operator">=</span> <span class="type">Test</span>()</span><br><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> t.test(t1: <span class="type">NSObject</span>(), t2: <span class="string">&quot;abc&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h2><p>类型约束定义在泛型声明处，支持类约束和<code>protocol</code>约束，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Run</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">Fly</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fly</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 单协议约束</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>&lt;<span class="type">T</span>: <span class="type">Run</span>&gt;(<span class="params">animal</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    animal.run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 类型和多协议约束</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>&lt;<span class="type">T</span>: <span class="type">NSObject</span> &amp; <span class="type">Fly</span> &amp; <span class="type">Run</span>&gt;(<span class="params">bird</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    bird.fly()</span><br><span class="line">    bird.run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>泛型可以用在方法参数，方法返回值，属性上</p><h2 id="协议泛型"><a href="#协议泛型" class="headerlink" title="协议泛型"></a>协议泛型</h2><p>除了类，结构体和枚举也支持泛型，用法与类一样，但是协议protocol不能像上面一样使用<br>协议只能通过关联类型<code>associatedtype</code>来实现泛型的功能，相当于泛型声明为协议的成员，而泛型的成员在实现的时候指定</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="comment">/// 关联类型Element，相当于上面的T</span></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">write</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">Element</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">File</span>: <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="comment">// 在实现关联类型的协议的时候，需要指定关联类型</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">Element</span> <span class="operator">=</span> <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现协议方法</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">write</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">File</span>.<span class="type">Element</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(element)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关联类型的约束"><a href="#关联类型的约束" class="headerlink" title="关联类型的约束"></a>关联类型的约束</h3><p>关联类型的约束与普通泛型约束一样，在声明的地方后面添加，通过逗号隔开</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">protocol</span> <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span>: <span class="type">NSObject</span>, <span class="type">Encodable</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">write</span>(<span class="keyword">_</span> <span class="params">element</span>: <span class="type">Element</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关联自身类型"><a href="#关联自身类型" class="headerlink" title="关联自身类型"></a>关联自身类型</h3><p>protocol利用<code>associatedtype</code>关联自身类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Equalable</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">equal</span>(<span class="keyword">_</span> <span class="params">a</span>: <span class="keyword">Self</span>) -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>: <span class="title class_">Equalable</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="params">id</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.id <span class="operator">=</span> id</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">equal</span>(<span class="keyword">_</span> <span class="params">a</span>: <span class="type">Test</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.id <span class="operator">==</span> a.id</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="type">Test</span>(id: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="type">Test</span>(id: <span class="number">2</span>)</span><br><span class="line">a.equal(b)              <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="associatedtype冲突"><a href="#associatedtype冲突" class="headerlink" title="associatedtype冲突"></a>associatedtype冲突</h3><p>associatedtype有另一个问题没有解决，就是类型冲突，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">Read</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">read</span>() -&gt; <span class="type">Element</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">write</span>(<span class="params">a</span>: <span class="type">Element</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个Element名字相同，无法指定</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadWrite</span>: <span class="title class_">Read</span>, <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">read</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">write</span>(<span class="params">a</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;writing <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在stackoverflow上有个不完美的解决方案:<br><a href="https://stackoverflow.com/questions/37736457/protocol-with-same-associated-type-name">https://stackoverflow.com/questions/37736457/protocol-with-same-associated-type-name </a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">ReadInt</span>: <span class="title class_">Read</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span> <span class="operator">=</span> <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">WriteString</span>: <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span> <span class="operator">=</span> <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ReadWrite</span>: <span class="title class_">ReadInt</span>, <span class="title class_">WriteString</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">read</span>() -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">write</span>(<span class="params">a</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;writing <span class="subst">\(a)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于associatedtype"><a href="#关于associatedtype" class="headerlink" title="关于associatedtype"></a>关于associatedtype</h3><p>对于其他语言大多都使用直接指定类型<code>&lt;T&gt;</code>的方式声明泛型，而swift为什么还要搞出一个<code>associatedtype</code>呢，这篇文章有分析：<a href="http://www.cocoachina.com/swift/20160726/17188.html">http://www.cocoachina.com/swift/20160726/17188.html</a></p><p>使用关联类型，类似于类型当成成员属性使用，可以解耦依赖，如果需要使用对象的关联的类型，而类型与当前对象并没有直接关系，则通过成员的关联类型引用可以避免直接依赖对象类型，如下例子：机动车(Automobile)、燃料(Fuel)、尾气(Exhaust)</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// 机动车</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">protocol</span> <span class="title class_">Automobile</span> &#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">FuelType</span></span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">ExhaustType</span></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">drive</span>(<span class="params">fuel</span>: <span class="type">FuelType</span>) -&gt; <span class="type">ExhaustType</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 燃料</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">protocol</span> <span class="title class_">Fuel</span> &#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">ExhaustType</span></span><br><span class="line">  <span class="keyword">func</span> <span class="title function_">consume</span>() -&gt; <span class="type">ExhaustType</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 尾气</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">protocol</span> <span class="title class_">Exhaust</span> &#123;  </span><br><span class="line"><span class="keyword">func</span> <span class="title function_">emit</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">UnleadedGasoline</span>: <span class="title class_">Fuel</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">consume</span>() -&gt; <span class="type">E</span> &#123;    </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;consuming unleaded gas...&quot;</span>)  </span><br><span class="line">  <span class="keyword">return</span> <span class="type">E</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> <span class="title class_">CleanExhaust</span>: <span class="title class_">Exhaust</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">emit</span>() &#123;  </span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;this is some clean exhaust...&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span>: <span class="title class_">Automobile</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">drive</span>(<span class="params">fuel</span>: <span class="type">F</span>) -&gt; <span class="type">E</span> &#123;    </span><br><span class="line"> <span class="keyword">return</span> fuel.consume()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际依赖关系：<br>机动车 -&gt; 燃料<br>燃料 -&gt; 尾气  </p><p>但是代码有个问题是在定义Car的时候，必须声明尾气的类型E，而实际上机动车是不依赖于尾气的类型的，尾气的类型取决于燃料，如果Car支持两种燃料FuelA和FuelB，而两种燃料产生的尾气E1和E2，<code>drive</code>方法无法同时满足，只能定义两个方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span>: <span class="title class_">Automobile</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">drive</span>(<span class="params">fuel</span>: <span class="type">F1</span>) -&gt; <span class="type">E1</span> &#123;    </span><br><span class="line"> <span class="keyword">return</span> fuel.consume()</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">drive</span>(<span class="params">fuel</span>: <span class="type">F2</span>) -&gt; <span class="type">E2</span> &#123;    </span><br><span class="line"> <span class="keyword">return</span> fuel.consume()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用关联类型的话可以解决这个问题，把尾气关联到燃料上</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Car</span>: <span class="title class_">Automobile</span> &#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">drive</span>(<span class="params">fuel</span>: <span class="type">F</span>) -&gt; <span class="type">F</span>.<span class="type">ExhaustType</span> &#123;    </span><br><span class="line"> <span class="keyword">return</span> fuel.consume()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是Swift泛型的全部要点</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>block学习笔记</title>
      <link href="/2017-07-03/block-start/"/>
      <url>/2017-07-03/block-start/</url>
      
        <content type="html"><![CDATA[<h2 id="引用计数内存管理"><a href="#引用计数内存管理" class="headerlink" title="引用计数内存管理"></a>引用计数内存管理</h2><ol><li>所有的对象都存放在堆上，需要手动管理内存</li><li>iOS内存管理通过retainCount进行管理，通过引用计数+&#x2F;-1来控制内存的的声明周期，通常来说，我们在一个代码块中，我们会对需要用到的对象的引用计数+1，在离开代码块时，对引用计数-1，通过这种机制，我们只需要关心在我们的代码中需要的时候retain，不需要的时候release，而不用关心对象什么时候释放，当引用计数为0，即之后再也没有对该内存的引用，对象内存就会被释放，这个由系统框架来做</li></ol><span id="more"></span><h2 id="autorelease与runloop"><a href="#autorelease与runloop" class="headerlink" title="autorelease与runloop"></a>autorelease与runloop</h2><p>runloop在每一个调用周期（消息循环）外部都会添加一个<code>autoreleasepool</code>，对于<code>autorelease</code>的对象，并不是在离开作用域就马上释放的，而是在离开<code>autoreleasepool</code>的时候才被释放</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">NSArray</span> *array1;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">NSArray</span> *array2;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)btnClick:(<span class="type">id</span>)sender &#123;</span><br><span class="line">    [<span class="keyword">self</span> test];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, <span class="keyword">self</span>.array1);    <span class="comment">// 这里可以打印出来array1对象的值</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, <span class="keyword">self</span>.array2);    <span class="comment">// 这里打印出来array2为nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)test &#123;</span><br><span class="line">    <span class="keyword">self</span>.array1 = [<span class="built_in">NSMutableArray</span> arrayWithObjects:@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, <span class="literal">nil</span>];</span><br><span class="line">    <span class="comment">// 1. self.array1指向的对象是用autorelease修饰的</span></span><br><span class="line">    <span class="comment">// 2. 虽然array使用weak修饰的，但是离开了test方法，array依然不会被释放，直到离开当前的autoreleasepool</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = [[<span class="built_in">NSMutableArray</span> alloc] initWithObjects:@<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, <span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">self</span>.array2 = array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数与block"><a href="#函数与block" class="headerlink" title="函数与block"></a>函数与block</h2><p>block就是对闭包的实现，block的本质其实就是函数，只是在函数的基础上加上了捕获变量列表<br>编译之后会变成一个结构体，包含捕获参数，和函数指针，后面我们看看block编译之后的代码</p><h2 id="block的编译"><a href="#block的编译" class="headerlink" title="block的编译"></a>block的编译</h2><h3 id="1-不捕获变量"><a href="#1-不捕获变量" class="headerlink" title="1. 不捕获变量"></a>1. 不捕获变量</h3><p>先定义一个test.m文件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    <span class="type">void</span> (^blk)(<span class="type">void</span>) = ^&#123;</span><br><span class="line">        printf(<span class="string">&quot;Block\n&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过clang命令生成预编译后的代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc test.m</span><br></pre></td></tr></table></figure><p>生成如下代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// block类描述，相当于OC的类描述</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__block_impl</span> &#123;</span><br><span class="line">  <span class="type">void</span> *isa;</span><br><span class="line">  <span class="type">int</span> Flags;</span><br><span class="line">  <span class="type">int</span> Reserved;</span><br><span class="line">  <span class="type">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// block实现的结构体，可以看成__block_impl的子类</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__main_block_impl_0</span> &#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__block_impl</span> impl;                     <span class="comment">// block类的描述</span></span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__main_block_desc_0</span>* Desc;             <span class="comment">// block的描述</span></span><br><span class="line">  __main_block_impl_0(<span class="type">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="type">int</span> flags=<span class="number">0</span>) &#123;        <span class="comment">// 结构体构造方法</span></span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;          <span class="comment">// block的类型，共有3种</span></span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;                          <span class="comment">// block的实现，最后被赋值为block编译后的方法</span></span><br><span class="line">    Desc = desc;                                <span class="comment">// block描述</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// block的描述，描述block实现的结构体的大小（框架用，我们用不到）</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> <span class="title class_">__main_block_desc_0</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> reserved;</span><br><span class="line">    <span class="type">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// block方法实现</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Block\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 构造block结构体__main_block_impl_0，并且结构体存放在栈上的</span></span><br><span class="line">  <span class="built_in">void</span> (*blk)(<span class="type">void</span>) = ((<span class="built_in">void</span> (*)())&amp;__main_block_impl_0((<span class="type">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 通过__main_block_impl_0.FuncPtr调用block指向的方法</span></span><br><span class="line">  ((<span class="built_in">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，block被编译成一个静态方法，和一个block描述的结构体</p><h3 id="2-捕获不可变变量"><a href="#2-捕获不可变变量" class="headerlink" title="2. 捕获不可变变量"></a>2. 捕获不可变变量</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    <span class="built_in">NSObject</span> *obj = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">void</span> (^blk)(<span class="type">void</span>) = ^&#123;</span><br><span class="line">        printf(<span class="string">&quot;Block：%d\n&quot;</span>, a);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;%@&quot;</span>, obj);</span><br><span class="line">    &#125;;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// __block_impl 一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成的__main_block_impl_0多了一个捕获字段a和对象obj</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__main_block_impl_0</span> &#123;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__block_impl</span> impl;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">__main_block_desc_0</span>* Desc;</span><br><span class="line">  <span class="type">int</span> a;</span><br><span class="line">  NSObject *obj;</span><br><span class="line">  __main_block_impl_0(<span class="type">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="type">int</span> _a, NSObject *_obj, <span class="type">int</span> flags=<span class="number">0</span>) : <span class="built_in">a</span>(_a), <span class="built_in">obj</span>(_obj) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// block的实现方法，通过__cself拿到捕获的变量</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    <span class="comment">// 这里通过block捕获的结构体引用a字段</span></span><br><span class="line">    <span class="type">int</span> a = __cself-&gt;a; <span class="comment">// bound by copy</span></span><br><span class="line">    NSObject *obj = __cself-&gt;obj; <span class="comment">// bound by copy</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Block：%d\n&quot;</span>, a);</span><br><span class="line">    <span class="built_in">NSLog</span>((NSString *)&amp;__NSConstantStringImpl__var_folders_h8_fm423vjj5mlgb636xh5b44n80000gn_T_test_e9e5ff_mi_0, obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// block描述多了两个变量，copy和dispose方法，用于持有和释放block捕获的对象</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">struct</span> <span class="title class_">__main_block_desc_0</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> reserved;</span><br><span class="line">    <span class="type">size_t</span> Block_size;</span><br><span class="line">    <span class="built_in">void</span> (*copy)(<span class="keyword">struct</span> __main_block_impl_0*, <span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">    <span class="built_in">void</span> (*dispose)(<span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="built_in">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 声明自由变量</span></span><br><span class="line">    NSObject *obj = ((NSObject *(*)(id, SEL))(<span class="type">void</span> *)objc_msgSend)((id)((NSObject *(*)(id, SEL))(<span class="type">void</span> *)objc_msgSend)((id)<span class="built_in">objc_getClass</span>(<span class="string">&quot;NSObject&quot;</span>), <span class="built_in">sel_registerName</span>(<span class="string">&quot;alloc&quot;</span>)), <span class="built_in">sel_registerName</span>(<span class="string">&quot;init&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 构造block结构体__main_block_impl_0，并且结构体存放在栈上</span></span><br><span class="line">    <span class="built_in">void</span> (*blk)(<span class="type">void</span>) = ((<span class="built_in">void</span> (*)())&amp;__main_block_impl_0((<span class="type">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, a, obj, <span class="number">570425344</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 通过__main_block_impl_0.FuncPtr调用block指向的方法</span></span><br><span class="line">    ((<span class="built_in">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了一个对象<code>obj</code>，<code>__main_block_desc_0</code>多了两个方法（<code>__main_block_copy_0</code>, <code>__main_block_dispose_0</code>），用于持有和释放block捕获的对象，如果只有int，没有对对象的捕获，则不会生成这两个成员</p><h3 id="3-捕获可变变量"><a href="#3-捕获可变变量" class="headerlink" title="3. 捕获可变变量"></a>3. 捕获可变变量</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main() &#123;</span><br><span class="line">    __block <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="type">void</span> (^blk)(<span class="type">void</span>) = ^&#123;</span><br><span class="line">        printf(<span class="string">&quot;Block：%d\n&quot;</span>, a);</span><br><span class="line">    &#125;;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增一个结构体，对可变成员进行包装</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__Block_byref_a_0</span> &#123;</span><br><span class="line">    <span class="type">void</span> *__isa;</span><br><span class="line">    __Block_byref_a_0 *__forwarding;</span><br><span class="line">    <span class="type">int</span> __flags;</span><br><span class="line">    <span class="type">int</span> __size;</span><br><span class="line">    <span class="type">int</span> a;              <span class="comment">// 原来的成员</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// block实现，捕获的成员不是int a, 而是__Block_byref_a_0 *a, 其实就是`__block`修饰的成员包装成对象了</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">__main_block_impl_0</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">__block_impl</span> impl;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">__main_block_desc_0</span>* Desc;</span><br><span class="line">    __Block_byref_a_0 *a; <span class="comment">// by ref                 // 这里是捕获的成员，与上面一样</span></span><br><span class="line">    __main_block_impl_0(<span class="type">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, __Block_byref_a_0 *_a, <span class="type">int</span> flags=<span class="number">0</span>) : <span class="built_in">a</span>(_a-&gt;__forwarding) &#123;</span><br><span class="line">        impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">        impl.Flags = flags;</span><br><span class="line">        impl.FuncPtr = fp;</span><br><span class="line">        Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建__Block_byref_a_0包装原来的成员a</span></span><br><span class="line">    __attribute__((__blocks__(byref))) __Block_byref_a_0 a = &#123;(<span class="type">void</span>*)<span class="number">0</span>,(__Block_byref_a_0 *)&amp;a, <span class="number">0</span>, <span class="built_in">sizeof</span>(__Block_byref_a_0), <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 同上面捕获的</span></span><br><span class="line">    <span class="built_in">void</span> (*blk)(<span class="type">void</span>) = ((<span class="built_in">void</span> (*)())&amp;__main_block_impl_0((<span class="type">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_a_0 *)&amp;a, <span class="number">570425344</span>));</span><br><span class="line">    ((<span class="built_in">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>block捕获可变对象其实与捕获普通变量一样，只是对原有变量包装成一个新的对象而已</p><h3 id="4-捕获static变量"><a href="#4-捕获static变量" class="headerlink" title="4. 捕获static变量"></a>4. 捕获static变量</h3><p>这里例子就省了，直接上结论</p><ol><li>如果是局部static变量，block会当成普通局部变量一样处理，即会捕获该局部变量</li><li>如果是全局static变量，block会直接使用该全局变量，不进行变量捕获处理</li></ol><h2 id="block类型"><a href="#block类型" class="headerlink" title="block类型"></a>block类型</h2><p>上面我们看到的block的实现<code>__main_block_impl_0</code>包含一个<code>_isa</code>字段，用于标识block的类型，block有三种类型</p><ul><li>_NSConcreteStackBlock：存放在Stack上</li><li>_NSConcreteGlobalBlock：与全局变量一样，存放在全局区</li><li>_NSConcreteMallocBlock：存放在堆上</li></ul><p>看下面三种代码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> (^BlkSum)(<span class="type">int</span>, <span class="type">int</span>);</span><br><span class="line"></span><br><span class="line">BlkSum blk1 = ^ <span class="type">long</span> (<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当block不捕获外部变量，就会被声明成__NSGlobalBlock</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;blk1 = %@&quot;</span>, blk1);              <span class="comment">// blk1 = &lt;__NSGlobalBlock__: 0xce3347d0&gt;</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;blk1 = %@&quot;</span>, [blk1 <span class="keyword">copy</span>]);       <span class="comment">// blk1 = &lt;__NSGlobalBlock__: 0xce3347d0&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> base = <span class="number">100</span>;</span><br><span class="line">BlkSum blk2 = ^ <span class="type">long</span> (<span class="type">int</span> a, <span class="type">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> base + a + b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当block捕获外部变量，就会被声明成__NSStackBlock__</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;blk2 = %@&quot;</span>, blk2);              <span class="comment">// blk2 = &lt;__NSStackBlock__: 0xbfffddf8&gt;</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;blk2 = %@&quot;</span>, [blk2 <span class="keyword">copy</span>]);       <span class="comment">// blk2 = &lt;__NSMallocBlock__: 0xbfffcef8&gt;</span></span><br><span class="line"></span><br><span class="line">BlkSum blk3 = [[blk2 <span class="keyword">copy</span>] autorelease];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;blk3 = %@&quot;</span>, blk3);              <span class="comment">// blk3 = &lt;__NSMallocBlock__: 0x902fda0&gt;</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;blk3 = %@&quot;</span>, [blk3 <span class="keyword">copy</span>]);       <span class="comment">// blk3 = &lt;__NSMallocBlock__: 0x902fda0&gt;</span></span><br></pre></td></tr></table></figure><p>当block存放在全局时，始终只有一份，调用copy&#x2F;retain&#x2F;release，返回的是同一个对象<br>当block存放在栈上时，如果进行copy，block会被拷贝到堆上，调用retain或release无效<br>当block存放在堆上时，如果进行copy&#x2F;retain&#x2F;release，内存管理与对象一样，引用计数+&#x2F;-1</p><blockquote><p>上面是MRC的行为，而在ARC上即使是block没有进行拷贝，也会被拷贝到堆上，所以在ARC上的block只有堆区和全局区，在ARC上，如果block会自动在需要的时候进行copy，如block作为返回值时，block作为参数传给另一个函数时</p></blockquote><h2 id="前向引用"><a href="#前向引用" class="headerlink" title="前向引用"></a>前向引用</h2><p>当我们在block使用可变变量<code>__block</code>的时候，编译器会生成<code>__Block_byref_a_0</code>内部有一个<code>__forwarding</code>字段指向自己</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">__Block_byref_a_0</span> &#123;</span><br><span class="line">    <span class="type">void</span> *__isa;</span><br><span class="line">    __Block_byref_a_0 *__forwarding;        <span class="comment">// 指向自己</span></span><br><span class="line">    <span class="type">int</span> __flags;</span><br><span class="line">    <span class="type">int</span> __size;</span><br><span class="line">    <span class="type">int</span> a;              <span class="comment">// 原来的成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为什么要用一个变量指向自己，看下面这个例子</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    __block <span class="type">int</span> val = <span class="number">0</span>;</span><br><span class="line">    <span class="type">void</span> (^blk)(<span class="type">void</span>) = [^&#123;</span><br><span class="line">        ++val;</span><br><span class="line">    &#125; <span class="keyword">copy</span>];</span><br><span class="line">    ++val;</span><br><span class="line">    blk();</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%d&quot;</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据上面编译的代码，我们可以分析转换成的代码大致如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 1. 创建byref对象包装int val</span></span><br><span class="line">    __Block_byref_a_0 val;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 创建block对象__main_block_impl_0，这个时候block是存放在栈上的</span></span><br><span class="line">    __main_block_impl_0 blk = __main_block_impl_0(...)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 拷贝block，返回新的block，新的block存放在堆上</span></span><br><span class="line">    __main_block_impl_0 newBlk = _Block_copy(blk)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对变量＋1</span></span><br><span class="line">    ++(val-&gt;__forwarding-&gt;val)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    newBlk-&gt;FuncP();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;%d&quot;</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面有两个block（blk和newBlk）一个存放在栈上，一个存放在堆上<br>上面也有两个__Block_byref_a_0，当进行拷贝时，栈上的val也会被拷贝一份到堆上</p><p>当离开函数作用域时，栈上的内存会被释放，所以当block从栈拷贝到堆上时，会把堆上变量的__forwarding指针，指向堆，故后面及时我们使用局部变量val，实际上内部使用的已经是拷贝到堆上的变量了，这时候和block内部使用的变量是统一变量</p><h2 id="循环引用常见问题"><a href="#循环引用常见问题" class="headerlink" title="循环引用常见问题"></a>循环引用常见问题</h2><ul><li>NSTimer：<a href="https://blog.bombox.org/2017-05-08/nstimer-notes/">https://blog.bombox.org/2017-05-08/nstimer-notes/</a></li><li>CADisplayLink: 注意事项和用法与NSTimer类似</li><li>block：任何使用block的地方都需要考虑几个问题<ul><li>是否造成循环引用</li><li>对于异步操作是否因为强持有导致延后释放（例如网路请求）</li><li>除了self，被self强持有的变量也会导致循环引用</li><li>多层循环引用</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> block </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSTimer学习笔记</title>
      <link href="/2017-05-08/nstimer-notes/"/>
      <url>/2017-05-08/nstimer-notes/</url>
      
        <content type="html"><![CDATA[<p>NSTimer是iOS最常用的定时器工具之一，在使用的时候常常会遇到各种各样的问题，最常见的是内存泄漏，通常我们使用NSTimer的一般流程是这样的</p><ol><li>在ViewController初始化或加载的地方创建<code>NSTimer</code>，并且通过属性持有（为了关闭）</li><li>在ViewController的<code>dealloc</code>方法关闭定时器（<code>invalidate</code>），并且把NSTimer置为<code>nil</code></li></ol><p>上面做法可能会造成内存泄漏，<code>invalidate</code>方法通常不能放在NStimer.target.dealloc里面，因为NSTimer会对target强引用，而如果target对NSTimer强引用就会造成循环引用</p><span id="more"></span><h2 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h2><p>NSTimer只有被添加的Runloop才能生效，NSTimer有下面两种类型的构造函数</p><ul><li>initWithFireDate</li><li>timerWithTimeInterval</li><li>scheduledTimerWithTimeInterval</li></ul><p><code>scheduledTimerWithTimeInterval</code>除了构造timer，还会把timer添加到当前线程的runloop，所以我们通常使用<code>scheduledTimerWithTimeInterval</code>构造NSTimer而不是<code>timerWithTimeInterval</code></p><ol><li><p>没有添加到runloop的timer，调用fire的时候会直接触发，并且只触发一次（如果repeat:YES）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    [<span class="keyword">self</span> timer1];</span><br><span class="line">    <span class="comment">//[self timer2];</span></span><br><span class="line">    <span class="comment">//[self timer3];</span></span><br><span class="line">    <span class="comment">//[self timer4];</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)timer1 &#123;</span><br><span class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">    <span class="comment">// 不会触发</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)timer2 &#123;</span><br><span class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">    <span class="comment">// 正常触发</span></span><br><span class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">IBAction</span>)invalidate:(<span class="type">id</span>)sender &#123;</span><br><span class="line">    [<span class="keyword">self</span>.timer invalidate];</span><br><span class="line">    <span class="keyword">self</span>.timer = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)timerTest:(<span class="built_in">NSObject</span> *)obj &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;time fire&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果使用<code>timerWithTimeInterval</code>或<code>initWithFireDate</code>构造，需要手动添加到runloop上，使用<code>scheduledTimerWithTimeInterval</code>则不需要</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)timer3 &#123;</span><br><span class="line">    <span class="keyword">self</span>.timer = [[<span class="built_in">NSTimer</span> alloc] initWithFireDate:[<span class="built_in">NSDate</span> dateWithTimeIntervalSinceNow:<span class="number">3</span>] interval:<span class="number">3</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">    <span class="comment">// 需要添加到runloop才能触发</span></span><br><span class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)timer4 &#123;</span><br><span class="line">    <span class="comment">// 自动添加到runloop</span></span><br><span class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-NSTimer的触发"><a href="#2-NSTimer的触发" class="headerlink" title="2. NSTimer的触发"></a>2. NSTimer的触发</h2><ul><li>NSTimer在添加到runloop时，timer开始计时，即使runloop没有开启（<code>run</code>），在构造NSTimer的时候，如果不是马上开始计时，可以先使用<code>timerWithTimeInterval</code>再手动加入runloop上</li><li>调用<code>fire</code>的时候，立即触发timer的方法，该方法触发不影响计时器原本的计时，只是新增一次触发</li><li>当NSTimer进入后台的时，NSTimer计时暂停，进入前台继续</li></ul><h2 id="3-NSTimer和Runloop"><a href="#3-NSTimer和Runloop" class="headerlink" title="3. NSTimer和Runloop"></a>3. NSTimer和Runloop</h2><p>上面构造函数我们可以看到，当我们把timer添加到runloop的时候会指定NSRunLoopMode（scheduledTimerWithTimeInterval默认使用NSDefaultRunLoopMode），iOS支持的有下面两种模式</p><ul><li>NSDefaultRunLoopMode：默认的运行模式，用于大部分操作，除了NSConnection对象事件。</li><li>NSRunLoopCommonModes：是一个模式集合，当绑定一个事件源到这个模式集合的时候就相当于绑定到了集合内的每一个模式。</li></ul><p>下面三种是内部框架支持（AppKit）</p><ul><li>NSConnectionReplyMode：用来监控NSConnection对象的回复的，很少能够用到。</li><li>NSModalPanelRunLoopMode：用于标明和Mode Panel相关的事件。</li><li>NSEventTrackingRunLoopMode：用于跟踪触摸事件触发的模式（例如UIScrollView上下滚动）。</li></ul><p>当timer添加到主线程的runloop时，某些UI事件（如：UIScrollView的拖动操作）会将runloop切换到<code>NSEventTrackingRunLoopMode</code>模式下，在这个模式下，<code>NSDefaultRunLoopMode</code>模式注册的事件是不会被执行的，也就是通过<code>scheduledTimerWithTimeInterval</code>方法添加到runloop的NSTimer这时候是不会被执行的</p><p>为了让NSTimer不被UI事件干扰，我们需要将注册到runloop的timer的mode设为<code>NSRunLoopCommonModes</code>，这个模式等效于NSDefaultRunLoopMode和NSEventTrackingRunLoopMode的结合</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主线程</span></span><br><span class="line"><span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">[[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSRunLoopCommonModes</span>];</span><br></pre></td></tr></table></figure><h2 id="4-循环引用"><a href="#4-循环引用" class="headerlink" title="4. 循环引用"></a>4. 循环引用</h2><p>循环引用是最经常遇到的问题之一</p><ul><li><p>NSTimer在构造函数会对target强引用，在调用<code>invalidate</code>时，会移除去target的强引用</p>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Retain count is %ld&quot;</span>, <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)<span class="keyword">self</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="string">@&quot;ghi&quot;</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Retain count is %ld&quot;</span>, <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)<span class="keyword">self</span>));</span><br><span class="line"></span><br><span class="line">[timer invalidate];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Retain count is %ld&quot;</span>, <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)<span class="keyword">self</span>));</span><br></pre></td></tr></table></figure><p>  输出如下</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2017-05-09 10:41:45.071 NSTimerTest[6861:914021] Retain count is 6</span><br><span class="line">2017-05-09 10:41:46.056 NSTimerTest[6861:914021] Retain count is 7</span><br><span class="line">2017-05-09 10:41:47.848 NSTimerTest[6861:914021] Retain count is 6</span><br></pre></td></tr></table></figure></li><li><p>NSTimer被加到Runloop的时候，会被runloop强引用持有，在调用invalidate的时候，会从runloop删除</p>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="string">@&quot;ghi&quot;</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Retain count is %ld&quot;</span>, <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)timer));</span><br><span class="line"></span><br><span class="line">[[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Retain count is %ld&quot;</span>, <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)timer));</span><br><span class="line"></span><br><span class="line">[timer invalidate];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@&quot;Retain count is %ld&quot;</span>, <span class="built_in">CFGetRetainCount</span>((__bridge <span class="built_in">CFTypeRef</span>)timer));</span><br></pre></td></tr></table></figure><p>  输出如下</p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">2017</span>-<span class="number">05</span>-<span class="number">09</span> <span class="number">09</span>:<span class="number">37</span>:<span class="number">30</span>.<span class="number">573</span> NSTimerTest[<span class="number">6505</span>:<span class="number">883666</span>] Retain count is <span class="number">1</span></span><br><span class="line"><span class="attribute">2017</span>-<span class="number">05</span>-<span class="number">09</span> <span class="number">09</span>:<span class="number">37</span>:<span class="number">33</span>.<span class="number">177</span> NSTimerTest[<span class="number">6505</span>:<span class="number">883666</span>] Retain count is <span class="number">2</span></span><br><span class="line"><span class="attribute">2017</span>-<span class="number">05</span>-<span class="number">09</span> <span class="number">09</span>:<span class="number">38</span>:<span class="number">19</span>.<span class="number">111</span> NSTimerTest[<span class="number">6505</span>:<span class="number">883666</span>] Retain count is <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>当定时器是不重复的（repeat&#x3D;NO），在<strong>执行完</strong>触发函数后，会自动调用<code>invalidate</code>解除runloop的注册和接触对target的强引用</p></li></ul><p>由于NSTimer被加到runloop的时候会被runloop强引用，故如果使用<code>scheduledTimerWithTimeInterval</code>构造函数时，我们可以在viewcontroller使用<code>weak</code>引用NSTimer</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">NSTimer</span> *timer;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 由于timer会被当前线程的runloop持有，故可以使用weak引用，而当调用invalidate时，self.timer会被自动置为nil</span></span><br><span class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="built_in">NSTimer</span> *timer2 = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line">    [[<span class="built_in">NSRunLoop</span> currentRunLoop] addTimer:timer2 forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">    <span class="keyword">self</span>.timer = timer;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以通常我们不能在<code>dealloc</code>方法让<code>[timer invalidate]</code>, 因为timer在invalidate之前，会引用self（通常是ViewController），导致self无法释放，可以在<code>viewDidDisappear</code>或显式调用timer的<code>invalidate</code>方法</p><blockquote><p>invalidate是唯一让timer从runloop删除的方法，也是唯一去除对target强引用的方法</p></blockquote><h2 id="5-多线程"><a href="#5-多线程" class="headerlink" title="5. 多线程"></a>5. 多线程</h2><p>如果我们不在主线程使用Timer的时候，即使我们把timer添加到runloop，也不能被触发，因为主线程的runloop默认是开启的，而其他线程的runloop默认没有实现runloop，并且在后台线程使用NSTimer不能通过fire启动定时器，只能通过runloop不断的运行下去</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用新线程</span></span><br><span class="line">    [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(startNewThread) toTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)startNewThread &#123;</span><br><span class="line">    <span class="keyword">self</span>.timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加到runloop</span></span><br><span class="line">    <span class="built_in">NSRunLoop</span> *runLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">    [runLoop addTimer:<span class="keyword">self</span>.timer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 非主线程需要手动运行runloop，run方法会阻塞，直到没有输入源的时候返回（例如：timer从runloop中移除，invalidate）</span></span><br><span class="line">    [runLoop run]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-NSTimer准确性"><a href="#6-NSTimer准确性" class="headerlink" title="6. NSTimer准确性"></a>6. NSTimer准确性</h2><p>通常我们使用NSTimer的时候都是在主线程使用的，主线程负责很多复杂的操作，例如UI处理，UI时间响应，并且iOS上的主线程是优先响应UI事件的，而NSTimer的优先级较低，有时候NSTimer的触发并不准确，例如当我们在滑动UIScrollView的时候，NSTimer就会延迟触发，主线优先响应UI的操作，只有UIScrollView停止了才触发NSTimer的事件<br>解决方案<br>NSTimer加入到runloop默认的Mode为<code>NSDefaultRunLoopMode</code>， 我们需要手动设置Mode为<code>NSRunLoopCommonModes</code><br>这时候，NSTimer即使在UI持续操作过程中也能得到触发，当然，会降低流畅度</p><p>NSTimer触发是不精确的，如果由于某些原因错过了触发时间，例如执行了一个长时间的任务，那么NSTimer不会延后执行，而是会等下一次触发，相当于等公交错过了，只能等下一趟车，<code>tolerance</code>属性可以设置误差范围</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSTimer</span> *timer = [<span class="built_in">NSTimer</span> scheduledTimerWithTimeInterval:<span class="number">2</span> target:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(timerTest:) userInfo:<span class="literal">nil</span> repeats:<span class="literal">YES</span>];</span><br><span class="line"><span class="comment">// 误差范围1s内</span></span><br><span class="line">timer.tolerance = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>如果对精度有要求，可以使用GCD的定时器</p></blockquote><h2 id="7-NSTimer暂停-x2F-继续"><a href="#7-NSTimer暂停-x2F-继续" class="headerlink" title="7 NSTimer暂停&#x2F;继续"></a>7 NSTimer暂停&#x2F;继续</h2><p>NSTimer不支持暂停和继续，如果需要可以使用GCD的定时器</p><h2 id="8-后台运行"><a href="#8-后台运行" class="headerlink" title="8. 后台运行"></a>8. 后台运行</h2><p>NSTimer不支持后台运行（真机），但是模拟器上App进入后台的时候，NSTimer还会持续触发</p><p>如果需要后台运行可以通过下面两种方式支持</p><ol><li>让App支持后台运行（运行音频）（在后台可以触发）</li><li>记录离开和进入App的时间，手动控制计时器（在后台不能触发）</li></ol><p>第一种控制起来比较麻烦，通常建议手动控制，不在后台触发计时</p><h2 id="9-performSelector"><a href="#9-performSelector" class="headerlink" title="9. performSelector"></a>9. performSelector</h2><p>NSObject对象有一个<code>performSelector</code>可以用于延迟执行一个方法，其实该方法内部是启用一个Timer并添加到当前线程的runloop，原理与NSTimer一样，所以在非主线程使用的时候，需要保证线程的runloop是运行的，否则不会得到执行</p><p>如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="variable language_">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">NSThread</span> detachNewThreadSelector:<span class="keyword">@selector</span>(startNewThread) toTarget:<span class="keyword">self</span> withObject:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)startNewThread &#123;</span><br><span class="line">    <span class="comment">// test方法不会触发，因为runloop默认不开启</span></span><br><span class="line">    [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(test) withObject:<span class="literal">nil</span> afterDelay:<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="type">void</span>)test &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@&quot;test trigger&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-总结"><a href="#10-总结" class="headerlink" title="10. 总结"></a>10. 总结</h2><p>总的来说使用NSTimer有两点需要注意</p><ol><li>NSTimer只有被注册到runloop才能起作用，fire不是开启定时器的方法，只是触发一次定时器的方法</li><li>NSTimer会强引用target</li><li><code>invalidate</code>取消runloop的注册和target的强引用，如果是非重复的定时器，则在触发时会自动调用<code>invalidate</code></li></ol><p>通常我们自己封装GCD定时器使用起来更为方便，不会有这些问题</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-pip-upgrade</title>
      <link href="/2017-04-27/python-pip-upgrade/"/>
      <url>/2017-04-27/python-pip-upgrade/</url>
      
        <content type="html"><![CDATA[<h2 id="升级单个类库"><a href="#升级单个类库" class="headerlink" title="升级单个类库"></a>升级单个类库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade flask</span><br></pre></td></tr></table></figure><h2 id="升级所有类库"><a href="#升级所有类库" class="headerlink" title="升级所有类库"></a>升级所有类库</h2><p>由于pip不支持批量操作，这里通过python代码升级</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pip</span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> call</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dist <span class="keyword">in</span> pip.get_installed_distributions():</span><br><span class="line">    call(<span class="string">&quot;pip install --upgrade &quot;</span> + dist.project_name, shell=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="导出已安装的类库配置"><a href="#导出已安装的类库配置" class="headerlink" title="导出已安装的类库配置"></a>导出已安装的类库配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h2 id="安装类库配置"><a href="#安装类库配置" class="headerlink" title="安装类库配置"></a>安装类库配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask+nginx+gunicorn部署</title>
      <link href="/2016-11-02/flask-nginx-gunicorn-deploy/"/>
      <url>/2016-11-02/flask-nginx-gunicorn-deploy/</url>
      
        <content type="html"><![CDATA[<p>最近学习了flask，准备把flask部署到服务器上，这里记录部署的过程和期间遇到的一些问题</p><span id="more"></span><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-flask"><a href="#1-flask" class="headerlink" title="1. flask"></a>1. flask</h3><p>我们建立一个最简单的flask应用，目录如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/home/ubuntu/python/flask</span><br><span class="line">    www</span><br><span class="line">      app</span><br><span class="line">        run.py</span><br></pre></td></tr></table></figure><p>为<code>run.py</code>模块添加一个helloworld示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello World!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>通常我们的应用是放在virtualenv环境下的，这里我的虚拟环境路径为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /home/ubuntu/python/env</span><br></pre></td></tr></table></figure><h3 id="2-nginx"><a href="#2-nginx" class="headerlink" title="2. nginx"></a>2. nginx</h3><p>nginx不用多介绍，高性能web服务器，通常用来在前端做反向代理服务器，下面是安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先更新一下源</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>安装完成后重启nginx服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service nginx restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他命令</span></span><br><span class="line">$ sudo service nginx stop</span><br><span class="line">$ sudo service nginx restart</span><br></pre></td></tr></table></figure><p>就可以通过ip访问了，如果是外网并绑定了域名，也可以通过域名访问，nginx默认访问的是<code>/usr/share/nginx/html</code>这个文件<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-11-1/68380067.jpg"></p><h3 id="3-gunicorn"><a href="#3-gunicorn" class="headerlink" title="3. gunicorn"></a>3. <a href="http://gunicorn.org/">gunicorn</a></h3><p>flask自带的服务器只适合在开发调试时候用，并不能满足性能的要求，我们这里采用 gunicorn做wsgi容器，用来部署python，安装很简单，进入虚拟环境安装，使用pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="built_in">env</span>) $ sudo pip install gunicorn</span><br></pre></td></tr></table></figure><p>安装完后运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先进到目录</span></span><br><span class="line">(<span class="built_in">env</span>) $ <span class="built_in">cd</span> /home/ubuntu/python/flask/www/app</span><br><span class="line">(<span class="built_in">env</span>) $ gunicorn -w 4 -b 127.0.0.1:8080 run:app</span><br></pre></td></tr></table></figure><blockquote><p>后面的<code>run:app</code>的run表示模块，app表示模块里面的对象，即Flask实例，接着就可以访问了：<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p></blockquote><h2 id="二、配置gunicorn到nginx"><a href="#二、配置gunicorn到nginx" class="headerlink" title="二、配置gunicorn到nginx"></a>二、配置gunicorn到nginx</h2><h3 id="1-配置nginx"><a href="#1-配置nginx" class="headerlink" title="1. 配置nginx"></a>1. 配置nginx</h3><p>修改nginx默认配置之前，我们先备份一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">cp</span> /etc/nginx/site-avalidable/default /etc/nginx/site-avalidable/default.bak</span><br></pre></td></tr></table></figure><p>修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vim /etc/nginx/site-avalidable/default</span><br></pre></td></tr></table></figure><p>内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 default_server;</span><br><span class="line">    listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是HOST机器的外部域名，用地址也行</span></span><br><span class="line">    server_name example.org;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        <span class="comment"># 这里是指向 gunicorn host 的服务地址</span></span><br><span class="line">        proxy_pass http://127.0.0.1:8080;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完重启nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service nginx restart</span><br></pre></td></tr></table></figure><p>当访问ip或域名的时候，nginx会自动代理到<code>http://127.0.0.1:8080</code>，即gunicorn服务</p><h3 id="2-将gunicorn作为系统服务启动"><a href="#2-将gunicorn作为系统服务启动" class="headerlink" title="2. 将gunicorn作为系统服务启动"></a>2. 将gunicorn作为系统服务启动</h3><p>上面配置完成后需要启动gunicorn才能看到hello world页面，我们需要让gunicorn在后台运行，而不是在控制台手动启动</p><h4 id="2-1-Ubuntu15-04系统版本以上"><a href="#2-1-Ubuntu15-04系统版本以上" class="headerlink" title="2.1 Ubuntu15.04系统版本以上"></a>2.1 Ubuntu15.04系统版本以上</h4><p>由于这里用到了<code>virtualenv</code>，为了减少一些配置的问题，这里我把gunicorn服务的启动包装到一个<code>myflask.sh</code>文件里面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入主目录</span></span><br><span class="line"><span class="built_in">cd</span> /home/ubuntu/python/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入virtualenv环境</span></span><br><span class="line"><span class="built_in">source</span> <span class="built_in">env</span>/bin/activate;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入flask项目目录</span></span><br><span class="line"><span class="built_in">cd</span> flask/www/app;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动gunicorn服务</span></span><br><span class="line">gunicorn -w 4 -b 127.0.0.1:8080 run:app;</span><br></pre></td></tr></table></figure><p>这里我用的是<code>Ubuntu16.04</code>，需要通过<code>systemd</code>来配置系统服务，我们先定义一个服务配置<code>myflask.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=The myflask service</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">WorkingDirectory</span>=/home/ubuntu/python/flask/www/app</span><br><span class="line"><span class="attr">ExecStart</span>=/bin/bash myflask.sh</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>拷贝服务到<code>/etc/systemd/system/</code>目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">cp</span> myflask.service /etc/systemd/system/myflask.service</span><br></pre></td></tr></table></figure><p>启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重载所有修改过的配置文件</span></span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">$ sudo systemctl start myflask.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止服务</span></span><br><span class="line">$ sudo systemctl stop myflask.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务</span></span><br><span class="line">$ sudo systemctl restart myflask.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死一个服务的所有子进程</span></span><br><span class="line">$ sudo systemctl <span class="built_in">kill</span> myflask.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看服务的状态，可以看到一些错误</span></span><br><span class="line">$ sudo systemctl status myflask.service</span><br></pre></td></tr></table></figure><p>启动完后访问成功<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-11-2/62538421.jpg"></p><h4 id="2-2-Ubuntu-15-05系统版本以下"><a href="#2-2-Ubuntu-15-05系统版本以下" class="headerlink" title="2.2 Ubuntu 15.05系统版本以下"></a>2.2 Ubuntu 15.05系统版本以下</h4><p>如果系统为12.04的版本，可以把服务配置文件加到<code>/etc/init.d/</code>目录中，服务配置<code>myflaskserver</code>如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">description <span class="string">&quot;The myflask service&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关于runlevel(运行级别)的更多说明，参见：http://www.cnblogs.com/dkblog/archive/2011/08/30/2160191.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在下面4种级别的时候开启</span></span><br><span class="line">start on runlevel [2345]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在非下面4种级别的时候关闭</span></span><br><span class="line">stop on runlevel [!2345]</span><br><span class="line"></span><br><span class="line">respawn</span><br><span class="line">setuid root</span><br><span class="line">setgid www-data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置虚拟环境路径</span></span><br><span class="line"><span class="built_in">env</span> PATH= /home/ubuntu/python/env/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改当前目录</span></span><br><span class="line"><span class="built_in">chdir</span> /home/ubuntu/python/flask/www/app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行gunicorn服务</span></span><br><span class="line"><span class="built_in">exec</span> gunicorn -w 4 -b 127.0.0.1:8080 run:app</span><br></pre></td></tr></table></figure><p>拷贝到<code>/etc/init.d/</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">cp</span> myflaskserver /etc/init.d/myflaskserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 为文件添加可执行权限</span></span><br><span class="line">$ sudo <span class="built_in">chmod</span> +x /etc/init.d/myflaskserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接到启动目录，系统启动的时候会运行</span></span><br><span class="line"><span class="comment"># S99表示优先级，系统核心服务用 0-19，20-39 是一般系统服务，40-59 好像是进行系统设置居多，60-79 是一些核心应用服务，80-99 就是最终用户接触的应用服务。</span></span><br><span class="line">$ sudo <span class="built_in">ln</span> -sf /etc/init.d/myflaskserver /etc/rc3.d/S99myflaskserver</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用crontab运行python脚本</title>
      <link href="/2016-10-06/crontab-python/"/>
      <url>/2016-10-06/crontab-python/</url>
      
        <content type="html"><![CDATA[<p>之前使用crontab经常遇到一些问题，例如脚本不执行的问题，报错问题，在这里记录一下过程，先介绍一个python工具，可以自动更改和生成crontab运行脚本，使用起来非常友好：<a href="http://github.com/fengsp/plan">plan</a></p><span id="more"></span><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install plan</span><br></pre></td></tr></table></figure><h2 id="二、创建任务脚本"><a href="#二、创建任务脚本" class="headerlink" title="二、创建任务脚本"></a>二、创建任务脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> plan <span class="keyword">import</span> Plan</span><br><span class="line"></span><br><span class="line">cron = Plan()</span><br><span class="line"></span><br><span class="line"><span class="comment"># register one command, script or module</span></span><br><span class="line"><span class="comment"># cron.command(&#x27;command&#x27;, every=&#x27;1.day&#x27;)</span></span><br><span class="line"><span class="comment"># cron.script(&#x27;script.py&#x27;, path=&#x27;/web/yourproject/scripts&#x27;, every=&#x27;1.month&#x27;)</span></span><br><span class="line"><span class="comment"># cron.module(&#x27;calendar&#x27;, every=&#x27;feburary&#x27;, at=&#x27;day.3&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cron.run()</span><br></pre></td></tr></table></figure><p>也可以使用下面命令自动创建，会在<code>schedule</code>目录下生成一个<code>schedule.py</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> schedule</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> schedule</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">plan-quickstart</span></span><br></pre></td></tr></table></figure><h2 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h2><p>直接在crontab配置文件中使用执行python脚本遇到了好多坑，最后还是使用sh脚本来运行，我们在schedule目录下创建一个文件夹<code>bash</code>，新增一个sh脚本文件<code>OneMinitesTask.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 当前路径为: schedule/bash</span></span><br><span class="line"><span class="built_in">cd</span> ..;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="built_in">source</span> <span class="built_in">env</span>/bin/activate;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行python脚本</span></span><br><span class="line">python OneMinitesTask.py</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br></pre></td></tr></table></figure><p>创建完后我们还需要保证添加可执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x OneMinitesTask.sh</span><br></pre></td></tr></table></figure><p>下面是<code>schedule.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> plan <span class="keyword">import</span> Plan</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取bash路径（由于这里依赖于getcwd方法，所以要确保运行目录为当前目录）</span></span><br><span class="line">bash_path = os.path.abspath(os.path.join(os.getcwd(), <span class="string">&quot;bash&quot;</span>))</span><br><span class="line"></span><br><span class="line">cron = Plan()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个任务，每分钟执行一次TenMinutesTask.sh脚本</span></span><br><span class="line"><span class="comment"># 这里的every参数详细介绍见官网：http://plan.readthedocs.io/job_definition.html#every</span></span><br><span class="line">job = Job(<span class="string">&#x27;./OneMinutesTask.sh &gt; hello.txt&#x27;</span>, path=bash_path, every=<span class="string">&#x27;1.minute&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加到plan上，可以添加多个job</span></span><br><span class="line">cron.job(job)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 输出到文件，覆盖原有的任务，这里还有其他的参数，详情见官网：http://plan.readthedocs.io/run_types.html</span></span><br><span class="line">    cron.run(<span class="string">&#x27;white&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> schedule</span><br><span class="line">$ python schedule.py</span><br><span class="line">[write] crontab file written</span><br></pre></td></tr></table></figure><p>查看crontab任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br><span class="line"><span class="comment"># Begin Plan generated jobs for: main</span></span><br><span class="line">* * * * * <span class="built_in">cd</span> /home/ubuntu/schedule/bash &amp;&amp; ./OneMinutesTask.sh</span><br><span class="line"><span class="comment"># End Plan generated jobs for: main</span></span><br></pre></td></tr></table></figure><p>ok，测试运行成功，使用python脚本配置crontab运行脚本可读性更强，更好维护</p><h2 id="四、常见问题"><a href="#四、常见问题" class="headerlink" title="四、常见问题"></a>四、常见问题</h2><h3 id="1-不确定任务是否运行，可以到-var-log-cron-log查看crontab的运行日志"><a href="#1-不确定任务是否运行，可以到-var-log-cron-log查看crontab的运行日志" class="headerlink" title="1. 不确定任务是否运行，可以到/var/log/cron.log查看crontab的运行日志"></a>1. 不确定任务是否运行，可以到<code>/var/log/cron.log</code>查看crontab的运行日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /var/log/cron.log</span><br></pre></td></tr></table></figure><p>使用<code>Shift+G</code>跳到最后一行</p><p>如果没有日志也可能是log服务没有开启，到<code>/etc/rsyslog.d/50-default.conf</code>查看<code>cron.*              /var/log/cron.log</code>一行是否被注释掉了，如果注释掉了，把注释关了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/rsyslog.d/50-default.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改完后重启rsyslog</span></span><br><span class="line">$ sudo service rsyslog restart</span><br></pre></td></tr></table></figure><h3 id="2-关闭crontab任务"><a href="#2-关闭crontab任务" class="headerlink" title="2. 关闭crontab任务"></a>2. 关闭crontab任务</h3><p>如果要关闭定时crontab，使用下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除crontab任务，删除后通过crontab -l查看则提示无任务</span></span><br><span class="line">$ crontab -r</span><br></pre></td></tr></table></figure><p>如果crontab的定时任务启动了，由于crontab只负责定时调用任务，crontab本身不支持任务的管理，如果需要关闭后台正在运行的任务，可以通过<code>ps aux</code>命令查看任务的<code>PID</code>，然后找到我们的任务，然后使用<code>kill &#123;PID&#125;</code>杀掉任务即可</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> crontab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2016学习书单</title>
      <link href="/2016-09-21/book-2016/"/>
      <url>/2016-09-21/book-2016/</url>
      
        <content type="html"><![CDATA[<p>最近拖延症又犯了，事情总是一拖再拖，一个人学习很容易堕落，在家里，一不小心，刷刷微博，看看新闻，一天就过去了，今年只剩下4个月了，想做的事情总是半途而废，虽然有时候很尽力去控制，但还是浪费了不少时间，下决心在剩余时间里，给自己定一些目标，计划+实施，定好时间点，这里记录一下今年需要看的书和计划</p><span id="more"></span><h2 id="一、目标"><a href="#一、目标" class="headerlink" title="一、目标"></a>一、目标</h2><ul><li>学习<code>python</code></li><li>完成<code>PaiPaiDai</code>自动化策略管理</li><li>学习<code>scrapy</code>，用scrapy框架写一个项目，并通过博客记录过程（十月之前）</li><li>学习<code>flask</code>，用flask写一个项目，并通过博客写出搭建过程（十一月之前）</li><li>学习机器学习常用分类器和训练算法，通过项目实战（十二月之前）</li><li>学一门乐器（布鲁斯口琴），每天练习20-30分钟</li></ul><h2 id="二、技术"><a href="#二、技术" class="headerlink" title="二、技术"></a>二、技术</h2><p>今年的目标以python为主，Web服务器，爬虫（简单数据挖掘+机器学习）</p><ul><li>《FlaskWeb开发：基于Python的Web应用开发实战》</li><li>《编写高质量代码 改善Python程序的91个建议》</li></ul><h2 id="三、非技术"><a href="#三、非技术" class="headerlink" title="三、非技术"></a>三、非技术</h2><ul><li>《纽约摄影学院教材-上》</li><li>《纽约摄影学院教材-下》</li><li>《黑客与画家》</li><li>《数学之美》</li></ul><h2 id="四、选读"><a href="#四、选读" class="headerlink" title="四、选读"></a>四、选读</h2><ul><li>《五行大义》：阴阳五行基础</li><li>《中国房地产到底该怎么办》</li><li>《亲密行为》</li><li>《牛奶可乐经济学》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>scrapy学习笔记</title>
      <link href="/2016-09-11/scrapy-start/"/>
      <url>/2016-09-11/scrapy-start/</url>
      
        <content type="html"><![CDATA[<p>scrapy是python最有名的爬虫框架之一，可以很方便的进行web抓取，并且提供了很强的定制型，这里记录简单学习的过程和在实际应用中会遇到的一些常见问题</p><span id="more"></span><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>在安装scrapy之前有一些依赖需要安装，否则可能会安装失败，scrapy的选择器依赖于<code>lxml</code>，还有<code>Twisted</code>网络引擎，下面是ubuntu下安装的过程</p><h3 id="1-linux下安装"><a href="#1-linux下安装" class="headerlink" title="1. linux下安装"></a>1. linux下安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 安装xml依赖库</span></span><br><span class="line">$ sudo apt-get install libxml2 libxml2-dev</span><br><span class="line">$ sudo apt-get install libxslt1-dev</span><br><span class="line">$ sudo apt-get install python-libxml2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 安装lxml</span></span><br><span class="line">$ sudo pip install lxml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 安装Twisted（版本可以换成最新的），用pip也可以，如果失败的话下载源码安装，如下</span></span><br><span class="line">$ wget https://pypi.python.org/packages/6b/23/8dbe86fc83215015e221fbd861a545c6ec5c9e9cd7514af114d1f64084ab/Twisted-16.4.1.tar.bz2<span class="comment">#md5=c6d09bdd681f538369659111f079c29d</span></span><br><span class="line">$ tar xjf Twisted-16.4.1.tar.bz2</span><br><span class="line">$ <span class="built_in">cd</span> Twisted-16.4.1</span><br><span class="line">$ sudo python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 安装scrapy</span></span><br><span class="line">$ sudo pip install scrapy</span><br></pre></td></tr></table></figure><blockquote><p><a href="http://lxml.de/installation.html">http://lxml.de/installation.html</a></p></blockquote><h3 id="2-Mac下安装"><a href="#2-Mac下安装" class="headerlink" title="2. Mac下安装"></a>2. Mac下安装</h3><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装xml依赖库</span></span><br><span class="line"><span class="variable">$ </span>xcode-<span class="keyword">select</span> —install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实相关依赖pip会自动帮我们装上</span></span><br><span class="line"><span class="variable">$ </span>pip install scrapy</span><br></pre></td></tr></table></figure><p>mac下安装有时候会失败，建议使用<code>virtualenv</code>安装在独立的环境下，可以减少一些问题，因为mac系统自带python，例如一些依赖库依赖的一些新的版本，而升级新版本会把旧版本卸载掉，卸载可能会有权限的问题</p><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><h3 id="1-初始化scrapy项目"><a href="#1-初始化scrapy项目" class="headerlink" title="1. 初始化scrapy项目"></a>1. 初始化scrapy项目</h3><p>我们可以使用命令行初始化一个项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy startproject tutorial</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/commands.html">这里</a>可以查看scrapy更多其他的命令</p></blockquote><p>初始化完成后，我们得到下面目录结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scrapy.cfg:         项目的配置文件</span><br><span class="line">tutorial/:          该项目的python模块, 在这里添加代码</span><br><span class="line">    items.py:       项目中的item文件</span><br><span class="line">    pipelines.py:   项目中的pipelines文件.</span><br><span class="line">    settings.py:    项目全局设置文件.</span><br><span class="line">    spiders/        爬虫模块目录</span><br></pre></td></tr></table></figure><p>我们先看一下scrapy的处理流程图<br><img src="/images/post/20180707174111682.png" alt="流程图"></p><p>scrapy由下面几个部分组成</p><ul><li><code>spiders</code>：爬虫模块，负责配置需要爬取的数据和爬取规则，以及解析结构化数据</li><li><code>items</code>：定义我们需要的结构化数据，使用相当于<code>dict</code></li><li><code>pipelines</code>：管道模块，处理spider模块分析好的结构化数据，如保存入库等</li><li><code>middlewares</code>：中间件，相当于钩子，可以对爬取前后做预处理，如修改请求header，url过滤等</li></ul><p>我们先来看一个例子，在<code>spiders</code>目录下新建一个模块<code>DmozSpider.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DmozSpider</span>(scrapy.Spider):</span><br><span class="line">    <span class="comment"># 必须定义</span></span><br><span class="line">    name = <span class="string">&quot;dmoz&quot;</span></span><br><span class="line">    <span class="comment"># 初始urls</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">&quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 默认response处理函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 把结果写到文件中</span></span><br><span class="line">        filename = response.url.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure><p>打开终端进入根目录，执行下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy crawl dmoz</span><br></pre></td></tr></table></figure><p>爬虫开始爬取start_urls定义的url，并输出到文件中，最后输出爬去报告，会输出爬取得统计结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">2016-09-13 10:36:43 [scrapy] INFO: Spider opened</span><br><span class="line">2016-09-13 10:36:43 [scrapy] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)</span><br><span class="line">2016-09-13 10:36:43 [scrapy] DEBUG: Telnet console listening on 127.0.0.1:6023</span><br><span class="line">2016-09-13 10:36:44 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/&gt; (referer: None)</span><br><span class="line">2016-09-13 10:36:45 [scrapy] DEBUG: Crawled (200) &lt;GET http://www.dmoz.org/Computers/Programming/Languages/Python/Books/&gt; (referer: None)</span><br><span class="line">2016-09-13 10:36:45 [scrapy] INFO: Closing spider (finished)</span><br><span class="line">2016-09-13 10:36:45 [scrapy] INFO: Dumping Scrapy stats:</span><br><span class="line">&#123;<span class="string">&#x27;downloader/request_bytes&#x27;</span>: 548,</span><br><span class="line"> <span class="string">&#x27;downloader/request_count&#x27;</span>: 2,</span><br><span class="line"> <span class="string">&#x27;downloader/request_method_count/GET&#x27;</span>: 2,</span><br><span class="line"> <span class="string">&#x27;downloader/response_bytes&#x27;</span>: 16179,</span><br><span class="line"> <span class="string">&#x27;downloader/response_count&#x27;</span>: 2,</span><br><span class="line"> <span class="string">&#x27;downloader/response_status_count/200&#x27;</span>: 2,</span><br><span class="line"> <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;finished&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;finish_time&#x27;</span>: datetime.datetime(2016, 9, 13, 2, 36, 45, 585113),</span><br><span class="line"> <span class="string">&#x27;log_count/DEBUG&#x27;</span>: 3,</span><br><span class="line"> <span class="string">&#x27;log_count/INFO&#x27;</span>: 7,</span><br><span class="line"> <span class="string">&#x27;response_received_count&#x27;</span>: 2,</span><br><span class="line"> <span class="string">&#x27;scheduler/dequeued&#x27;</span>: 2,</span><br><span class="line"> <span class="string">&#x27;scheduler/dequeued/memory&#x27;</span>: 2,</span><br><span class="line"> <span class="string">&#x27;scheduler/enqueued&#x27;</span>: 2,</span><br><span class="line"> <span class="string">&#x27;scheduler/enqueued/memory&#x27;</span>: 2,</span><br><span class="line"> <span class="string">&#x27;start_time&#x27;</span>: datetime.datetime(2016, 9, 13, 2, 36, 43, 935790)&#125;</span><br><span class="line">2016-09-13 10:36:45 [scrapy] INFO: Spider closed (finished)</span><br></pre></td></tr></table></figure><p>这里我们完成了简单的爬取和保存的操作，会在根目录生成两个文件<code>Resources</code>和<code>Books</code></p><h3 id="2-通过代码运行爬虫"><a href="#2-通过代码运行爬虫" class="headerlink" title="2. 通过代码运行爬虫"></a>2. 通过代码运行爬虫</h3><p>每次进入控制台运行爬虫还是比较麻烦的，而且不好调试，我们可以通过<code>CrawlerProcess</code>通过代码运行爬虫，新建一个模块<code>run.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.crawler <span class="keyword">import</span> CrawlerProcess</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.project <span class="keyword">import</span> get_project_settings</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> spiders.DmozSpider <span class="keyword">import</span> DmozSpider</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取settings.py模块的设置</span></span><br><span class="line">settings = get_project_settings()</span><br><span class="line">process = CrawlerProcess(settings=settings)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以添加多个spider</span></span><br><span class="line"><span class="comment"># process.crawl(Spider1)</span></span><br><span class="line"><span class="comment"># process.crawl(Spider2)</span></span><br><span class="line">process.crawl(DmozSpider)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动爬虫，会阻塞，直到爬取完成</span></span><br><span class="line">process.start()</span><br></pre></td></tr></table></figure><blockquote><p>参考：<a href="http://doc.scrapy.org/en/latest/topics/practices.html#run-scrapy-from-a-script">http://doc.scrapy.org/en/latest/topics/practices.html#run-scrapy-from-a-script</a></p></blockquote><h2 id="三、Scrapy类"><a href="#三、Scrapy类" class="headerlink" title="三、Scrapy类"></a>三、Scrapy类</h2><p>如上面的<code>DmozSpider</code>类，爬虫类继承自<code>scrapy.Spider</code>，用于构造<code>Request</code>对象给Scheduler</p><h3 id="1-常用属性与方法"><a href="#1-常用属性与方法" class="headerlink" title="1. 常用属性与方法"></a>1. 常用属性与方法</h3><p><em>属性</em></p><ul><li><code>name</code>：爬虫的名字，必须唯一（如果在控制台使用的话，必须配置）</li><li><code>start_urls</code>：爬虫初始爬取的链接列表</li><li><code>parse</code>：response结果处理函数</li><li><code>custom_settings</code>：自定义配置，覆盖<code>settings.py</code>中的默认配置</li></ul><p><em>方法</em></p><ul><li><code>start_requests</code>：启动爬虫的时候调用，默认是调用<code>make_requests_from_url</code>方法爬取<code>start_urls</code>的链接，可以在这个方法里面定制，如果重写了该方法，start_urls默认将不会被使用，可以在这个方法里面定制一些自定义的url，如登录，从数据库读取url等，本方法返回Request对象</li><li><code>make_requests_from_url</code>：默认由<code>start_requests</code>调用，可以配置Request对象，返回Request对象</li><li><code>parse</code>：response到达spider的时候默认调用，如果在Request对象配置了callback函数，则不会调用，parse方法可以迭代返回<code>Item</code>或<code>Request</code>对象，如果返回Request对象，则会进行增量爬取</li></ul><h3 id="2-Request与Response对象"><a href="#2-Request与Response对象" class="headerlink" title="2. Request与Response对象"></a>2. Request与Response对象</h3><p>每个请求都是一个Request对象，Request对象定义了请求的相关信息（<code>url</code>, <code>method</code>, <code>headers</code>, <code>body</code>, <code>cookie</code>, <code>priority</code>）和回调的相关信息（<code>meta</code>, <code>callback</code>, <code>dont_filter</code>, <code>errback</code>），通常由spider迭代返回</p><p>其中<code>meta</code>相当于附加变量，可以在请求完成后通过<code>response.meta</code>访问</p><p>请求完成后，会通过<code>Response</code>对象发送给spider处理，常用属性有（<code>url</code>, <code>status</code>, <code>headers</code>, <code>body</code>, <code>request</code>, <code>meta</code>, ）</p><p>详细介绍参考官网</p><ul><li><a href="https://doc.scrapy.org/en/latest/topics/request-response.html#request-objects">https://doc.scrapy.org/en/latest/topics/request-response.html#request-objects</a></li><li><a href="https://doc.scrapy.org/en/latest/topics/request-response.html#response-objects">https://doc.scrapy.org/en/latest/topics/request-response.html#response-objects</a></li></ul><p>看下面这个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Spider</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Request</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestSpider</span>(<span class="title class_ inherited__">Spider</span>):</span><br><span class="line">    name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">&quot;http://www.qq.com/&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">login_parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 如果登录成功,手动构造请求Request迭代返回 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(response)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            <span class="keyword">yield</span> Request(<span class="string">&#x27;http://www.example.com/list/1?page=&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 覆盖默认的方法(忽略start_urls),返回登录请求页,制定处理函数为login_parse &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Request(<span class="string">&#x27;http://www.example.com/login&#x27;</span>, method=<span class="string">&quot;POST&quot;</span> body=<span class="string">&#x27;username=bomo&amp;pwd=123456&#x27;</span>, callback=self.login_parse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 默认请求处理函数 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><h2 id="四、Selector"><a href="#四、Selector" class="headerlink" title="四、Selector"></a>四、Selector</h2><p>上面我们只是爬取了网页的html文本，对于爬虫，我们需要明确我们需要爬取的结构化数据，需要对原文本进行解析，解析的方法通常有下面这些</p><ul><li>普通文本操作</li><li>正则表达式：<code>re</code></li><li>Dom树操作：<code>BeautifulSoup</code></li><li>XPath选择器：<code>lxml</code></li></ul><p>scrapy默认支持选择器的功能，自带的选择器构建与lxml之上，并对其进行了改进，使用起来更为简洁明了</p><h3 id="1-XPath选择器"><a href="#1-XPath选择器" class="headerlink" title="1. XPath选择器"></a>1. XPath选择器</h3><p>XPpath是标准的XML文档查询语言，可以用于查询XML文档中的节点和内容，关于XPath语法，可以参见<a href="http://www.w3school.com.cn/xpath/">这里</a></p><p>先看一个例子，通过html或xml构造Selector对象，然后通过xpath查询节点，并解析出节点的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Selector</span><br><span class="line"></span><br><span class="line">html = <span class="string">&#x27;&lt;html&gt;&lt;body&gt;&lt;span&gt;good&lt;/span&gt;&lt;span&gt;buy&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span></span><br><span class="line">sel = Selector(text=html)</span><br><span class="line">nodes = sel.xpath(<span class="string">&#x27;//span&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">    <span class="built_in">print</span>(node.extract())</span><br></pre></td></tr></table></figure><p>Selector相当于节点，通过xpath去到子节点集合（SelectorList），可以继续搜索，通过<code>extract</code>方法可以取出节点的值，<code>extract</code>方法也可以作用于SelectorList，对于SelectorList可以通过<code>extract_first</code>取出第一个节点的值</p><ul><li>通过<code>text()</code>取出节点的内容</li><li>通过<code>@href</code>去除节点属性值（这里是取出<code>href</code>属性的值）</li><li>直接对节点取值，则是输出节点的字符串</li></ul><h3 id="2-CSS选择器"><a href="#2-CSS选择器" class="headerlink" title="2. CSS选择器"></a>2. CSS选择器</h3><p>除了XPath选择器，scrapy还支持css选择器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        &lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;good&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;span&gt;buy&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;ul&gt;</span></span><br><span class="line"><span class="string">                    &lt;li class=&quot;video_part_lists&quot;&gt;aa&lt;li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li class=&quot;video_part_lists&quot;&gt;bb&lt;li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li class=&quot;audio_part_lists&quot;&gt;cc&lt;li&gt;</span></span><br><span class="line"><span class="string">                    &lt;li class=&quot;video_part_lists&quot;&gt;</span></span><br><span class="line"><span class="string">                        &lt;a href=&quot;/&quot;&gt;主页&lt;/a&gt;</span></span><br><span class="line"><span class="string">                    &lt;li&gt;</span></span><br><span class="line"><span class="string">                &lt;/ul&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">sel = Selector(text=html)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择class为video_part_lists的li节点</span></span><br><span class="line">lis = sel.css(<span class="string">&#x27;li.video_part_lists&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line">    <span class="comment"># 选择a节点的属性</span></span><br><span class="line">    <span class="built_in">print</span>(li.css(<span class="string">&#x27;a::attr(href)&#x27;</span>).extract())</span><br></pre></td></tr></table></figure><p>关于css选择器更多的规则，可以见w3c官网</p><ul><li><a href="https://www.w3.org/TR/selectors/">https://www.w3.org/TR/selectors/</a></li></ul><h2 id="五、Item类"><a href="#五、Item类" class="headerlink" title="五、Item类"></a>五、Item类</h2><p>上面我们只是爬取了网页的html文本，对于爬虫，我们需要明确我们需要爬取的结构化数据，我们定义一个item存储分类信息，scrapy的item继承自<code>scrapy.Item</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Item, Field</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DmozItem</span>(<span class="title class_ inherited__">Item</span>):</span><br><span class="line">    title = Field()</span><br><span class="line">    link = Field()</span><br><span class="line">    desc = Field()</span><br></pre></td></tr></table></figure><p><code>scrapy.Item</code>的用法与python中的字典用法基本一样，只是做了一些安全限制，属性定义使用Field，这里只是进行了声明，而不是真正的属性，使用的时候通过键值对操作，<strong>不支持属性访问</strong></p><p>what, 好坑爹，这意味着所有的属性赋值都得用字符串了，这里有解释（还是没太明白）</p><blockquote><ul><li><a href="http://stackoverflow.com/questions/14899815/why-is-scrapys-field-a-dict">why-is-scrapys-field-a-dict</a></li></ul></blockquote><p>修改DmozSpider的parse方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DmozSpider</span>(scrapy.Spider):</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">for</span> sel <span class="keyword">in</span> response.xpath(<span class="string">&#x27;//ul/li&#x27;</span>):</span><br><span class="line">            dmoz_item = DmozItem()</span><br><span class="line">            dmoz_item[<span class="string">&#x27;title&#x27;</span>] = sel.xpath(<span class="string">&#x27;a/text()&#x27;</span>).extract()</span><br><span class="line">            dmoz_item[<span class="string">&#x27;link&#x27;</span>] = sel.xpath(<span class="string">&#x27;a/@href&#x27;</span>).extract()</span><br><span class="line">            dmoz_item[<span class="string">&#x27;desc&#x27;</span>] = sel.xpath(<span class="string">&#x27;text()&#x27;</span>).extract()</span><br><span class="line">            <span class="built_in">print</span>(dmoz_item)</span><br></pre></td></tr></table></figure><h2 id="六、Pipeline"><a href="#六、Pipeline" class="headerlink" title="六、Pipeline"></a>六、Pipeline</h2><p>spider负责爬虫的配置，item负责声明结构化数据，而对于数据的处理，在scrapy中使用管道的方式进行处理，只要注册过的管道都可以处理item数据（处理，过滤，保存）</p><p>下面看看管道的声明方式，这里定义一个预处理管道<code>PretreatmentPipeline.py</code>，如果item的title为None，则设置为空字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PretreatmentPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">&#x27;title&#x27;</span>]:</span><br><span class="line">            <span class="comment"># 不让title为空</span></span><br><span class="line">            item[<span class="string">&#x27;title&#x27;</span>] = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>再定义一个过滤重复数据的管道<code>DuplicatesPipeline.py</code>，当link重复，则丢弃</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DuplicatesPipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.links = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">&#x27;link&#x27;</span>] <span class="keyword">in</span> self.links:</span><br><span class="line">            <span class="comment"># 跑出DropItem表示丢掉数据</span></span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">&quot;Duplicate item found: %s&quot;</span> % item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.links.add(item[<span class="string">&#x27;link&#x27;</span>])</span><br><span class="line">            <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><p>最后可以定义一个保存数据的管道，可以把数据保存到数据库中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"><span class="keyword">from</span> Database <span class="keyword">import</span> Database</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabasePipeline</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.db = Database</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> self.db.item_exists(item[<span class="string">&#x27;id&#x27;</span>]):</span><br><span class="line">            self.db.update_item(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.db.insert_item(item)</span><br></pre></td></tr></table></figure><p>定义好管道之后我们需要配置到爬虫上，我们在<code>settings.py</code>模块中配置，后面的数字表示管道的顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;pipelines.DuplicatesPipeline.DuplicatesPipeline&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;pipelines.PretreatmentPipeline.PretreatmentPipeline&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以为spider配置单独的pipeline</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestSpider</span>(<span class="title class_ inherited__">Spider</span>):</span><br><span class="line">    <span class="comment"># 自定义配置</span></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="comment"># item处理管道</span></span><br><span class="line">        <span class="string">&#x27;ITEM_PIPELINES&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;tutorial.pipelines.FangDetailPipeline.FangDetailPipeline&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>除了<code>process_item</code>方法外，pipeline还有<code>open_spider</code>和<code>spider_closed</code>两个方法，在爬虫启动和关闭的时候调用</p><h2 id="七、Rule"><a href="#七、Rule" class="headerlink" title="七、Rule"></a>七、Rule</h2><p>爬虫的通常需要在一个网页里面爬去其他的链接，然后一层一层往下爬，scrapy提供了LinkExtractor类用于对网页链接的提取，使用LinkExtractor需要使用<code>CrawlSpider</code>爬虫类中，<code>CrawlSpider</code>与<code>Spider</code>相比主要是多了<code>rules</code>，可以添加一些规则，先看下面这个例子，爬取链家网的链接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</span><br><span class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LianjiaSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&quot;lianjia&quot;</span></span><br><span class="line"></span><br><span class="line">    allowed_domains = [<span class="string">&quot;lianjia.com&quot;</span>]</span><br><span class="line"></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">&quot;http://bj.lianjia.com/ershoufang/&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    rules = [</span><br><span class="line">        <span class="comment"># 匹配正则表达式,处理下一页</span></span><br><span class="line">        Rule(LinkExtractor(allow=(<span class="string">r&#x27;http://bj.lianjia.com/ershoufang/pg\s+$&#x27;</span>,)), callback=<span class="string">&#x27;parse_item&#x27;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 匹配正则表达式,结果加到url列表中,设置请求预处理函数</span></span><br><span class="line">        <span class="comment"># Rule(FangLinkExtractor(allow=(&#x27;http://www.lianjia.com/client/&#x27;, )), follow=True, process_request=&#x27;add_cookie&#x27;)</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_item</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 这里与之前的parse方法一样，处理</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="1-Rule对象"><a href="#1-Rule对象" class="headerlink" title="1. Rule对象"></a>1. Rule对象</h3><p>Role对象有下面参数</p><ul><li><code>link_extractor</code>：链接提取规则</li><li><code>callback</code>：link_extractor提取的链接的请求结果的回调</li><li><code>cb_kwargs</code>：附加参数，可以在回调函数中获取到</li><li><code>follow</code>：表示提取的链接请求完成后是否还要应用当前规则（boolean），如果为<code>False</code>则不会对提取出来的网页进行进一步提取，默认为False</li><li><code>process_links</code>：处理所有的链接的回调，用于处理从response提取的links，通常用于过滤（参数为link列表）</li><li><code>process_request</code>：链接请求预处理（添加header或cookie等）</li></ul><h3 id="2-LinkExtractor"><a href="#2-LinkExtractor" class="headerlink" title="2. LinkExtractor"></a>2. LinkExtractor</h3><p>LinkExtractor常用的参数有：</p><ul><li><code>allow</code>：提取满足正则表达式的链接</li><li><code>deny</code>：排除正则表达式匹配的链接（优先级高于<code>allow</code>）</li><li><code>allow_domains</code>：允许的域名（可以是<code>str</code>或<code>list</code>）</li><li><code>deny_domains</code>：排除的域名（可以是<code>str</code>或<code>list</code>）</li><li><code>restrict_xpaths</code>：提取满足XPath选择条件的链接（可以是<code>str</code>或<code>list</code>）</li><li><code>restrict_css</code>：提取满足css选择条件的链接（可以是<code>str</code>或<code>list</code>）</li><li><code>tags</code>：提取指定标签下的链接，默认从<code>a</code>和<code>area</code>中提取（可以是<code>str</code>或<code>list</code>）</li><li><code>attrs</code>：提取满足拥有属性的链接，默认为<code>href</code>（类型为<code>list</code>）</li><li><code>unique</code>：链接是否去重（类型为<code>boolean</code>）</li><li><code>process_value</code>：值处理函数（优先级大于<code>allow</code>）</li></ul><p>关于LinkExtractor的详细参数介绍见<a href="http://doc.scrapy.org/en/latest/topics/link-extractors.html#module-scrapy.linkextractors.lxmlhtml">官网</a></p><blockquote><p>注意：如果使用rules规则，请不要覆盖或重写<code>CrawlSpider</code>的<code>parse</code>方法，否则规则会失效，可以使用<code>parse_start_urls</code>方法</p></blockquote><h2 id="八、Middleware"><a href="#八、Middleware" class="headerlink" title="八、Middleware"></a>八、Middleware</h2><p>从最开始的流程图可以看到，爬去一个资源链接的流程，首先我们配置spider相关的爬取信息，在启动爬取实例后，<code>scrapy_engine</code>从Spider取出<code>Request</code>（经过<code>SpiderMiddleware</code>），然后丢给Scheduler（经过<code>SchedulerMiddleware</code>），Scheduler接着把请求丢给Downloader（经过<code>DownloadMiddlware</code>），Downloader把请求结果丢还给Spider，然后Spider把分析好的结构化数据丢给Pipeline，Pipeline进行分析保存或丢弃，这里面有4个角色</p><p>scrapy有下面三种middlewares</p><ul><li><code>SpiderMiddleware</code>：通常用于配置爬虫相关的属性，引用链接设置，Url长度限制，成功状态码设置，爬取深度设置，爬去优先级设置等</li><li><code>DownloadMiddlware</code>：通常用于处理下载之前的预处理，如请求Header（Cookie,User-Agent），登录验证处理，重定向处理，代理服务器处理，超时处理，重试处理等</li><li><code>SchedulerMiddleware</code>（已经废弃）：为了简化框架，调度器中间件已经被废弃，使用另外两个中间件已经够用了</li></ul><h3 id="1-SpiderMiddleware"><a href="#1-SpiderMiddleware" class="headerlink" title="1. SpiderMiddleware"></a>1. SpiderMiddleware</h3><p>爬虫中间件有下面几个方法</p><ul><li><code>process_spider_input</code>：当response通过spider的时候被调用，返回None（继续给其他中间件处理）或抛出异常（不会给其他中间件处理，当成异常处理）</li><li><code>process_spider_output</code>：当spider有item或Request输出的时候调动</li><li><code>process_spider_exception</code>：处理出现异常时调用</li><li><code>process_start_requests</code>：spider当开始请求Request的时候调用</li></ul><p>下面是scrapy自带的一些中间件（在<code>scrapy.spidermiddlewares</code>命名空间下）</p><ul><li>UrlLengthMiddleware</li><li>RefererMiddleware</li><li>OffsiteMiddleware</li><li>HttpErrorMiddleware</li><li>DepthMiddleware</li></ul><p>我们自己实现一个<code>SpiderMiddleware</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TODO</span><br></pre></td></tr></table></figure><blockquote><p>参考链接：<a href="http://doc.scrapy.org/en/latest/topics/spider-middleware.html">http://doc.scrapy.org/en/latest/topics/spider-middleware.html</a></p></blockquote><h3 id="2-DownloaderMiddleware"><a href="#2-DownloaderMiddleware" class="headerlink" title="2. DownloaderMiddleware"></a>2. DownloaderMiddleware</h3><p>下载中间件有下面几个方法</p><ul><li><code>process_request</code>：请求通过下载器的时候调用</li><li><code>process_response</code>：请求完成后调用</li><li><code>process_exception</code>：请求发生异常时调用</li><li><code>from_crawler</code>：从crawler构造的时候调用</li><li><code>from_settings</code>：从settings构造的时候调用</li><li>&#96;&#96;</li></ul><blockquote><p>更多详细的参数解释见<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/topics/downloader-middleware.html#id2">这里</a></p></blockquote><p>在爬取网页的时候，使用不同的<code>User-Agent</code>可以提高请求的随机性，定义一个随机设置User-Agent的中间件<code>RandomUserAgentMiddleware</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RandomUserAgentMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Randomly rotate user agents based on a list of predefined ones&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, agents</span>):</span><br><span class="line">        self.agents = agents</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从crawler构造，USER_AGENTS定义在crawler的配置的设置中</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(crawler.settings.getlist(<span class="string">&#x27;USER_AGENTS&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从settings构造，USER_AGENTS定义在settings.py中</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_settings</span>(<span class="params">cls, settings</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(settings.getlist(<span class="string">&#x27;USER_AGENTS&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="comment"># 设置随机的User-Agent</span></span><br><span class="line">        request.headers.setdefault(<span class="string">&#x27;User-Agent&#x27;</span>, random.choice(self.agents))</span><br></pre></td></tr></table></figure><p>在<code>settings.py</code>设置USER_AGENTS参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENTS = [</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; AcooBrowser; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Acoo Browser; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0; AOL 9.5; AOLBuild 4337.35; Windows NT 5.1; .NET CLR 1.1.4322; .NET CLR 2.0.50727)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; MSIE 9.0; Windows NT 9.0; en-US)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.8) Gecko Fedora/1.9.0.8-1.fc10 Kazehakase/0.5.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.56 Safari/535.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/535.20 (KHTML, like Gecko) Chrome/19.0.1036.7 Safari/535.20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Opera/9.80 (Macintosh; Intel Mac OS X 10.6.8; U; fr) Presto/2.9.168 Version/11.52&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置爬虫中间件的方式与pipeline类似，第二个参数表示优先级</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置爬虫中间件</span></span><br><span class="line">SPIDER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;myproject.middlewares.CustomSpiderMiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">    <span class="comment"># 如果想禁用默认的中间件的话，可以设置其优先级为None</span></span><br><span class="line">    <span class="string">&#x27;scrapy.spidermiddlewares.offsite.OffsiteMiddleware&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置下载中间件</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&#x27;myproject.middlewares.RandomUserAgentMiddleware&#x27;</span>: <span class="number">543</span>,</span><br><span class="line">    <span class="string">&#x27;scrapy.contrib.downloadermiddleware.useragent.UserAgentMiddleware&#x27;</span>: <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-代理服务器"><a href="#3-代理服务器" class="headerlink" title="3. 代理服务器"></a>3. 代理服务器</h3><p>爬虫最怕的就是封ip，这时候就需要代理服务器来爬取，scrapy设置代理服务器非常简单，只需要在请求前设置<code>Request</code>对象的<code>meta</code>属性，添加<code>proxy</code>值即可，通常我们可以通过中间件来做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        proxy = <span class="string">&#x27;https://178.33.6.236:3128&#x27;</span>     <span class="comment"># 代理服务器</span></span><br><span class="line">        request.meta[<span class="string">&#x27;proxy&#x27;</span>] = proxy</span><br></pre></td></tr></table></figure><h2 id="九、缓存"><a href="#九、缓存" class="headerlink" title="九、缓存"></a>九、缓存</h2><p>scrapy默认已经自带了缓存的功能，通常我们只需要配置即可，打开<code>settings.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开缓存</span></span><br><span class="line">HTTPCACHE_ENABLED = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置缓存过期时间（单位：秒）</span></span><br><span class="line"><span class="comment">#HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存路径(默认为：.scrapy/httpcache)</span></span><br><span class="line">HTTPCACHE_DIR = <span class="string">&#x27;httpcache&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略的状态码，例如：302</span></span><br><span class="line">HTTPCACHE_IGNORE_HTTP_CODES = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 缓存模式(文件缓存)</span></span><br><span class="line">HTTPCACHE_STORAGE = <span class="string">&#x27;scrapy.extensions.httpcache.FilesystemCacheStorage&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>更多参数参见<a href="http://scrapy.readthedocs.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings">这里</a></p></blockquote><h2 id="十、多线程"><a href="#十、多线程" class="headerlink" title="十、多线程"></a>十、多线程</h2><p>scrapy网络请求是基于Twisted，而Twisted默认支持多线程，而且scrapy默认也是通过多线程请求的，并且支持多核CPU的并发，通常只需要配置一些参数即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认Item并发数：100</span></span><br><span class="line">CONCURRENT_ITEMS = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认Request并发数：16</span></span><br><span class="line">CONCURRENT_REQUESTS = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认每个域名的并发数：8</span></span><br><span class="line">CONCURRENT_REQUESTS_PER_DOMAIN = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个IP的最大并发数：0表示忽略</span></span><br><span class="line">CONCURRENT_REQUESTS_PER_IP = <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>更多参数参见<a href="https://doc.scrapy.org/en/latest/topics/settings.html#concurrent-items">这里</a></p></blockquote><h2 id="十一、常见问题"><a href="#十一、常见问题" class="headerlink" title="十一、常见问题"></a>十一、常见问题</h2><h3 id="1-项目名称问题"><a href="#1-项目名称问题" class="headerlink" title="1. 项目名称问题"></a>1. 项目名称问题</h3><p>在使用的时候遇到过一个问题，在初始化<code>scrapy startproject tutorial</code>的时候，如果使用了一些特殊的名字，如：<code>test</code>, <code>fang</code>等单词的话，通过<code>get_project_settings</code>方法获取配置的时候会出错，改成<code>tutorial</code>或一些复杂的名字的时候不会</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: No module named tutorial.settings</span><br></pre></td></tr></table></figure><p>这是一个bug，在github上有提到：<a href="https://github.com/scrapy/scrapy/issues/428">https://github.com/scrapy/scrapy/issues/428</a>，但貌似没有完全修复，修改一下名字就好了（当然<code>scrapy.cfg</code>和<code>settings.py</code>里面也需要修改）</p><h3 id="2-为每个pipeline配置spider"><a href="#2-为每个pipeline配置spider" class="headerlink" title="2. 为每个pipeline配置spider"></a>2. 为每个pipeline配置spider</h3><p>上面我们是在settings.py里面配置pipeline，这里的配置的pipeline会作用于所有的spider，我们可以为每一个spider配置不同的pipeline，设置<code>Spider</code>的<code>custom_settings</code>对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LianjiaSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># 自定义配置</span></span><br><span class="line">    custom_settings = &#123;</span><br><span class="line">        <span class="string">&#x27;ITEM_PIPELINES&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;tutorial.pipelines.TestPipeline.TestPipeline&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-获取提取链接的节点信息"><a href="#3-获取提取链接的节点信息" class="headerlink" title="3. 获取提取链接的节点信息"></a>3. 获取提取链接的节点信息</h3><p>通过LinkExtractor提取的<code>scrapy.Link</code>默认不带节点信息，有时候我们需要节点的其他attribute属性，<code>scrapy.Link</code>有个<code>text</code>属性保存从节点提取的<code>text</code>值，我们可以通过修改<code>lxmlhtml._collect_string_content</code>变量为<code>etree.tostring</code>，这样可以在提取节点值就变味渲染节点<code>scrapy.Link.text</code>，然后根据<code>scrapy.Link.text</code>属性拿到节点的html，最后提取出我们需要的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> scrapy.linkextractors.lxmlhtml</span><br><span class="line">scrapy.linkextractors.lxmlhtml._collect_string_content = etree.tostring</span><br></pre></td></tr></table></figure><h3 id="4-从数据库中读取urls"><a href="#4-从数据库中读取urls" class="headerlink" title="4. 从数据库中读取urls"></a>4. 从数据库中读取urls</h3><p>有时候我们已经把urls下载到数据库了，而不是在start_urls里配置，这时候可以重载spider的<code>start_requests</code>方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> self.db.session.query(User.link):</span><br><span class="line">        <span class="keyword">yield</span> Request(u.link)</span><br></pre></td></tr></table></figure><p>我们还可以在Request添加元数据，然后在response中访问</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">for</span> u <span class="keyword">in</span> self.db.session.query(User):</span><br><span class="line">        <span class="keyword">yield</span> Request(u.link, meta=&#123;<span class="string">&#x27;name&#x27;</span>: u.name&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="built_in">print</span>(response.url, response.meta[<span class="string">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure><h3 id="5-如何进行循环爬取"><a href="#5-如何进行循环爬取" class="headerlink" title="5. 如何进行循环爬取"></a>5. 如何进行循环爬取</h3><p>有时候我们需要爬取的一些经常更新的页面，例如：间隔时间为2s，爬去一个列表前10页的数据，从第一页开始爬，爬完成后重新回到第一页</p><p>目前的思路是，通过parse方法迭代返回Request进行增量爬取，由于scrapy默认由缓存机制，需要修改</p><h3 id="6-关于去重"><a href="#6-关于去重" class="headerlink" title="6. 关于去重"></a>6. 关于去重</h3><p>scrapy默认有自己的去重机制，默认使用<code>scrapy.dupefilters.RFPDupeFilter</code>类进行去重，主要逻辑如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> include_headers:</span><br><span class="line">    include_headers = <span class="built_in">tuple</span>(to_bytes(h.lower())</span><br><span class="line">                             <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">sorted</span>(include_headers))</span><br><span class="line">cache = _fingerprint_cache.setdefault(request, &#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> include_headers <span class="keyword">not</span> <span class="keyword">in</span> cache:</span><br><span class="line">    fp = hashlib.sha1()</span><br><span class="line">    fp.update(to_bytes(request.method))</span><br><span class="line">    fp.update(to_bytes(canonicalize_url(request.url)))</span><br><span class="line">    fp.update(request.body <span class="keyword">or</span> <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> include_headers:</span><br><span class="line">        <span class="keyword">for</span> hdr <span class="keyword">in</span> include_headers:</span><br><span class="line">            <span class="keyword">if</span> hdr <span class="keyword">in</span> request.headers:</span><br><span class="line">                fp.update(hdr)</span><br><span class="line">                <span class="keyword">for</span> v <span class="keyword">in</span> request.headers.getlist(hdr):</span><br><span class="line">                    fp.update(v)</span><br><span class="line">    cache[include_headers] = fp.hexdigest()</span><br><span class="line"><span class="keyword">return</span> cache[include_headers]</span><br></pre></td></tr></table></figure><p>默认的去重指纹是sha1(method + url + body + header)，这种方式并不能过滤很多，例如有一些请求会加上时间戳的，基本每次都会不同，这时候我们需要自定义过滤规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.dupefilter <span class="keyword">import</span> RFPDupeFilter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomURLFilter</span>(<span class="title class_ inherited__">RFPDupeFilter</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 只根据url去重&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, path=<span class="literal">None</span></span>):</span><br><span class="line">        self.urls_seen = <span class="built_in">set</span>()</span><br><span class="line">        RFPDupeFilter.__init__(self, path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">request_seen</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">if</span> request.url <span class="keyword">in</span> self.urls_seen:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.urls_seen.add(request.url)</span><br></pre></td></tr></table></figure><p>配置setting</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DUPEFILTER_CLASS = <span class="string">&#x27;tutorial.custom_filters.CustomURLFilter&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="7-如何在Pipeline中处理不同的Item"><a href="#7-如何在Pipeline中处理不同的Item" class="headerlink" title="7. 如何在Pipeline中处理不同的Item"></a>7. 如何在Pipeline中处理不同的Item</h3><p>scrapy所有的迭代出来的的Item都会经过所有的Pipeline，如果需要处理不同的Item，只能通过<code>isinstance()</code>方法进行类型判断，然后分别进行处理，暂时没有更好的方案</p><h3 id="8-url按顺序执行"><a href="#8-url按顺序执行" class="headerlink" title="8. url按顺序执行"></a>8. url按顺序执行</h3><p>我们可以通过Request的priority控制url的请求的执行顺序，但由于网络请求的不确定性，不能保证返回也是按照顺序进行的，如果需要进行逐个url请求的话，吧url列表放在meta对象里面，在response的时候迭代返回下一个Request对象到调度器，达到顺序执行的目的，暂时没有更好的方案</p><h2 id="十二、总结"><a href="#十二、总结" class="headerlink" title="十二、总结"></a>十二、总结</h2><p>scrapy虽然是最有名的python爬虫框架，但是还是有很多不足，例如，item不能单独配置给制定的pipeline，每一个爬取的所有item都会走遍所有的管道，需要在管道里面去判断不同类型的item，如果在pipelines和items比较多的项目，将会让项目变得非常臃肿</p><p>如有问题欢迎到<a href="http://blog.bomobox.org/2016-09-11/scrapy-start/">我的博客</a>留言</p><h2 id="十三、参考链接"><a href="#十三、参考链接" class="headerlink" title="十三、参考链接"></a>十三、参考链接</h2><ul><li><a href="http://doc.scrapy.org/en/latest/index.html">官方文档</a></li><li><a href="https://scrapy-chs.readthedocs.org/zh_CN/0.24/intro/tutorial.html">中文教程</a></li><li><a href="https://segmentfault.com/a/1190000000533969">scrapy五大模块</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlalchemy学习笔记</title>
      <link href="/2016-09-11/sqlalchemy-start/"/>
      <url>/2016-09-11/sqlalchemy-start/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.sqlalchemy.org/">SQLAlchemy</a>是python的一个数据库ORM工具，提供了强大的对象模型间的转换，可以满足绝大多数数据库操作的需求，并且支持多种数据库引擎（sqlite，mysql，postgres, mongodb等），在这里记录基本用法和学习笔记</p><span id="more"></span><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>通过pip安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install SQLAlchemy</span><br></pre></td></tr></table></figure><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p>首先是连接到数据库，SQLALchemy支持多个数据库引擎，不同的数据库引擎连接字符串不一样，常用的有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql://username:password@hostname/database</span><br><span class="line">postgresql://username:password@hostname/database</span><br><span class="line">sqlite:////absolute/path/to/database</span><br><span class="line">sqlite:///c:/absolute/path/to/database</span><br></pre></td></tr></table></figure><p>更多连接字符串的介绍参见<a href="http://docs.sqlalchemy.org/en/latest/core/engines.html?highlight=create_engine#database-urls">这里</a></p><p>下面是连接和使用sqlite数据库的例子</p><h3 id="1-connection"><a href="#1-connection" class="headerlink" title="1. connection"></a>1. connection</h3><p>使用传统的connection的方式连接和操作数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接字符串</span></span><br><span class="line">DB_CONNECT_STRING = <span class="string">&#x27;sqlite:///:memory:&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库引擎,echo为True,会打印所有的sql语句</span></span><br><span class="line">engine = create_engine(DB_CONNECT_STRING, echo=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个connection，这里的使用方式与python自带的sqlite的使用方式类似</span></span><br><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> con:</span><br><span class="line">    <span class="comment"># 执行sql语句，如果是增删改，则直接生效，不需要commit</span></span><br><span class="line">    rs = con.execute(<span class="string">&#x27;SELECT 5&#x27;</span>)</span><br><span class="line">    data = rs.fetchone()[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Data: %s&quot;</span> % data</span><br></pre></td></tr></table></figure><p>与python自带的sqlite不同，这里不需要Cursor光标，执行sql语句不需要commit</p><h3 id="2-connection事务"><a href="#2-connection事务" class="headerlink" title="2. connection事务"></a>2. connection事务</h3><p>使用事务可以进行批量提交和回滚</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接字符串</span></span><br><span class="line">DB_CONNECT_STRING = <span class="string">&#x27;sqlite:////Users/zhengxiankai/Desktop/Document/db.sqlite&#x27;</span></span><br><span class="line">engine = create_engine(DB_CONNECT_STRING, echo=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> engine.connect() <span class="keyword">as</span> connection:</span><br><span class="line">    trans = connection.begin()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r1 = connection.execute(<span class="string">&quot;select * from User&quot;</span>)</span><br><span class="line">        r2 = connection.execute(<span class="string">&quot;insert into User(name, age) values(?, ?)&quot;</span>, <span class="string">&#x27;bomo&#x27;</span>, <span class="number">24</span>)</span><br><span class="line">        trans.commit()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        trans.rollback()</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><h3 id="3-session"><a href="#3-session" class="headerlink" title="3. session"></a>3. session</h3><p>connection是一般使用数据库的方式，sqlalchemy还提供了另一种操作数据库的方式，通过session对象，session可以记录和跟踪数据的改变，在适当的时候提交，并且支持强大的ORM的功能，下面是基本使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库连接字符串</span></span><br><span class="line">DB_CONNECT_STRING = <span class="string">&#x27;sqlite:////Users/zhengxiankai/Desktop/Document/db.sqlite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库引擎,echo为True,会打印所有的sql语句</span></span><br><span class="line">engine = create_engine(DB_CONNECT_STRING, echo=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话类</span></span><br><span class="line">DB_Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话对象</span></span><br><span class="line">session = DB_Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># dosomething with session</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用完记得关闭，也可以用with</span></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><p>上面创建了一个session对象，接下来可以操作数据库了，session也支持通过sql语句操作数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session.execute(<span class="string">&#x27;select * from User&#x27;</span>)</span><br><span class="line">session.execute(<span class="string">&quot;insert into User(name, age) values(&#x27;bomo&#x27;, 13)&quot;</span>)</span><br><span class="line">session.execute(<span class="string">&quot;insert into User(name, age) values(:name, :age)&quot;</span>, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bomo&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">12</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是增删改，需要commit</span></span><br><span class="line">session.commit()</span><br></pre></td></tr></table></figure><blockquote><p>注意参数使用dict，并在sql语句中使用<code>:key</code>占位</p></blockquote><h3 id="4-ORM"><a href="#4-ORM" class="headerlink" title="4. ORM"></a>4. ORM</h3><p>上面简单介绍了sql的简单用法，既然是ORM框架，我们先定义两个模型类<code>User</code>和<code>Role</code>，sqlalchemy的模型类继承自一个由<code>declarative_base()</code>方法生成的类，我们先定义一个模块<code>Models.py</code>生成Base类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br></pre></td></tr></table></figure><p><code>User.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> Models <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;User&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(<span class="string">&#x27;id&#x27;</span>, Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(<span class="string">&#x27;name&#x27;</span>, String(<span class="number">50</span>))</span><br><span class="line">    age = Column(<span class="string">&#x27;age&#x27;</span>, Integer)</span><br></pre></td></tr></table></figure><p><code>Role.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> Models <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;Role&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(<span class="string">&#x27;id&#x27;</span>, Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(<span class="string">&#x27;name&#x27;</span>, String(<span class="number">50</span>))</span><br></pre></td></tr></table></figure><p>从上面很容易看出来，这里的模型对应数据库中的表，模型支持的类型有<code>Integer</code>, <code>String</code>, <code>Boolean</code>, <code>Date</code>, <code>DateTime</code>, <code>Float</code>，更多类型包括类型对应的Python的类型参见：<a href="http://docs.sqlalchemy.org/en/latest/core/type_basics.html?highlight=column%20type#generic-types">这里</a></p><p>Column构造函数相关设置</p><ul><li>name：名称</li><li>type_：列类型</li><li>autoincrement：自增</li><li>default：默认值</li><li>index：索引</li><li>nullable：可空</li><li>primary_key：外键</li></ul><p>更多介绍参见<a href="http://docs.sqlalchemy.org/en/latest/core/metadata.html?highlight=column%20autoincrement#sqlalchemy.schema.Column.__init__">这里</a></p><p>接下来通过session进行增删改查</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> User <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> Role <span class="keyword">import</span> Role</span><br><span class="line"><span class="keyword">from</span> Models <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line">DB_CONNECT_STRING = <span class="string">&#x27;sqlite:////Users/zhengxiankai/Desktop/Document/db.sqlite&#x27;</span></span><br><span class="line">engine = create_engine(DB_CONNECT_STRING, echo=<span class="literal">True</span>)</span><br><span class="line">DB_Session = sessionmaker(bind=engine)</span><br><span class="line">session = DB_Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建表（如果表已经存在，则不会创建）</span></span><br><span class="line">Base.metadata.create_all(engine)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 插入数据</span></span><br><span class="line">u = User(name = <span class="string">&#x27;tobi&#x27;</span>, age = <span class="number">200</span>)</span><br><span class="line">r = Role(name = <span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1 使用add，如果已经存在，会报错</span></span><br><span class="line">session.add(u)</span><br><span class="line">session.add(r)</span><br><span class="line">session.commit()</span><br><span class="line"><span class="built_in">print</span> r.<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3 修改数据</span></span><br><span class="line"><span class="comment"># 3.1 使用merge方法，如果存在则修改，如果不存在则插入（只判断主键，不判断unique列）</span></span><br><span class="line">r.name = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">session.merge(r)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2 也可以通过这种方式修改</span></span><br><span class="line">session.query(Role).<span class="built_in">filter</span>(Role.<span class="built_in">id</span> == <span class="number">1</span>).update(&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;admin&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 删除数据</span></span><br><span class="line">session.query(Role).<span class="built_in">filter</span>(Role.<span class="built_in">id</span> == <span class="number">1</span>).delete()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 查询数据</span></span><br><span class="line"><span class="comment"># 5.1 返回结果集的第二项</span></span><br><span class="line">user = session.query(User).get(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.2 返回结果集中的第2-3项</span></span><br><span class="line">users = session.query(User)[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.3 查询条件</span></span><br><span class="line">user = session.query(User).<span class="built_in">filter</span>(User.<span class="built_in">id</span> &lt; <span class="number">6</span>).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.4 排序</span></span><br><span class="line">users = session.query(User).order_by(User.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.5 降序（需要导入desc方法）</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> desc</span><br><span class="line">users = session.query(User).order_by(desc(User.name))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.6 只查询部分属性</span></span><br><span class="line">users = session.query(User.name).order_by(desc(User.name))</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">    <span class="built_in">print</span> user.name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.7 给结果集的列取别名</span></span><br><span class="line">users = session.query(User.name.label(<span class="string">&#x27;user_name&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">    <span class="built_in">print</span> user.user_name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.8 去重查询（需要导入distinct方法）</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> distinct</span><br><span class="line">users = session.query(distinct(User.name).label(<span class="string">&#x27;name&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.9 统计查询</span></span><br><span class="line">user_count = session.query(User.name).order_by(User.name).count()</span><br><span class="line">age_avg = session.query(func.avg(User.age)).first()</span><br><span class="line">age_sum = session.query(func.<span class="built_in">sum</span>(User.age)).first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.10 分组查询</span></span><br><span class="line">users = session.query(func.count(User.name).label(<span class="string">&#x27;count&#x27;</span>), User.age).group_by(User.age)</span><br><span class="line"><span class="keyword">for</span> user <span class="keyword">in</span> users:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;age:&#123;0&#125;, count:&#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(user.age, user.count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.1 exists查询(不存在则为~exists())</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql <span class="keyword">import</span> exists</span><br><span class="line">session.query(User.name).<span class="built_in">filter</span>(~exists().where(User.role_id == Role.<span class="built_in">id</span>))</span><br><span class="line"><span class="comment"># SELECT name AS users_name FROM users WHERE NOT EXISTS (SELECT * FROM roles WHERE users.role_id = roles.id)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.2 除了exists，any也可以表示EXISTS</span></span><br><span class="line">session.query(Role).<span class="built_in">filter</span>(Role.users.<span class="built_in">any</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7 random</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.sql.functions <span class="keyword">import</span> random</span><br><span class="line">user = session.query(User).order_by(random()).first()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session.close()</span><br></pre></td></tr></table></figure><p>参考链接：</p><ul><li><a href="http://docs.sqlalchemy.org/en/latest/orm/internals.html?highlight=any#sqlalchemy.orm.properties.RelationshipProperty.Comparator.any">any</a></li></ul><h3 id="5-多表关系"><a href="#5-多表关系" class="headerlink" title="5. 多表关系"></a>5. 多表关系</h3><p>上面的所有操作都是基于单个表的操作，下面是多表以及关系的使用，我们修改上面两个表，添加外键关联（一对多和多对一）</p><p>User模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> ForeignKey</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship</span><br><span class="line"><span class="keyword">from</span> Models <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(<span class="string">&#x27;id&#x27;</span>, Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(<span class="string">&#x27;name&#x27;</span>, String(<span class="number">50</span>))</span><br><span class="line">    age = Column(<span class="string">&#x27;age&#x27;</span>, Integer)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加角色id外键(关联到Role表的id属性)</span></span><br><span class="line">    role_id = Column(<span class="string">&#x27;role_id&#x27;</span>, Integer, ForeignKey(<span class="string">&#x27;roles.id&#x27;</span>))</span><br><span class="line">    <span class="comment"># 添加同表外键</span></span><br><span class="line">    second_role_id = Column(<span class="string">&#x27;second_role_id&#x27;</span>, Integer, ForeignKey(<span class="string">&#x27;roles.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加关系属性，关联到role_id外键上</span></span><br><span class="line">    role = relationship(<span class="string">&#x27;Role&#x27;</span>, foreign_keys=<span class="string">&#x27;User.role_id&#x27;</span>, backref=<span class="string">&#x27;User_role_id&#x27;</span>)</span><br><span class="line">    <span class="comment"># 添加关系属性，关联到second_role_id外键上</span></span><br><span class="line">    second_role = relationship(<span class="string">&#x27;Role&#x27;</span>, foreign_keys=<span class="string">&#x27;User.second_role_id&#x27;</span>, backref=<span class="string">&#x27;User_second_role_id&#x27;</span>)</span><br></pre></td></tr></table></figure><p>Role模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> relationship</span><br><span class="line"><span class="keyword">from</span> Models <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;roles&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = Column(<span class="string">&#x27;id&#x27;</span>, Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(<span class="string">&#x27;name&#x27;</span>, String(<span class="number">50</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加关系属性，关联到User.role_id属性上</span></span><br><span class="line">    users = relationship(<span class="string">&quot;User&quot;</span>, foreign_keys=<span class="string">&#x27;User.role_id&#x27;</span>, backref=<span class="string">&quot;Role_users&quot;</span>)</span><br><span class="line">    <span class="comment"># 添加关系属性，关联到User.second_role_id属性上</span></span><br><span class="line">    second_users = relationship(<span class="string">&quot;User&quot;</span>, foreign_keys=<span class="string">&#x27;User.second_role_id&#x27;</span>, backref=<span class="string">&quot;Role_second_users&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>这里有一点需要注意的是，设置外键的时候<code>ForeignKey(&#39;roles.id&#39;)</code>这里面使用的是表名和表列，在设置关联属性的时候<code>relationship(&#39;Role&#39;, foreign_keys=&#39;User.role_id&#39;, backref=&#39;User_role_id&#39;)</code>，这里的<code>foreign_keys</code>使用的时候类名和属性名</p></blockquote><p>接下来就可以使用了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">u = User(name=<span class="string">&#x27;tobi&#x27;</span>, age=<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">r1 = Role(name=<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">r2 = Role(name=<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line"></span><br><span class="line">u.role = r1</span><br><span class="line">u.second_role = r2</span><br><span class="line"></span><br><span class="line">session.add(u)</span><br><span class="line">session.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询（对于外键关联的关系属性可以直接访问，在需要用到的时候session会到数据库查询）</span></span><br><span class="line">roles = session.query(Role).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">for</span> role <span class="keyword">in</span> roles:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;role:&#123;0&#125; users&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> role.users:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;\t&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(user.name)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;role:&#123;0&#125; second_users&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> role.second_users:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;\t&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(user.name)</span><br></pre></td></tr></table></figure><p>上面表示的是一对多（多对一）的关系，还有一对一，多对多，如果要表示一对一的关系，在定义relationship的时候设置<code>uselist</code>为False（默认为True），如在Role中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    ...</span><br><span class="line">    user = relationship(<span class="string">&quot;User&quot;</span>, uselist=<span class="literal">False</span>, foreign_keys=<span class="string">&#x27;User.role_id&#x27;</span>, backref=<span class="string">&quot;Role_user&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6-多表查询"><a href="#6-多表查询" class="headerlink" title="6. 多表查询"></a>6. 多表查询</h3><p>多表查询通常使用<code>join</code>进行表连接，第一个参数为表名，第二个参数为条件，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">users = db.session.query(User).join(Role, Role.<span class="built_in">id</span> == User.role_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> users:</span><br><span class="line">    <span class="built_in">print</span> u.name</span><br></pre></td></tr></table></figure><p><code>join</code>为内连接，还有左连接<code>outerjoin</code>，用法与join类似，右连接和全外链接在<code>1.0</code>版本上不支持，通常来说有这两个结合查询的方法基本够用了，<code>1.1</code>版本貌似添加了右连接和全外连接的支持，但是目前只是预览版</p><p>还可以直接查询多个表，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">result = db.session.query(User, Role).<span class="built_in">filter</span>(User.role_id = Role.<span class="built_in">id</span>)</span><br><span class="line"><span class="comment"># 这里选择的是两个表，使用元组获取数据</span></span><br><span class="line"><span class="keyword">for</span> u, r <span class="keyword">in</span> result:</span><br><span class="line">      <span class="built_in">print</span> u.name</span><br></pre></td></tr></table></figure><h2 id="三、数据库迁移"><a href="#三、数据库迁移" class="headerlink" title="三、数据库迁移"></a>三、数据库迁移</h2><p>sqlalchemy的数据库迁移&#x2F;升级有两个库支持<a href="http://alembic.zzzcomputing.com/en/latest/">alembic</a>和<a href="https://sqlalchemy-migrate.readthedocs.io/en/latest/">sqlalchemy-migrate</a></p><p>由于sqlalchemy-migrate在2011年发布了0.7.2版本后，就已经停止更新了，并且已经不维护了，也积累了很多bug，而alembic是较后来才出现，而且是sqlalchemy的作者开发的，有良好的社区支持，所以在这里只学习alembic这个库</p><p>alembic实现了类似git&#x2F;svn的版本管理的控制，我们可以通过alembic维护每次升级数据库的版本</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>通过<code>pip</code>安装，pip会自动安装相关的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install alembic</span><br></pre></td></tr></table></figure><h3 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2. 初始化"></a>2. 初始化</h3><p>安装完成后再项目根目录运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ alembic init YOUR_ALEMBIC_DIR</span><br></pre></td></tr></table></figure><p>alembic会在根目录创建<code>YOUR_ALEMBIC_DIR</code>目录和<code>alembic.ini</code>文件，如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yourproject/</span><br><span class="line">    alembic.ini</span><br><span class="line">    YOUR_ALEMBIC_DIR/</span><br><span class="line">        env.py</span><br><span class="line">        README</span><br><span class="line">        script.py.mako</span><br><span class="line">        versions/</span><br><span class="line">            3512b954651e_add_account.py</span><br><span class="line">            2b1ae634e5cd_add_order_id.py</span><br><span class="line">            3adcc9a56557_rename_username_field.py</span><br></pre></td></tr></table></figure><p>其中</p><ul><li><code>alembic.ini</code> 提供了一些基本的配置</li><li><code>env.py</code> 每次执行Alembic都会加载这个模块，主要提供项目Sqlalchemy Model 的连接</li><li><code>script.py.mako</code> 迁移脚本生成模版</li><li><code>versions</code> 存放生成的迁移脚本目录</li></ul><p>默认情况下创建的是基于单个数据库的，如果需要支持多个数据库或其他，可以通过<code>alembic list_templates</code>查看支持的模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ alembic list_templates</span><br><span class="line">Available templates:</span><br><span class="line"></span><br><span class="line">generic - Generic single-database configuration.</span><br><span class="line">multidb - Rudimentary multi-database configuration.</span><br><span class="line">pylons - Configuration that reads from a Pylons project environment.</span><br><span class="line"></span><br><span class="line">Templates are used via the <span class="string">&#x27;init&#x27;</span> <span class="built_in">command</span>, e.g.:</span><br><span class="line"></span><br><span class="line">  alembic init --template generic ./scripts</span><br></pre></td></tr></table></figure><h3 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h3><p>使用之前，需要配置一下链接字符串，打开<code>alembic.ini</code>文件，设置<code>sqlalchemy.url</code>连接字符串，例如</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sqlalchemy.url</span> = sqlite:////Users/zhengxiankai/Desktop/database.db</span><br></pre></td></tr></table></figure><p>其他参数可以参见官网说明：<a href="http://alembic.zzzcomputing.com/en/latest/tutorial.html">http://alembic.zzzcomputing.com/en/latest/tutorial.html</a></p><h3 id="4-创建数据库版本"><a href="#4-创建数据库版本" class="headerlink" title="4. 创建数据库版本"></a>4. 创建数据库版本</h3><p>接下来我们创建一个数据库版本，并新建两个表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ alembic revision -m <span class="string">&#x27;create table&#x27;</span></span><br></pre></td></tr></table></figure><p>创建一个版本（会在<code>yourproject/YOUR_ALEMBIC_DIR/versions/</code>文件夹中创建一个python文件<code>1a8a0d799b33_create_table.py</code>）</p><p>该python模块包含<code>upgrade</code>和<code>downgrade</code>两个方法，在这里添加一些新增表的逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;create table</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Revision ID: 4fd533a56b34</span></span><br><span class="line"><span class="string">Revises:</span></span><br><span class="line"><span class="string">Create Date: 2016-09-18 17:20:27.667100</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> alembic <span class="keyword">import</span> op</span><br><span class="line"><span class="keyword">import</span> sqlalchemy <span class="keyword">as</span> sa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># revision identifiers, used by Alembic.</span></span><br><span class="line">revision = <span class="string">&#x27;4fd533a56b34&#x27;</span></span><br><span class="line">down_revision = <span class="literal">None</span></span><br><span class="line">branch_labels = <span class="literal">None</span></span><br><span class="line">depends_on = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upgrade</span>():</span><br><span class="line">    <span class="comment"># 添加表</span></span><br><span class="line">    op.create_table(</span><br><span class="line">        <span class="string">&#x27;account&#x27;</span>,</span><br><span class="line">        sa.Column(<span class="string">&#x27;id&#x27;</span>, sa.Integer, primary_key=<span class="literal">True</span>),</span><br><span class="line">        sa.Column(<span class="string">&#x27;name&#x27;</span>, sa.String(<span class="number">50</span>), nullable=<span class="literal">False</span>),</span><br><span class="line">        sa.Column(<span class="string">&#x27;description&#x27;</span>, sa.Unicode(<span class="number">200</span>)),</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加列</span></span><br><span class="line">    <span class="comment"># op.add_column(&#x27;account&#x27;, sa.Column(&#x27;last_transaction_date&#x27;, sa.DateTime))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downgrade</span>():</span><br><span class="line">    <span class="comment"># 删除表</span></span><br><span class="line">    op.drop_table(<span class="string">&#x27;account&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 删除列</span></span><br><span class="line">    <span class="comment"># op.drop_column(&#x27;account&#x27;, &#x27;last_transaction_date&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里使用到了了op对象，关于op对象的更多API使用，参见<a href="http://alembic.zzzcomputing.com/en/latest/ops.html#ops">这里</a></p><p>这里生成的文件名是依照在<code>alembic.ini</code>文件声明的模板来的，默认为版本号+名字，可以加上一些日期信息，否则不好排序，更多参数参见<a href="http://alembic.zzzcomputing.com/en/latest/tutorial.html?highlight=file_template">这里</a></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">file_template</span> = %%(year)d_%%(month).<span class="number">2</span>d_%%(day).<span class="number">2</span>d_%%(hour).<span class="number">2</span>d_%%(minute).<span class="number">2</span>d_%%(rev)s_%%(slug)s</span><br></pre></td></tr></table></figure><p>另外通常我们也改一下生成模板<code>script.py.mako</code>，加上编码信息，否则在升级脚本中如果有中文会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br></pre></td></tr></table></figure><h3 id="5-升级数据库"><a href="#5-升级数据库" class="headerlink" title="5. 升级数据库"></a>5. 升级数据库</h3><p>刚刚实现了升级和降级的方法，通过下面命令升级数据库到最新版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ alembic upgrade <span class="built_in">head</span></span><br></pre></td></tr></table></figure><p>这时候可以看到数据库多了两个表<code>alembic_version</code>和<code>account</code>，<code>alembic_version</code>存放数据库版本</p><p>关于升级和降级的其他命令还有下面这些</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升到最高版本</span></span><br><span class="line">$ alembic upgrade <span class="built_in">head</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 降到最初版本</span></span><br><span class="line">$ alembic downgrade base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升两级</span></span><br><span class="line">$ alembic upgrade +2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 降一级</span></span><br><span class="line">$ alembic downgrade -1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级到制定版本</span></span><br><span class="line">$ alembic upgrade e93b8d488143</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前版本</span></span><br><span class="line">$ alembic current</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史版本详情</span></span><br><span class="line">$ alembic <span class="built_in">history</span> --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看历史版本（-r参数）类似切片</span></span><br><span class="line">$ alembic <span class="built_in">history</span> -r1975ea:ae1027</span><br><span class="line">$ alembic <span class="built_in">history</span> -r-3:current</span><br><span class="line">$ alembic <span class="built_in">history</span> -r1975ea:</span><br></pre></td></tr></table></figure><h3 id="6-通过元数据升级数据库"><a href="#6-通过元数据升级数据库" class="headerlink" title="6. 通过元数据升级数据库"></a>6. 通过元数据升级数据库</h3><p>上面我们是通过API升级和降级，我们也可以直接通过元数据更新数据库，也就是自动生成升级代码，先定义两个Model（<code>User</code>, <code>Role</code>），这里我定义成三个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yourproject/</span><br><span class="line">    YOUR_ALEMBIC_DIR/</span><br><span class="line">    tutorial/Db</span><br><span class="line">        Models.py</span><br><span class="line">        User.py</span><br><span class="line">        Role.py</span><br></pre></td></tr></table></figure><p>代码就放在一起了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(<span class="string">&#x27;id&#x27;</span>, Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(<span class="string">&#x27;name&#x27;</span>, String)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;roles&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">id</span> = Column(<span class="string">&#x27;id&#x27;</span>, Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(<span class="string">&#x27;name&#x27;</span>, String)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>YOUR_ALEMBIC_DIR/env.py</code>配置元数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target_metadata = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里需要添加相对路径到sys.path，否则会引用失败，尝试过使用相对路径，但各种不好使，还是使用这种方法靠谱些</span></span><br><span class="line">sys.path.append(os.path.abspath(os.path.join(os.getcwd(), <span class="string">&quot;../yourproject/tutorial/Db&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> User <span class="keyword">import</span> User</span><br><span class="line"><span class="keyword">from</span> Role <span class="keyword">import</span> Role</span><br><span class="line"><span class="keyword">from</span> Models <span class="keyword">import</span> Base</span><br><span class="line">target_metadata = Base.metadata</span><br></pre></td></tr></table></figure><blockquote><p><code>os.path.join(os.getcwd()</code>这个获取到的地址不是env.py的路径，而是根目录</p></blockquote><p>在创建数据库版本的时候添加<code>--autogenerate</code>参数，就会从Base.metadata元数据中生成脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ alembic revision --autogenerate -m <span class="string">&quot;add user table&quot;</span></span><br></pre></td></tr></table></figure><p>这时候会在生成升级代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;add user table</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Revision ID: 97de1533584a</span></span><br><span class="line"><span class="string">Revises: 8678ab6d48c1</span></span><br><span class="line"><span class="string">Create Date: 2016-09-19 21:58:00.758410</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> alembic <span class="keyword">import</span> op</span><br><span class="line"><span class="keyword">import</span> sqlalchemy <span class="keyword">as</span> sa</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># revision identifiers, used by Alembic.</span></span><br><span class="line">revision = <span class="string">&#x27;97de1533584a&#x27;</span></span><br><span class="line">down_revision = <span class="string">&#x27;8678ab6d48c1&#x27;</span></span><br><span class="line">branch_labels = <span class="literal">None</span></span><br><span class="line">depends_on = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upgrade</span>():</span><br><span class="line">    <span class="comment">### commands auto generated by Alembic - please adjust! ###</span></span><br><span class="line">    op.create_table(<span class="string">&#x27;roles&#x27;</span>,</span><br><span class="line">    sa.Column(<span class="string">&#x27;id&#x27;</span>, sa.Integer(), nullable=<span class="literal">False</span>),</span><br><span class="line">    sa.Column(<span class="string">&#x27;name&#x27;</span>, sa.String(), nullable=<span class="literal">True</span>),</span><br><span class="line">    sa.PrimaryKeyConstraint(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    op.create_table(<span class="string">&#x27;users&#x27;</span>,</span><br><span class="line">    sa.Column(<span class="string">&#x27;id&#x27;</span>, sa.Integer(), nullable=<span class="literal">False</span>),</span><br><span class="line">    sa.Column(<span class="string">&#x27;name&#x27;</span>, sa.String(), nullable=<span class="literal">True</span>),</span><br><span class="line">    sa.PrimaryKeyConstraint(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    op.drop_table(<span class="string">&#x27;account&#x27;</span>)</span><br><span class="line">    <span class="comment">### end Alembic commands ###</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">downgrade</span>():</span><br><span class="line">    <span class="comment">### commands auto generated by Alembic - please adjust! ###</span></span><br><span class="line">    op.create_table(<span class="string">&#x27;account&#x27;</span>,</span><br><span class="line">    sa.Column(<span class="string">&#x27;id&#x27;</span>, sa.INTEGER(), nullable=<span class="literal">False</span>),</span><br><span class="line">    sa.Column(<span class="string">&#x27;name&#x27;</span>, sa.VARCHAR(length=<span class="number">50</span>), nullable=<span class="literal">False</span>),</span><br><span class="line">    sa.Column(<span class="string">&#x27;description&#x27;</span>, sa.VARCHAR(length=<span class="number">200</span>), nullable=<span class="literal">True</span>),</span><br><span class="line">    sa.Column(<span class="string">&#x27;last_transaction_date&#x27;</span>, sa.DATETIME(), nullable=<span class="literal">True</span>),</span><br><span class="line">    sa.PrimaryKeyConstraint(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">    op.drop_table(<span class="string">&#x27;users&#x27;</span>)</span><br><span class="line">    op.drop_table(<span class="string">&#x27;roles&#x27;</span>)</span><br><span class="line">    <span class="comment">### end Alembic commands ###</span></span><br></pre></td></tr></table></figure><p>由于我没有定义account模型，会被识别为删除，如果删除了model的列的声明，则会被识别为删除列，自动生成的版本我们也可以自己修改，然后执行升级命令即可升级<code>alembic upgrade head</code></p><p><strong>需要注意的是</strong></p><ol><li><code>Base.metadata</code>声明的类必须以数据库中的一一对应，如果数据库中有的表，而在元数据中没有，会识别成删除表</li><li>revision创建版本之前执行之前需要升级到最新版本</li><li>配置Base之前，需要保证所有的Model都已经执行（即导入）过一次了，否则无法读取到，也就是需要把所有Model都import进来</li></ol><blockquote><p>数据库升级有风险，升级前最好先检查一遍<code>upgrade</code>函数，可以的话做好备份哈</p></blockquote><h2 id="四、常见问题"><a href="#四、常见问题" class="headerlink" title="四、常见问题"></a>四、常见问题</h2><h3 id="1-String长度问题"><a href="#1-String长度问题" class="headerlink" title="1. String长度问题"></a>1. String长度问题</h3><p>如果使用mysql数据库，String类型对应的是VARCHAR类型，需要指定长度，否则会报下面错误，而在sqlite不会出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">in</span> table <span class="string">&#x27;user&#x27;</span>, column <span class="string">&#x27;name&#x27;</span>): VARCHAR requires a length on dialect mysql</span><br></pre></td></tr></table></figure><p>TODO：如有问题欢迎留言</p><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ul><li><a href="http://alembic.zzzcomputing.com/en/latest/autogenerate.html">Auto Generating Migrations</a></li><li><a href="http://alembic.zzzcomputing.com/en/latest/tutorial.html">tutorial</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm添加jinja2模板引擎的识别</title>
      <link href="/2016-09-03/pycharm-jinja2/"/>
      <url>/2016-09-03/pycharm-jinja2/</url>
      
        <content type="html"><![CDATA[<p>默认情况下，通过Pycharm新建项目时，有个flask选项，新建完成后，是可以支持jinja模板的识别的，例如跳转，语法高亮等功能，但是如果是自己新建的目录，然后用Pycharm导入的，这个时候html文件里面的模板代码无法被高亮，也无法跳转</p><span id="more"></span><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-9-3/21068155.jpg"></p><p>本身pycharm是支持jinja模板引擎的，只需要在配置文件加上配置即可，打开工程目录<code>/.idea/xxx.iml</code>文件，其中xxx为项目名称（即外层目录名），在module节点下添加TemplatesService，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">&quot;TemplatesService&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;TEMPLATE_CONFIGURATION&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Jinja2&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">&quot;TEMPLATE_FOLDERS&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;$MODULE_DIR$/hello/templates&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于我的代码在hello目录下，所以在TemplateFolder路径需要加上，否则会找不到文件，修改完保存即可生效</p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-9-3/58402206.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pycharm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu crontab定时任务</title>
      <link href="/2016-09-01/ubuntu-crontab/"/>
      <url>/2016-09-01/ubuntu-crontab/</url>
      
        <content type="html"><![CDATA[<p>最近在写一个爬虫，需要每天爬取一定量的数据，在自己机器做就太麻烦了，如果能放在服务器上自动跑就好了，找了一下linux系统有个<code>crontab</code>的工具可以用来设置定时任务，这里简单记录一下使用方法</p><span id="more"></span><h2 id="一、定义任务"><a href="#一、定义任务" class="headerlink" title="一、定义任务"></a>一、定义任务</h2><p>这里定义个python脚本（<code>daily_task.py</code>），假设需要每天凌晨12点执行一次</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_something</span>():</span><br><span class="line">  <span class="built_in">print</span> <span class="string">&#x27;daily task by crontab!&#x27;</span></span><br><span class="line"></span><br><span class="line">do_something()</span><br></pre></td></tr></table></figure><p>假设文件存放在：<code>/home/ubuntu/daily_task.py</code></p><h2 id="二、创建任务"><a href="#二、创建任务" class="headerlink" title="二、创建任务"></a>二、创建任务</h2><p>通过<code>crontab -e</code>配置任务，如果有多个编辑器的话，会让你选择一个编辑器</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>crontab -e</span><br></pre></td></tr></table></figure><p>输入格式：<code>分 时 日 月 年 脚本</code><br>第1列分钟：1～59<br>第2列小时：1～23（0表示子夜）<br>第3列日：1～31<br>第4列月：1～12<br>第5列星期：0～6（0表示星期天）<br>第6列脚本</p><h3 id="1-表示单个具体时间"><a href="#1-表示单个具体时间" class="headerlink" title="1. 表示单个具体时间"></a>1. 表示单个具体时间</h3><p>每天7点30分执行daily_task.py脚本</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">30 </span><span class="number">7</span> * * * python /home/ubuntu/daily_task.py</span><br></pre></td></tr></table></figure><h3 id="2-表示多个时间（通过都好隔开）"><a href="#2-表示多个时间（通过都好隔开）" class="headerlink" title="2. 表示多个时间（通过都好隔开）"></a>2. 表示多个时间（通过都好隔开）</h3><p>表示每月1、10、22日的4:45重启apache。</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">45 </span><span class="number">4</span> <span class="number">1</span>,<span class="number">10</span>,<span class="number">22</span> * * /<span class="keyword">usr</span>/local/apache/bin/apachectl restart</span><br></pre></td></tr></table></figure><h3 id="3-表示时间间隔"><a href="#3-表示时间间隔" class="headerlink" title="3. 表示时间间隔"></a>3. 表示时间间隔</h3><p>每一小时重启apache</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* *<span class="regexp">/1 * * * /u</span>sr<span class="regexp">/local/</span>apache<span class="regexp">/bin/</span>apachectl restart</span><br></pre></td></tr></table></figure><h3 id="4-表示时间范围"><a href="#4-表示时间范围" class="headerlink" title="4. 表示时间范围"></a>4. 表示时间范围</h3><p>晚上11点到早上7点之间，每隔一小时重启apache</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* <span class="number">23</span>-<span class="number">7</span><span class="regexp">/1 * * * /u</span>sr<span class="regexp">/local/</span>apache<span class="regexp">/bin/</span>apachectl restart</span><br></pre></td></tr></table></figure><h3 id="5-通过字母表示星期"><a href="#5-通过字母表示星期" class="headerlink" title="5. 通过字母表示星期"></a>5. 通过字母表示星期</h3><p>每月的4号与每周一到周三的11点重启apache</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">11</span> <span class="number">4</span> * mon-wed /<span class="keyword">usr</span>/local/apache/bin/apachectl restart</span><br></pre></td></tr></table></figure><h3 id="6-通过字母表示月份"><a href="#6-通过字母表示月份" class="headerlink" title="6. 通过字母表示月份"></a>6. 通过字母表示月份</h3><p>1月1号的4点重启apache</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">4</span> <span class="number">1</span> jan * /<span class="keyword">usr</span>/local/apache/bin/apachectl restart</span><br></pre></td></tr></table></figure><p>编辑完成后，退出保存，并保存cront文件</p><h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>我们创建一个简单的任务，没两分钟执行一次</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*<span class="regexp">/2 * * * * python /</span>home<span class="regexp">/ubuntu/</span>python<span class="regexp">/daily_task.py &gt;&gt; /</span>home<span class="regexp">/ubuntu/</span>python/crontest.py.log</span><br></pre></td></tr></table></figure><p>可以在该文件中配置多个任务，编辑完成后，我们查看一下cron的状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service cron status</span><br><span class="line">cron start/running, process 29899</span><br></pre></td></tr></table></figure><p>如果没有启动，我们重启一下cron服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service cron restart</span><br><span class="line">cron stop/waiting</span><br><span class="line">cron start/running, process 29899</span><br></pre></td></tr></table></figure><p>可以通过&#96;&#96;命令查看当前的配置（也就是刚刚配置的文件）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l</span><br></pre></td></tr></table></figure><p>可以吧刚刚配置的文件保存到自定义的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab -l &gt; /home/ubuntu/python/mycron.config</span><br></pre></td></tr></table></figure><p>如果已经有了配置文件，可以设置文件路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ crontab &lt; /home/ubuntu/python/mycron.config</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object-C注释</title>
      <link href="/2016-08-26/objc-annotation/"/>
      <url>/2016-08-26/objc-annotation/</url>
      
        <content type="html"><![CDATA[<p>与其他语言一样，Object-C的注释也分为两种，一种是普通注释，一种是文档注释，普通注释通常给阅读代码的人看，而文档注释除了可以给阅读的文件的人看还可以被appledoc识别，在使用的时候xcode能给出智能提示，有些工具还可以把文档注释生成文档</p><span id="more"></span><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/445476-20150917114303758-1998047181.png"></p><h2 id="一、简单注释"><a href="#一、简单注释" class="headerlink" title="一、简单注释"></a>一、简单注释</h2><ol><li>单行注释<br>  单行注释不能被文档识别，通常用于函数内部  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//学生信息</span></span><br></pre></td></tr></table></figure></li><li>多行注释<br>  可以被工具识别  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *　多行注释内容1</span></span><br><span class="line"><span class="comment"> *　多行注释内容2</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二、文档注释（appledoc可识别成文档）"><a href="#二、文档注释（appledoc可识别成文档）" class="headerlink" title="二、文档注释（appledoc可识别成文档）"></a>二、文档注释（appledoc可识别成文档）</h2><ol><li>单行注释  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">///名字</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="comment">///年龄</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</span><br><span class="line"><span class="comment">///校园卡Id</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *schoolId;</span><br><span class="line"><span class="comment">///年纪</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *grade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li></ol><p>  如果安装了<a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocument</a>，当输入<code>///</code>的时候回自动生成多行注释，通常我们通过<code>/** 注释内容 */</code>进行注释<br>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 名字 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="comment">/** 年龄 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</span><br><span class="line"><span class="comment">/** 校园卡Id */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *schoolId;</span><br><span class="line"><span class="comment">/** 年纪 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *grade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>多行注释</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 简要描述.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 详细描述或其他.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p>行尾注释<br>有时候一些简短的注释可以可以用行尾注释来减少代码的行数，通常用在枚举变量的注释上</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Student</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;         <span class="comment">/**&lt; 名字 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;        <span class="comment">/**&lt; 年龄 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *schoolId;     <span class="comment">/**&lt; 校园卡Id */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *grade;        <span class="comment">/**&lt; 年纪 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></li><li><p>函数注释<br>  函数注释也属于多行注释，通常我们使用 <a href="https://github.com/onevcat/VVDocumenter-Xcode">VVDocument</a> 插件辅助</p></li></ol>  <figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  获取状态描述</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @param state 状态值</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  @return 返回状态描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)getState:(<span class="built_in">NSInteger</span>)state</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;待确认&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;确认&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@&quot;驳回&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>上面介绍了objc中所有的注释样式，在实际开发中，我们应该多使用文档注释，使用文档注释可以获得xcode的智能提示，在用appledoc生成文档的时候也可以被识别</p><h2 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h2><ul><li><a href="http://www.cnblogs.com/zyl910/archive/2013/06/07/objcdoc.html">http://www.cnblogs.com/zyl910/archive/2013/06/07/objcdoc.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtualenv学习笔记</title>
      <link href="/2016-07-28/virtualenv-start/"/>
      <url>/2016-07-28/virtualenv-start/</url>
      
        <content type="html"><![CDATA[<p><code>virtualenv</code>是python的一个第三方模块，用来配置独立的python环境，特别是在服务器端需要进行版本控制时使用，有些第三方库向前或向后兼容性很差，这时候可用针对不同的版本配置不同的python环境更为方便</p><span id="more"></span><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>可以直接通过pip安装，也可以自行下载源码编译安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install virtualenv</span><br></pre></td></tr></table></figure><p>安装完后需要连接到执行命令目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">ln</span> -s /usr/local/lib/python2.7.12/bin/virtualenv /usr/bin/virtualenv</span><br></pre></td></tr></table></figure><p>在终端使用<code>virtualenv -h</code>查看帮助</p><h2 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h2><p>我们可以使用<code>virtualenv</code>创建一个独立的python环境，默认也会包含pip, easy_install, wheel等工具：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv envname  <span class="comment"># 创建一个新的隔离环境，会安装Installing setuptools, pip, wheel...done.</span></span><br><span class="line">$ <span class="built_in">cd</span> envname</span><br></pre></td></tr></table></figure><h3 id="1-常见命令参数"><a href="#1-常见命令参数" class="headerlink" title="1. 常见命令参数"></a>1. 常见命令参数</h3><ul><li><code>--system-site-packages</code>: 使用系统的全局的python库</li><li><code>--no-site-packages</code>: 不使用系统的全局的python库（默认）(废弃)</li><li><code>--download</code>: 从网上下载包预安装的包</li><li><code>--no-download</code>: 使用本地包，不从网上下载，如果不存在会报错</li></ul><p>更多参数见官网说明：<a href="https://virtualenv.pypa.io/en/stable/reference/#cmdoption--system-site-packages">https://virtualenv.pypa.io/en/stable/reference/#cmdoption--system-site-packages</a></p><h3 id="2-我们查看一下有哪些文件"><a href="#2-我们查看一下有哪些文件" class="headerlink" title="2. 我们查看一下有哪些文件"></a>2. 我们查看一下有哪些文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">bin  include  lib  pip-selfcheck.json</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> bin</span><br><span class="line">activate       activate_this.py  pip     python     python-config</span><br><span class="line">activate.csh   easy_install      pip2    python2    wheel</span><br><span class="line">activate.fish  easy_install-2.7  pip2.7  python2.7</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> include</span><br><span class="line">python2.7</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">ls</span> lib</span><br><span class="line">python2.7</span><br></pre></td></tr></table></figure><p>文件与python安装目录下的文件类似，即独立环境所使用的package和一些可执行程序</p><h3 id="3-激活并进入虚拟环境"><a href="#3-激活并进入虚拟环境" class="headerlink" title="3. 激活并进入虚拟环境"></a>3. 激活并进入虚拟环境</h3><p>使用下面命令激活当前的环境（这里用的是mac），之后使用的python环境就是刚创建的虚拟环境，命令行前面会带虚拟环境的名字：<code>(envname)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> bin/activate</span><br><span class="line">(envname) localhost:envname zhengxiankai$</span><br></pre></td></tr></table></figure><p>我们通过which查看一下当前环境下的python执行文件的路径，我们发现当前的环境变成了刚刚激活的路径，而不是系统的python路径了，而使用pip安装的路径包也会在这个环境的路径下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(envname) localhost:envname zhengxiankai$ <span class="built_in">which</span> python</span><br><span class="line">/home/ubuntu/envname/bin/python</span><br></pre></td></tr></table></figure><p>进入python交互解释器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(envname) localhost:envname zhengxiankai$ python</span><br><span class="line">Python 2.7.12 (default, Jul 28 2016, 07:03:11)</span><br><span class="line">[GCC 4.8.4] on linux2</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>查看搜索路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import sys</span><br><span class="line">&gt;&gt;&gt; sys.path</span><br><span class="line">[<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;/home/ubuntu/envname/lib/python27.zip&#x27;</span>, <span class="string">&#x27;/home/ubuntu/envname/lib/python2.7&#x27;</span>, <span class="string">&#x27;/home/ubuntu/envname/lib/python2.7/plat-linux2&#x27;</span>, <span class="string">&#x27;/home/ubuntu/envname/lib/python2.7/lib-tk&#x27;</span>, <span class="string">&#x27;/home/ubuntu/envname/lib/python2.7/lib-old&#x27;</span>, <span class="string">&#x27;/home/ubuntu/envname/lib/python2.7/lib-dynload&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7.12/lib/python2.7&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7.12/lib/python2.7/plat-linux2&#x27;</span>, <span class="string">&#x27;/usr/local/lib/python2.7.12/lib/python2.7/lib-tk&#x27;</span>, <span class="string">&#x27;/home/ubuntu/envname/lib/python2.7/site-packages&#x27;</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h3 id="4-退出虚拟环境"><a href="#4-退出虚拟环境" class="headerlink" title="4. 退出虚拟环境"></a>4. 退出虚拟环境</h3><p>使用完成之后通过<code>deactivate</code>命令退出虚拟环境，前面的虚拟环境名<code>(envname)</code>没有了，说明退出了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(envname) localhost:envname zhengxiankai$ deactivate</span><br><span class="line">localhost:envname zhengxiankai$</span><br></pre></td></tr></table></figure><h2 id="三、批量安装package"><a href="#三、批量安装package" class="headerlink" title="三、批量安装package"></a>三、批量安装package</h2><p>pip工具支持批量安装package，只需要把需要的包按照格式写在文件中，就可以自动安装，同时也支持导出，下面是从当前环境（envname）导出所有安装的包的配置到<code>requirements.txt</code>文件中</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip <span class="keyword">freeze</span> &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>批量安装<code>requirements.txt</code>文件中的所有包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>这样在切换环境的时候安装依赖包就很方便了，不需要一个一个安装了</p><h2 id="四、与Pycharm结合"><a href="#四、与Pycharm结合" class="headerlink" title="四、与Pycharm结合"></a>四、与Pycharm结合</h2><p>Pycharm是python最常用的开发工具，当然也提供了virtualenv的支持，到设置里面的<code>Project Interpreter</code>添加本地已经存在的虚拟环境，也可以直接创建，然后应用到工程即可<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/001.png"></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>virtualenv可以创建python的独立环境，可以包含一整套python的环境（除了外部依赖，如mysql等），特别是在服务器部署时可以连同环境一块部署，不需要为每一台服务器安装所有的库，而在多人开发过程中，为了保证环境的一致，也可以把独立环境也通过git维护，这样可以保证所有人的环境一致，而不用在所有的机器上配置</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> virtualenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装mysql和python</title>
      <link href="/2016-07-28/ubuntu-install-mysql-python/"/>
      <url>/2016-07-28/ubuntu-install-mysql-python/</url>
      
        <content type="html"><![CDATA[<p>前几天弄了一年免费亚马逊VPS服务器，这里记录一下配置python的环境和安装一些常用的工具</p><span id="more"></span><h2 id="升级apt-get源"><a href="#升级apt-get源" class="headerlink" title="升级apt-get源"></a>升级apt-get源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="升级python"><a href="#升级python" class="headerlink" title="升级python"></a>升级python</h2><p>先看一下ubuntu自带的python的版本<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/56975859.jpg"><br>也可以通过<code>python --version</code>查看版本<br>自带的python版本为<code>2.7.6</code>，我们手动升级一下</p><p>升级前可能需要安装<code>gcc</code>, <code>make</code>, <code>zlib</code>, <code>ssl</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先更新一下源</span></span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install gcc</span><br><span class="line">$ sudo apt-get install make</span><br><span class="line">$ sudo apt-get install zlibc zlib1g-dev</span><br><span class="line">$ sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure><p>升级python（安装到<code>/usr/local/lib/python2.7.12</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载最新版</span></span><br><span class="line">$ wget https://www.python.org/ftp/python/2.7.12/Python-2.7.12.tgz</span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">$ tar zxvf Python-2.7.12.tgz</span><br><span class="line"><span class="comment"># 进入目录</span></span><br><span class="line">$ <span class="built_in">cd</span> Python-2.7.12/</span><br><span class="line"><span class="comment"># 配置，注意带zlib，否则zlib要自己独立安装</span></span><br><span class="line">$ sudo ./configure --prefix=/usr/local/lib/python2.7.12 --with-zlib-dir=/usr/local/lib</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">$ make</span><br><span class="line"><span class="comment"># 执行安装</span></span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><p>linux中安装程序基本上是<code>./configure</code>-&gt;<code>make</code>-&gt;<code>make install</code>三部曲，安装后的文件存放在<code>/usr/local/bin/python2.7.12</code>，需要链接到执行文件，安装完后发现python还是原来的版本，通过<code>which</code>命令看一下python的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">which</span> python</span><br><span class="line">/usr/bin/python</span><br></pre></td></tr></table></figure><p>进入<code>/usr/bin/</code>目录我们修改一下python文件换成我们新的python执行文件，在终端输入<code>python2.7.9</code>可以进入刚安装的版本，但是太麻烦了，这个时候改一下默认版本（有些版本安装后会自动改）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  //对系统默认版本python进行操作，改名</span></span><br><span class="line">$ sudo <span class="built_in">mv</span> /usr/bin/python /usr/bin/python_old</span><br><span class="line">$ sudo <span class="built_in">ln</span> -s /usr/local/lib/python2.7.12/bin/python /usr/bin/python</span><br></pre></td></tr></table></figure><p>到这里，我们就完成了python的升级，python安装在<code>/usr/local/lib/python2.7.12</code>目录下，python命令指向新的路径<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/66165983.jpg"></p><h2 id="安装pip和easy-install"><a href="#安装pip和easy-install" class="headerlink" title="安装pip和easy_install"></a>安装pip和easy_install</h2><p><code>easy_install</code>和<code>pip</code>是python最常用的两个包管理工具，通过源码编译安装时，并不会没有带这两个工具（windows和mac通过安装包安装时会自动安装pip和easy_install）<br>安装<a href="">easy_install</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://pypi.python.org/packages/1b/4f/e52b81c47396668deb139b628f4ebb499b3cd39fc05382851fa985d0b642/setuptools-24.3.0.tar.gz<span class="comment">#md5=55d77ca2b1f783a71e330b0878da29ec</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar zxvf setuptools-24.3.0.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> setuptools-24.3.0</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python setup.py build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo python setup.py install</span></span><br></pre></td></tr></table></figure><p>安装pip</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://pypi.python.org/packages/e7/a8/7556133689add8d1a54c0b14aeff0acb03c64707ce100ecd53934da1aa13/pip-8.1.2.tar.gz<span class="comment">#md5=87083c0b9867963b29f7aba3613e8f4a</span></span><br><span class="line">$ tar zxvf pip-8.1.2.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> pip-8.1.2</span><br><span class="line">$ sudo python setup.py install</span><br></pre></td></tr></table></figure><p>默认安装在<code>/usr/local/lib/python2.7.12/bin</code></p><p>这个时候不能直接用<code>easy_install</code>和<code>pip</code>命令，我们创建一下链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo <span class="built_in">ln</span> -s /usr/local/lib/python2.7.12/bin/easy_install /usr/bin/easy_install</span><br><span class="line">$ sudo <span class="built_in">ln</span> -s /usr/local/lib/python2.7.12/bin/pip /usr/bin/pip</span><br></pre></td></tr></table></figure><p>如果系统已经有了pip和easy_install，我们需要改成新版本的pip和easy_install，通过which查看当前的路径，处理方法与python一样</p><p>删除原来的pip程序并链接新的pip程序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip</span></span><br><span class="line">$ sudo <span class="built_in">mv</span> /usr/bin/pip /usr/bin/pip_old</span><br><span class="line">$ sudo <span class="built_in">ln</span> -s /usr/local/python2.7.12/bin/pip /usr/bin/pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># easy_install</span></span><br><span class="line">$ sudo <span class="built_in">mv</span> /usr/bin/easy_install /usr/bin/easy_install_old</span><br><span class="line">$ sudo <span class="built_in">ln</span> -s /usr/local/lib/python2.7.12/bin/easy_install /usr/bin/easy_install</span><br></pre></td></tr></table></figure><h2 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install virtualenv</span><br></pre></td></tr></table></figure><h2 id="安装flask"><a href="#安装flask" class="headerlink" title="安装flask"></a>安装flask</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flask依赖ssl库，需要先安装下面两个工具</span></span><br><span class="line">$ sudo apt-<span class="built_in">get</span> install openssl</span><br><span class="line">$ sudo apt-<span class="built_in">get</span> install libssl-dev</span><br><span class="line"></span><br><span class="line">$ sudo pip install flask</span><br></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><p>使用下面命令检查是否安装过，如果没有任何输出，说明没有安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo netstat -tap | grep mysql</span><br></pre></td></tr></table></figure><p>安装<code>mysql-server</code>, <code>mysql-client</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install mysql-server mysql-client</span><br><span class="line">$ sudo apt-get install libmysqlclient-dev</span><br></pre></td></tr></table></figure><p>安装过程会让你输入<code>root</code>用户的密码，输入后按<code>Tap</code>键下一步<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/17932531.jpg"></p><p>安装完成，测试是否成功安装（成功）<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/41329824.jpg"></p><p>登陆看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mysql -u root -p</span><br></pre></td></tr></table></figure><p>然后输入密码，ok<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/96881626.jpg"></p><p>创建数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS TestDb DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/44504183.jpg"></p><p>查看所有数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| TestDb             |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><p>使用数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use TestDb</span><br><span class="line">Database changed</span><br></pre></td></tr></table></figure><h2 id="安装MySQL-python库"><a href="#安装MySQL-python库" class="headerlink" title="安装MySQL-python库"></a>安装MySQL-python库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install MySQL-python</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line">conn = MySQLdb.connect(host=<span class="string">&quot;127.0.0.1&quot;</span>, user=<span class="string">&quot;root&quot;</span>, passwd=<span class="string">&quot;111111&quot;</span>, db=<span class="string">&quot;PaiPaiDai&quot;</span>, charset=<span class="string">&quot;utf8&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>如果没有安装<code>libmysqlclient-dev</code>，安装过程中可能会出现下面错误</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sh: 1: mysql_config: not found</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;/tmp/pip-build-IMiD72/MySQL-python/setup.py&quot;</span>, line 17, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    metadata, options = get_config()</span><br><span class="line">  File <span class="string">&quot;/tmp/pip-build-IMiD72/MySQL-python/setup_posix.py&quot;</span>, line 43, <span class="keyword">in</span> get_config</span><br><span class="line">    libs = mysql_config(<span class="string">&quot;libs_r&quot;</span>)</span><br><span class="line">  File <span class="string">&quot;/tmp/pip-build-IMiD72/MySQL-python/setup_posix.py&quot;</span>, line 25, <span class="keyword">in</span> mysql_config</span><br><span class="line">    raise EnvironmentError(<span class="string">&quot;%s not found&quot;</span> % (mysql_config.path,))</span><br><span class="line">EnvironmentError: mysql_config not found</span><br></pre></td></tr></table></figure><h2 id="安装lxml"><a href="#安装lxml" class="headerlink" title="安装lxml"></a>安装lxml</h2><p>安装前需要先安装几个依赖包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install libxml2 libxml2-dev</span><br><span class="line">$ sudo apt-get install libxslt1-dev</span><br><span class="line">$ sudo apt-get install python-libxml2</span><br></pre></td></tr></table></figure><p>安装lxml（安装可能需要几分钟）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install lxml</span><br></pre></td></tr></table></figure><p>参考：<a href="http://lxml.de/installation.html">http://lxml.de/installation.html</a></p><h2 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h2><p>安装scrapy前需要安装依赖<code>Twisted</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://pypi.python.org/packages/c0/7c/c1e5b61e30b7ffc96576d2a922615c8068e6996a622be813fc626cef07aa/Twisted-16.3.0.tar.bz2<span class="comment">#md5=e044af844623e9fbcbe29f578db6053a</span></span><br><span class="line">$ tar xjf Twisted-16.3.0.tar.bz2</span><br><span class="line">$ <span class="built_in">cd</span> Twisted-16.3.0</span><br><span class="line">$ sudo python setup.py install</span><br></pre></td></tr></table></figure><p>安装完成后再安装scrapy</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install scrapy</span><br></pre></td></tr></table></figure><p>入门教程：<a href="https://scrapy-chs.readthedocs.io/zh_CN/0.24/intro/tutorial.html">https://scrapy-chs.readthedocs.io/zh_CN&#x2F;0.24&#x2F;intro&#x2F;tutorial.html</a></p><h2 id="安装requests库"><a href="#安装requests库" class="headerlink" title="安装requests库"></a>安装requests库</h2><p>让你从痛苦的<code>urllib</code>中解脱</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install requests</span><br></pre></td></tr></table></figure><p>详细介绍：<a href="http://cn.python-requests.org/zh_CN/latest/">http://cn.python-requests.org/zh_CN&#x2F;latest&#x2F;</a></p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加Nginx库到apt-get source中</span></span><br><span class="line">$ sudo add-apt-repository ppa:nginx/stable</span><br><span class="line"><span class="comment"># 更新apt源</span></span><br><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br><span class="line"><span class="comment"># 安装nginx</span></span><br><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/nginx start</span><br><span class="line">start: Job is already running: nginx</span><br></pre></td></tr></table></figure><p>启动后可以通过ip可以正常访问<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-11-1/68380067.jpg" alt="nginx"></p><h2 id="ubuntu使用技巧"><a href="#ubuntu使用技巧" class="headerlink" title="ubuntu使用技巧"></a>ubuntu使用技巧</h2><h3 id="1-vim退出不保存"><a href="#1-vim退出不保存" class="headerlink" title="1. vim退出不保存"></a>1. vim退出不保存</h3><p>有时候使用vim编辑系统文件的时候，由于没有权限无法保存，又无法退出，只用<code>:q!</code>可以不保存退出</p><h3 id="2-开启crontab日志"><a href="#2-开启crontab日志" class="headerlink" title="2. 开启crontab日志"></a>2. 开启crontab日志</h3><p>默认定时任务crontab是不开启日志的，需要修改<code>/etc/rsyslog.d/50-default.conf</code>并将下面一行的前面的注释<code>#</code>去掉（编辑的时候需要<code>sudo</code>权限）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cron.*                          /var/log/cron.log</span><br></pre></td></tr></table></figure><p>然后重启<code>rsyslog</code>和<code>cron</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service rsyslog restart;</span><br><span class="line">$ service cron restart;</span><br></pre></td></tr></table></figure><!-- ##pip install MySQL-pythonpip install Flaskpip install uwsgi使用apt-get安装Nginx的话，我们需要添加Nginx库到apt-get source中sudo add-apt-repository ppa:nginx/stable升级已有的包，确保系统上有uWSGI所需的编译器和工具：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br><span class="line">$ sudo apt-get install build-essential python python-dev</span><br></pre></td></tr></table></figure><p>安装Yum<br>$ sudo apt-get yum<br>$ yum -y install vixie-cron –&gt;</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>亚马逊VPS免费一年试用</title>
      <link href="/2016-07-18/amazon-aws-start/"/>
      <url>/2016-07-18/amazon-aws-start/</url>
      
        <content type="html"><![CDATA[<p>一直想整个服务器玩玩，又苦于没时间没钱，最近看到亚马逊VPS服务器有免费一年的使用时间，于是整了一个，在这里记录申请和配置的过程</p><span id="more"></span><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><p>需要用到VISA信用卡或者Master信用卡，钱的问题比较敏感，添加信用卡只是当预授权做验证用，会扣除<code>$1</code>，有个心理准备</p><h2 id="二、开始"><a href="#二、开始" class="headerlink" title="二、开始"></a>二、开始</h2><ol><li>到<a href="https://aws.amazon.com/cn">亚马逊</a>注册账号</li><li>按步骤填写，中间需要使用到信用卡，会扣除$1的手续费，在使用过程中需要注意，有很多服务是收费的，并且绑定信用卡后不会每次都询问你确认就直接扣除了（呵呵），操作的时候要小心，我使用完就直接到<a href="https://www.amazon.com/gp/wallet">账户中心</a>把信用卡删除了</li><li>到<a href="https://console.aws.amazon.com/ec2/">https://console.aws.amazon.com/ec2/</a>创建实例，选择linux Ubuntu服务器（有部分服务器是要钱的）有两种版本HVM和PV，PV运行效率高一些，linux选择PV（半虚拟）就可以了，区别见<a href="http://stackoverflow.com/questions/22130214/amazon-ec2-ubuntupv-or-ubuntuhvm"></a></li></ol><p>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/83846668.jpg" alt="启动实例"></p><p>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/7930100.jpg" alt="选择Ubuntu Server LTS (PV)"></p><p>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/83423717.jpg" alt="设置存储大小"></p><p>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/78094703.jpg" alt="选择实例类型"></p><p>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/59379720.jpg" alt="审核"></p><p>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/83309431.jpg" alt="启动"></p><ol start="4"><li>一直下一步走，会有提示免费的选项，选择免费的就行，在最后会让你创建秘钥，输入名字创建，并且下载到本地<code>xxx.pem</code>（<strong>只有一次下载机会</strong>）然后完成<br>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/72114717.jpg" alt="秘钥文件"></li><li>到<a href="https://console.aws.amazon.com/ec2/">https://console.aws.amazon.com/ec2/</a>查看正在运行的实例，这个时候应该只有一个，可以看到实例的公网ip，等信息<br>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/57044390.jpg"></li><li>这个时候需要用秘钥与服务器配对连接</li></ol><ul><li>进入终端修改秘钥文件的权限：chmod 400 xxx.pem</li><li>默认用户为<code>ubuntu</code>，连接公网服务器：ssh -i xxx.pem ubuntu@[公网ip]（如：ssh -i “ABC.pem” <a href="mailto:&#117;&#x62;&#x75;&#x6e;&#116;&#117;&#64;&#x35;&#50;&#x2e;&#x33;&#x39;&#46;&#49;&#x36;&#x38;&#x2e;&#50;&#51;&#x35;">&#117;&#x62;&#x75;&#x6e;&#116;&#117;&#64;&#x35;&#50;&#x2e;&#x33;&#x39;&#46;&#49;&#x36;&#x38;&#x2e;&#50;&#51;&#x35;</a>），以后也是通过这个连接的</li><li>ok，连接成功</li><li>接下来就可以对服务器进行操作了<br>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-7-28/4340751.jpg"></li></ul><p>  如果是windows下默认不支持<code>ssh</code>登陆，需要安装<code>PuTTY</code>，详情参见<a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/putty.html?icmpid=docs_ec2_console">这里</a></p><h2 id="三、固定IP"><a href="#三、固定IP" class="headerlink" title="三、固定IP"></a>三、固定IP</h2><p>默认情况下，服务器每次重启的的时候，IP可能会更变，我们在后台控制面板申请一个新的公网地址<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-9-3/22826182.jpg"></p><p>然后绑定到实例上，因为我这里已经绑定了，所以是解除关联<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-9-3/8236634.jpg"></p><p>这样在每次重启的的时候ip就不会变了</p><h2 id="四、设置安全组"><a href="#四、设置安全组" class="headerlink" title="四、设置安全组"></a>四、设置安全组</h2><p>默认情况下服务器只能通过ssh访问，如果我们配置了web服务器，默认情况下是不能通过ip访问的，需要在安全组中添加入站规则，在后台找到实例对应的安全组<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-9-3/50658203.jpg"></p><p>找到添加入站规则（如：http）<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-9-3/24114515.jpg"><br>这样就可以通过http访问了，下面我们安装nginx测试一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:nginx/stable</span><br><span class="line">$ sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br><span class="line">$ sudo apt-get install nginx</span><br></pre></td></tr></table></figure><p>启动nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo /etc/init.d/nginx start</span><br><span class="line">start: Job is already running: nginx</span><br></pre></td></tr></table></figure><p>这个时候我们就可以通过ip访问了<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-9-3/55317071.jpg"></p><h2 id="五、绑定域名"><a href="#五、绑定域名" class="headerlink" title="五、绑定域名"></a>五、绑定域名</h2><p>有了固定ip绑定域名就很简单了，在dns域名解析服务器(如<a href="https://www.dnspod.cn/">dnspod</a>)添加一个A记录即可<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-9-3/17503114.jpg"><br>接下来就可以用域名访问了（可能有延迟）</p><h2 id="六、iTerm快捷连接"><a href="#六、iTerm快捷连接" class="headerlink" title="六、iTerm快捷连接"></a>六、iTerm快捷连接</h2><p>iTerm基本上是Mac上必备的终端工具，功能比自带的终端强大的多，这里使用其中一个技巧来实现快速连接和登录服务器，打开iTerm配置（Cmd+,）添加Profile</p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-9-6/79653608.jpg"></p><p>添加完后，通过快捷键（Cmd+o）打开profile列表，然后选择就可以自动打开新窗口执行了，特别方便</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift构造器总结</title>
      <link href="/2016-07-07/swift-constructor/"/>
      <url>/2016-07-07/swift-constructor/</url>
      
        <content type="html"><![CDATA[<p>swift构造器的语法和规则比其他语言复杂，有很多限制和检查，刚开始学的时候经常搞懵，在这里做一个简单的总结</p><span id="more"></span><h2 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h2><p>构造器与函数类似，但不是函数，构造器无返回值，使用方式与函数类似，名称为<code>init</code>，可以带参数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> gender: <span class="type">Int</span>?</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个无参数的构造器</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个带参数的构造器</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造器的作用是保证所有的成员（变量&#x2F;常量）初始化完成，所有常量被赋值，所有非<code>Optional</code>变量都要进行赋值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>                <span class="comment">// 非Optional类型变量，必须初始化</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span>?                   <span class="comment">// Optional类型变量，可以不显式初始化</span></span><br><span class="line">    <span class="keyword">let</span> idNumber: <span class="type">String</span>            <span class="comment">// 非Optional类型常量，必须初始化</span></span><br><span class="line">    <span class="keyword">let</span> gender: <span class="type">Int</span>?                <span class="comment">// Optional类型常量，必须初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个无参数的构造器</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        idNumber <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        gender <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个带参数的构造器</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        idNumber <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        gender <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、便利构造器"><a href="#二、便利构造器" class="headerlink" title="二、便利构造器"></a>二、便利构造器</h2><p>上面我们看到的构造器，都是指定构造器（designated），指定构造器必须保证所有的成员都完成初始化了，我们可以对初始化话方法做一些方便的扩展，并且可以重用原指定构构造器的逻辑，这时候可以定义便利构造器（convenience），定义便利构造器使用<code>convenience init()</code>，如上面Person类的例子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>                <span class="comment">// 非Optional类型变量，必须初始化</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span>?                   <span class="comment">// Optional类型变量，可以不显式初始化</span></span><br><span class="line">    <span class="keyword">let</span> idNumber: <span class="type">String</span>            <span class="comment">// 非Optional类型常量，必须初始化</span></span><br><span class="line">    <span class="keyword">let</span> gender: <span class="type">Int</span>?                <span class="comment">// Optional类型常量，必须初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个无参数的构造器</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        idNumber <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        gender <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义便利构造器</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()                 <span class="comment">// 调用指定构造器</span></span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>便利构造器不能被子类继承，子类不能通过<code>super</code>调用，如果希望便利构造器被子类继承，可以使用<code>required</code>声明子类必须重写该方法</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>                <span class="comment">// 非Optional类型变量，必须初始化</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span>?                   <span class="comment">// Optional类型变量，可以不显式初始化</span></span><br><span class="line">    <span class="keyword">let</span> idNumber: <span class="type">String</span>            <span class="comment">// 非Optional类型常量，必须初始化</span></span><br><span class="line">    <span class="keyword">let</span> gender: <span class="type">Int</span>?                <span class="comment">// Optional类型常量，必须初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个无参数的构造器</span></span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        idNumber <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        gender <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个带参数的构造器</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>()</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> classNo: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>便利构造器只能调用当前类的指定构造器，不能调用父类的指定构造器，类不能只有便利构造器，便利构造器是<strong>横向</strong>调用（当前类）而指定构造器是<strong>纵向</strong>调用的（父类）</p><blockquote><p>开始使用<code>convenience</code>声明便利构造器感觉有点奇葩，因为编译器是可以识别到构造器是否调用了其他指定构造器（designated）的，也就是说可以，却还需要我们自己声明，当然自己声明可以方便我们区分构造器，以便更直观的看出指定构造器和便利构造器，这样可以很快的分辨是否可以被子类使用</p></blockquote><h2 id="三、可失败构造器（Failable-initializer）"><a href="#三、可失败构造器（Failable-initializer）" class="headerlink" title="三、可失败构造器（Failable initializer）"></a>三、可失败构造器（Failable initializer）</h2><p>除了普通的构造器，swift还允许构造失败，如当我们传入一些不恰当的参数导致类构造出现一些异常的情况，这时候我们可以让构造器返回nil，说明构造失败，声明方式为<code>init?()</code>，在需要的地方<code>return nil</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> gender: <span class="type">Int</span></span><br><span class="line">    <span class="comment">// 定义一个无参数的构造器</span></span><br><span class="line">    <span class="keyword">init?</span>(<span class="params">name</span>: <span class="type">String</span>, <span class="params">gender</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">        <span class="keyword">if</span> gender <span class="operator">!=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> gender <span class="operator">!=</span> <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>      <span class="comment">// 失败的地方返回nil即可</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.gender <span class="operator">=</span> gender</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person <span class="operator">=</span> <span class="type">Person</span>(name: <span class="string">&quot;bomo&quot;</span>, gender: <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> p <span class="operator">=</span> person &#123;</span><br><span class="line">    <span class="built_in">print</span>(p.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可失败构造这名字太难听了，我更喜欢叫为可空构造器，返回是一个<code>Optional</code>类型，使用的时候需要先取值</p><h2 id="四、必须构造器"><a href="#四、必须构造器" class="headerlink" title="四、必须构造器"></a>四、必须构造器</h2><p>类可以定义<code>required</code>构造器，当子类继承父类是，必须实现<code>required</code>构造器，当然，如果子类不实现任何构造器时，也可以不实现<code>required</code>构造器</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>: <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;       <span class="comment">//子类必须实现</span></span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: <span class="string">&quot;bomo&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son2</span>: <span class="title class_">Parent</span> &#123;      <span class="comment">// 如果子类不实现任何构造器，则不可以不实现required</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、闭包初始化属性"><a href="#五、闭包初始化属性" class="headerlink" title="五、闭包初始化属性"></a>五、闭包初始化属性</h2><p>出行的初始化可以通过构造器设置，也可以在声明的时候直接设置，swift还支持通过执行闭包函数初始化属性</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> someProperty: <span class="type">SomeType</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="comment">// 这里不能使用类相关的属性，因为在这里类还没有初始化完成</span></span><br><span class="line">        <span class="keyword">return</span> someValue</span><br><span class="line">    &#125;()   <span class="comment">// 最后需要执行闭包，否则返回的是闭包，而不是闭包函数运行后返回的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="六、继承"><a href="#六、继承" class="headerlink" title="六、继承"></a>六、继承</h2><pre><code>* 子类只能继承父类的指定构造器和`required`声明的构造器，required声明构造器表示子类必须重写该构造器* 如果子类实现了父类的**部分**指定构造器，则不会继承父类的构造器* 如果子类实现了父类的**所有**指定构造器，则会继承父类* 如果子类没有实现任何构造器，则会继承父类的**所有构造器*** 子类的指定构造器最终必须调用父类的指定构造器* 子类调用父类构造器之前必须保证当前类的所有属性已初始化为适当的值（非可选变量都已赋值，所有常量都已赋值）* 子类使用父类的属性时，必须在调用父类指定构造器之后</code></pre><p>所有的构造器都必须保证，在执行完构造器时，所有的属性都初始化为适当的值</p><h2 id="七、两段式构造"><a href="#七、两段式构造" class="headerlink" title="七、两段式构造"></a>七、两段式构造</h2><p>swift的构造器有点奇葩，分为两段式构造<br>    * 第一阶段：为每个属性初始化一个初始值<br>    * 第二阶段：为每个属性定制化值</p><p>在其他语言中C#&#x2F;Java中，系统默认会为对象的所有属性和字段初始化值，如值类型初始化为0，引用类型初始化为null，结构体成员遵循前两条，系统自动为我们完成了第一阶段，我们直接进入第二阶段，直接定制化属性&#x2F;字段值，而swift把这两个阶段分开给我们实现了</p><h2 id="八、外部参数名"><a href="#八、外部参数名" class="headerlink" title="八、外部参数名"></a>八、外部参数名</h2><p>所有带参数的构造器在调用的时候必须显式使用外部参数名，如果不显式声明外部参数名，外部参数名与内部参数名相同（与函数的规则一样）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="comment">// 定义一个带参数的构造器</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">outName</span> <span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 <span class="operator">=</span> <span class="type">Person</span>(<span class="string">&quot;bomo&quot;</span>)            <span class="comment">// 报编译错误，需要指定外部参数名</span></span><br><span class="line"><span class="keyword">var</span> p2 <span class="operator">=</span> <span class="type">Person</span>(outName: <span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><p>如果想忽略外部参数名，可以使用<code>_</code>代替外部参数名</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="comment">// 定义一个带参数的构造器</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="keyword">_</span> <span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p <span class="operator">=</span> <span class="type">Person</span>(<span class="string">&quot;bomo&quot;</span>)            <span class="comment">// 编译通过</span></span><br></pre></td></tr></table></figure><h2 id="九、构造器总结"><a href="#九、构造器总结" class="headerlink" title="九、构造器总结"></a>九、构造器总结</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li>如果所有成员都进行了初始化，并且没有提供构造器，编译器会自动为类生成一个无参数构造器，如果是结构体，那么还会生成一个带所有参数的构造器</li></ul><h3 id="指定构造器和便利构造器"><a href="#指定构造器和便利构造器" class="headerlink" title="指定构造器和便利构造器"></a>指定构造器和便利构造器</h3><ul><li>指定构造器总是纵向向上代理，便利构造器总是横向代理</li><li>便利构造器只能调用当前类内的构造器</li><li>便利构造器最终需调用指定构造器</li></ul><h3 id="4种检查"><a href="#4种检查" class="headerlink" title="4种检查"></a>4种检查</h3><ul><li>指定构造器必须保证所有的成员属性都被初始化</li><li>指定构造器（如果有父类）必须最终调用父类的构造器</li><li>指定构造器调用父类构造器之前必须保证当前类的所有成员已完成初始化</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>父类构造器通常情况下不会被子类继承，只有子类无构造器的时候才会</li><li>子类可以通过<code>super</code>调用父类的指定构造器，不能调用父类的便利构造器</li><li>如果有父类，所有的构造器最终都必须调用父类的指定构造器</li><li>使用父类的属性之前，必须先调用父类的构造器，再使用</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swift学习笔记</title>
      <link href="/2016-06-28/swift-start/"/>
      <url>/2016-06-28/swift-start/</url>
      
        <content type="html"><![CDATA[<p>一直没有时间好好看一下swift，最近复习了一遍语法，这里记录swift学习过程中遇到的一些问题和要点，和Object-C的一些相关特性这里也不做介绍，只记录swift特有的一些特性<br>swift借鉴了很多语言的语法，特别是脚本语言，在swift里，可以看到python语言的一些影子，还有其他编程语言的影子</p><span id="more"></span><h2 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h2><ul><li>swift语句结束不需要分号（写了也没有问题），有一种情况需要分号，如果一行代码中有多条语句，这时候就必须要分号隔开</li><li>swift字符串，数组语法糖，字典语法糖不需要<code>@</code>标示</li><li>swift是类型安全的语言，所有的类型都不会自动转换（如：Int和UInt类型不能直接运算），同事swift具有强大的类型推测，所以很多时候我们不需要声明类型</li><li>swift的多行注释支持嵌套<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这是第一个多行注释的开头</span></span><br><span class="line"><span class="comment"><span class="comment">/* 这是第二个被嵌套的多行注释 */</span></span></span><br><span class="line"><span class="comment">这是第一个多行注释的结尾 */</span></span><br></pre></td></tr></table></figure></li><li>swift的布尔值使用小写true和false，判断语句只能使用Bool类型</li></ul><h2 id="二、数据类型"><a href="#二、数据类型" class="headerlink" title="二、数据类型"></a>二、数据类型</h2><ul><li>与objc一样，swift支持以前（objc）使用的所有数据类型，swift的类型名字首字母大写，如Int, Float, NSInteger</li><li>swift支持可选类型（Optionals）类型，相当于C#中的可空类型，标识变量可能为空，基础数据类型也可为空，可选类型不能直接赋非可选类型<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="type">Int</span>? <span class="operator">=</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Int</span> <span class="operator">=</span> a          <span class="comment">// 报错，不同类型不能赋值</span></span><br></pre></td></tr></table></figure></li><li>swift的布尔类型使用<code>true/false</code>，而不用<code>YES/NO</code></li><li>swift支持使用<code>_</code>来分割数值来增强可读性而不影响值，如一亿可以表示为下面形式<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oneMillion <span class="operator">=</span> <span class="number">1_000_000</span></span><br></pre></td></tr></table></figure></li><li>swift数值类型进行运算符计算的时候不会自动进行类型转换，通常可以通过类型的构造方法进行类型转换<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a: <span class="type">Int</span> <span class="operator">=</span> <span class="number">12</span></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Float</span> <span class="operator">=</span> <span class="number">23</span></span><br><span class="line"><span class="keyword">var</span> c <span class="operator">=</span> a <span class="operator">+</span> b           <span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> d <span class="operator">=</span> <span class="type">Float</span>(a) <span class="operator">+</span> b    <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure></li><li>swift的基础数据类型与对象类型一视同仁，可以混用，不需要装箱和拆箱</li></ul><h3 id="TODO：Any-AnyObject"><a href="#TODO：Any-AnyObject" class="headerlink" title="TODO：Any, AnyObject,"></a>TODO：Any, AnyObject,</h3><h2 id="三、常量变量"><a href="#三、常量变量" class="headerlink" title="三、常量变量"></a>三、常量变量</h2><ul><li>与<code>C/Obj-C</code>不同，swift的常量更为广义，支持__任意类型__，常量只能赋值一次</li><li>swift的变量和常量在声明的时候类型就已经确定（由编译器自动识别或开发者指定）</li><li>使用let声明的集合为可变集合，使用var声明的集合为不可变集合</li><li>如果你的代码中有不需要改变的值，请使用 let 关键字将它声明为常量。只将需要改变的值声明为变量。这样可以尽量数据安全，并且常量是线程安全</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常量：使用let声明，赋值后就不能再修改</span></span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="type">NSMutableArray</span>()</span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> c: <span class="type">Float</span> <span class="operator">=</span> <span class="number">12</span>       <span class="comment">// 类型标注(type annotation)</span></span><br><span class="line"><span class="keyword">let</span> d <span class="operator">=</span> b <span class="operator">+</span> <span class="number">12</span></span><br><span class="line">a.addObject(<span class="number">11</span>)         <span class="comment">// str == [11]</span></span><br><span class="line"><span class="keyword">let</span> e <span class="operator">=</span> a               <span class="comment">// str == [11], d == [11]</span></span><br><span class="line">a.addObject(<span class="number">12</span>)         <span class="comment">// str == [11, 12], d == [11, 12]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量：使用var声明</span></span><br><span class="line"><span class="keyword">var</span> f: <span class="type">Double</span>? <span class="operator">=</span> <span class="number">12</span></span><br><span class="line"><span class="keyword">var</span> g <span class="operator">=</span> <span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><h3 id="类型标注"><a href="#类型标注" class="headerlink" title="类型标注"></a>类型标注</h3><p>在声明变量和常量的时候可以如果可以由编译器自动识别，可以不用制定类型，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">12</span>    <span class="comment">//常量a会编译为Int类型</span></span><br><span class="line"><span class="keyword">var</span> b <span class="operator">=</span> <span class="number">1.3</span>   <span class="comment">//变量b会编译为Double类型</span></span><br></pre></td></tr></table></figure><p>我们也可以指定类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="type">Double</span> <span class="operator">=</span> <span class="number">12</span></span><br><span class="line"><span class="keyword">let</span> b: <span class="type">Float</span> <span class="operator">=</span> <span class="number">1.3</span></span><br></pre></td></tr></table></figure><p>可以在一行声明多个变量&#x2F;常量，在最后一个声明类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> red, green, blue: <span class="type">UInt</span></span><br></pre></td></tr></table></figure><h2 id="四、序列和集合"><a href="#四、序列和集合" class="headerlink" title="四、序列和集合"></a>四、序列和集合</h2><h3 id="1-数组Array"><a href="#1-数组Array" class="headerlink" title="1. 数组Array"></a>1. 数组Array</h3><p>swift的数组可以是有类型的（泛型），存放同类型的数据，如果添加一个错误的类型会报编译错误，默认情况下编译器会自动识别</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 数组的写法为：Array&lt;Int&gt;，也可以简写成[Int]</span></span><br><span class="line"><span class="comment">//2. 数组初始化与NSArray类似，直接用中括号括起来，里面值用逗号隔开</span></span><br><span class="line"><span class="keyword">var</span> array0 <span class="operator">=</span> [<span class="type">Int</span>]()</span><br><span class="line"><span class="keyword">var</span> array1: [<span class="type">Int</span>] <span class="operator">=</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">var</span> array2: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; <span class="operator">=</span> array1</span><br><span class="line"></span><br><span class="line">array1.append(<span class="number">11</span>)             <span class="comment">// [1, 3, 5, 7, 9, 11]</span></span><br><span class="line">array1.insert(<span class="number">0</span>, atIndex: <span class="number">0</span>)  <span class="comment">// [0, 1, 3, 5, 7, 9, 11]</span></span><br><span class="line">array1.isEmpty                <span class="comment">// False</span></span><br><span class="line">array1.count                  <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 如果初始化时不指定类型，而编译器也不能识别出类型，这时候，会被当成NSArray处理</span></span><br><span class="line"><span class="keyword">var</span> array3 <span class="operator">=</span> []                       <span class="comment">// array3 为 NSArray类型的空数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 如果声明的时候使用不同的类型，编译器会把数组识别为NSObject类型</span></span><br><span class="line"><span class="keyword">var</span> array4 <span class="operator">=</span> [<span class="string">&quot;fdsa&quot;</span>, <span class="number">121</span>]            <span class="comment">// array4 为 Array&lt;NSObject&gt; 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 集合支持加法运算，相当于NSMutableArray的addObjectsFromArray</span></span><br><span class="line">array1 <span class="operator">+=</span> [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]    <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 使用let声明的数组不可变，不能修改数组array3</span></span><br><span class="line"><span class="keyword">let</span> array5: [<span class="type">Int</span>] <span class="operator">=</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="comment">//array5.append(2)              // 报编译错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 集合使用下标索引，支持区间索引，区间不可越界</span></span><br><span class="line"><span class="keyword">var</span> array6: [<span class="type">Int</span>] <span class="operator">=</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">array6[<span class="number">1</span>] <span class="operator">=</span> <span class="number">4</span>                       <span class="comment">// [1, 3, 5, 7, 9]</span></span><br><span class="line">array6[<span class="number">1</span><span class="operator">...</span><span class="number">3</span>] <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]           <span class="comment">// [1, 2, 3, 4, 9]</span></span><br><span class="line">array6[<span class="number">0</span><span class="operator">...</span><span class="number">2</span>] <span class="operator">=</span> array6[<span class="number">1</span><span class="operator">...</span><span class="number">3</span>]       <span class="comment">// [2, 3, 4, 4, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 迭代数组的时候，如果需要索引，可以用enumerate方法</span></span><br><span class="line"><span class="keyword">for</span> (index, value) <span class="keyword">in</span> array4.enumerated() &#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-字典Dictionary"><a href="#2-字典Dictionary" class="headerlink" title="2. 字典Dictionary"></a>2. 字典Dictionary</h3><p>与数组类型一样，字典也支持泛型，其键值类型都可以指定或有编译器识别，其中Key的类型，必须是可Hash的，swift中基础数据类型都是可hash的（String、Int、Double和Bool）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 用法与oc类似，初始化不需要@</span></span><br><span class="line"><span class="keyword">var</span> dict1 <span class="operator">=</span> [<span class="string">&quot;key1&quot;</span>: <span class="number">1</span>, <span class="string">&quot;key2&quot;</span>: <span class="number">2</span>, <span class="string">&quot;key3&quot;</span>: <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 声明方式</span></span><br><span class="line"><span class="keyword">var</span> dict2: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Int</span>&gt; <span class="operator">=</span> dict1        <span class="comment">//dict2与dict1不是一个对象</span></span><br><span class="line"><span class="keyword">var</span> dict3: [<span class="type">String</span>: <span class="type">Int</span>] <span class="operator">=</span> dict1                  <span class="comment">//通常采用这种方式声明类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 不声明类型，编译器又无法识别，则为NSDictionary</span></span><br><span class="line"><span class="keyword">var</span> dict4 <span class="operator">=</span> [:]</span><br><span class="line"><span class="keyword">var</span> dict5: [<span class="type">Int</span>: <span class="type">String</span>] <span class="operator">=</span> [:]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 修改或添加键值对</span></span><br><span class="line">dict1[<span class="string">&quot;key3&quot;</span>] <span class="operator">=</span> <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 删除键</span></span><br><span class="line">dict1[<span class="string">&quot;key3&quot;</span>] <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. key不存在不报错，返回可空类型nil</span></span><br><span class="line"><span class="keyword">let</span> value4 <span class="operator">=</span> dict1[<span class="string">&quot;key4&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 字典迭代返回key/value元组，类似python</span></span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> dict1 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(key)</span> = <span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数组（Array）或字典（Dictionary），如果声明为变量（var），则为可变，如果为常量（let），则为不可变<br>常量数组或字典编译器会对其进行优化，所以尽量把不可变的数组定义为常量数组</p></blockquote><h3 id="3-Set"><a href="#3-Set" class="headerlink" title="3. Set"></a>3. Set</h3><p>Set集合用于存放无序不重复的对象，用法与数组类似，重复的项会被忽略</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s: <span class="type">Set</span>&lt;<span class="type">Int</span>&gt; <span class="operator">=</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>]    <span class="comment">// [1, 3, 4, 5, 6, 7]</span></span><br><span class="line">s.count</span><br><span class="line">s.isEmpty</span><br><span class="line">s.insert(<span class="number">3</span>)</span><br><span class="line">s.remove(<span class="number">3</span>)</span><br><span class="line">s.contains(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>集合操作</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oddDigits: <span class="type">Set</span> <span class="operator">=</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line"><span class="keyword">let</span> evenDigits: <span class="type">Set</span> <span class="operator">=</span> [<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"><span class="keyword">let</span> singleDigitPrimeNumbers: <span class="type">Set</span> <span class="operator">=</span> [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//合操作</span></span><br><span class="line">oddDigits.union(evenDigits).sort()                <span class="comment">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//交操作</span></span><br><span class="line">oddDigits.intersection(evenDigits).sorted()       <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//减操作</span></span><br><span class="line">oddDigits.subtracting(singleDigitPrimeNumbers).sorted()           <span class="comment">// [1, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不重叠集合</span></span><br><span class="line">oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()   <span class="comment">// [1, 2, 9]</span></span><br></pre></td></tr></table></figure><ul><li>使用“是否相等”运算符( &#x3D;&#x3D; )来判断两个 合是否包含全部相同的值。</li><li>使用 isSubset(of:) 方法来判断一个 合中的值是否也被包含在另外一个 合中。</li><li>使用 isSuperset(of:) 方法来判断一个 合中包含另一个 合中所有的值。</li><li>使用 isStrictSubset(of:) 或者 isStrictSuperset(of:) 方法来判断一个 合是否是另外一个 合的子 合或 者父 合并且两个 合并不相等。</li><li>使用 isDisjoint(with:) 方法来判断两个 合是否不含有相同的值(是否没有交 )</li></ul><h3 id="4-元组Tuple"><a href="#4-元组Tuple" class="headerlink" title="4. 元组Tuple"></a>4. 元组Tuple</h3><p>与python类似，swift也支持元组，可以很方便的使用元组包装多个值，也使得函数返回多个值变得更加方便，特别是临时组建值得时候</p><ul><li>支持任意类型</li><li>支持同时赋值</li><li>支持自定义key，支持索引</li><li><strong>元组不是对象，不是<code>AnyObject</code>类型，由于swift是强类型的，所以元组有时不能当做普通的对象使用，例如不能把元组加到数组里面，元组内的所有类型必须是明确的</strong></li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明一个元组，元组支持任意类型</span></span><br><span class="line"><span class="keyword">let</span> httpError1 <span class="operator">=</span> (<span class="number">404</span>, <span class="string">&quot;Not Found&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> point <span class="operator">=</span> (<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 可以分别赋值</span></span><br><span class="line"><span class="keyword">let</span> (x, y) <span class="operator">=</span> point</span><br><span class="line"><span class="built_in">print</span>(x)      <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">print</span>(y)      <span class="comment">// 50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用下标取元组元素，下标从0开始</span></span><br><span class="line"><span class="built_in">print</span>(httpError1.<span class="number">0</span>)      <span class="comment">// 404</span></span><br><span class="line"><span class="built_in">print</span>(httpError1.<span class="number">1</span>)      <span class="comment">// Not Found</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 可以给数组元素取名</span></span><br><span class="line"><span class="keyword">let</span> httpError2 <span class="operator">=</span> (code: <span class="number">404</span>, errorMessage: <span class="string">&quot;Not Found&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(httpError2.code)               <span class="comment">// 404</span></span><br><span class="line"><span class="built_in">print</span>(httpError2.errorMessage)       <span class="comment">// Not Found</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 可以用下划线表示忽略部分值</span></span><br><span class="line"><span class="keyword">let</span> (a, <span class="keyword">_</span>) <span class="operator">=</span> point</span><br></pre></td></tr></table></figure><blockquote><p>元组在临时组织值得时候很有用，可以不用重新定义数据结构</p></blockquote><h3 id="5-字符串String"><a href="#5-字符串String" class="headerlink" title="5. 字符串String"></a>5. 字符串String</h3><p>swift字符串是由Character字符组成的集合，支持<code>+</code>操作符，可以与NSString无缝桥接，swift的字符串完全兼容unicode<br>字符串与值类型（与Int, Float）一样，是值类型，在传值的时候都会进行拷贝，当然这回带来一定的性能损耗，<em>swift编译器在编译的时候会进行优化，保证只在必要的情况下才进行拷贝</em></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 与NSString不同，声明不需要@前缀，支持转移字符</span></span><br><span class="line"><span class="keyword">let</span> name1 <span class="operator">=</span> <span class="string">&quot;bomo<span class="subst">\n</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 空串（下面两种方式等价）</span></span><br><span class="line"><span class="keyword">let</span> name2 <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">let</span> name3 <span class="operator">=</span> <span class="type">String</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 字符串由字符Character组成，定义字符</span></span><br><span class="line"><span class="keyword">let</span> character1: <span class="type">Character</span> <span class="operator">=</span> <span class="string">&quot;!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 常见属性，方法</span></span><br><span class="line">name1.isEmpty                   <span class="comment">// 判空</span></span><br><span class="line">name1.characters.count          <span class="comment">// 获取字符串的字符数</span></span><br><span class="line">name1.uppercaseString</span><br><span class="line">name1.lowercaseString</span><br><span class="line">name1.hasPrefix(<span class="string">&quot;bo&quot;</span>)</span><br><span class="line">name1.hasSuffix(<span class="string">&quot;mo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 加法运算</span></span><br><span class="line"><span class="keyword">let</span> hello <span class="operator">=</span> <span class="string">&quot;hello &quot;</span> <span class="operator">+</span> name1   <span class="comment">// hello bomo\n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 比较（比较值，而不是地址）</span></span><br><span class="line"><span class="keyword">let</span> name4 <span class="operator">=</span> <span class="string">&quot;b&quot;</span> <span class="operator">+</span> <span class="string">&quot;omo<span class="subst">\n</span>&quot;</span></span><br><span class="line">name4 <span class="operator">==</span> name1                 <span class="comment">// True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. 字符串插值（使用反斜杠和括号站位）</span></span><br><span class="line"><span class="keyword">let</span> city <span class="operator">=</span> <span class="string">&quot;广州&quot;</span></span><br><span class="line"><span class="keyword">let</span> hello2 <span class="operator">=</span> <span class="string">&quot;I&#x27;m <span class="subst">\(name1)</span> from <span class="subst">\(city)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 8. 格式化字符串</span></span><br><span class="line"><span class="keyword">let</span> f <span class="operator">=</span> <span class="number">123.3233</span></span><br><span class="line"><span class="keyword">var</span> s <span class="operator">=</span> <span class="type">String</span>(format: <span class="string">&quot;%.2f&quot;</span>, f)     <span class="comment">//123.32</span></span><br></pre></td></tr></table></figure><h3 id="6-集合的赋值和拷贝行为"><a href="#6-集合的赋值和拷贝行为" class="headerlink" title="6. 集合的赋值和拷贝行为"></a>6. 集合的赋值和拷贝行为</h3><p>swift的集合通常有Array和Dictionary，他们在赋值或传递的时候，行为上有所不同，字典类型Dictionary或数组类型Array在赋值给变量或常量的时候，只要有做修改，就会进行值拷贝，并且不会作用到原来变量上</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dict1 <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> dict2 <span class="operator">=</span> dict1</span><br><span class="line"><span class="built_in">print</span>(dict1 <span class="operator">==</span> dict2)         <span class="comment">// true</span></span><br><span class="line">dict2[<span class="string">&quot;a&quot;</span>] <span class="operator">=</span> <span class="number">3</span>                <span class="comment">// 修改dict2</span></span><br><span class="line"><span class="built_in">print</span>(dict1 <span class="operator">==</span> dict2)         <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 <span class="operator">=</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 <span class="operator">=</span> arr1</span><br><span class="line"><span class="built_in">print</span>(arr1 <span class="operator">==</span> arr2)           <span class="comment">// true</span></span><br><span class="line">arr1[<span class="number">0</span>] <span class="operator">=</span> <span class="string">&quot;c&quot;</span>                 <span class="comment">// 修改arr1</span></span><br><span class="line"><span class="comment">// arr1.append(&quot;c&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(arr1 <span class="operator">==</span> arr2)           <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>当数组或字典作为参数传递给函数的时候，由于在Swift3中不推荐使用变量参数，故所有函数参数不可变，故也不进行拷贝</p><h2 id="五、可选类型（可空类型）"><a href="#五、可选类型（可空类型）" class="headerlink" title="五、可选类型（可空类型）"></a>五、可选类型（可空类型）</h2><p>swift加入了可空类型让我们使用数据的时候更为安全，我们需要在可空的地方使用可选类型声明该变量可为空，不能给非可选类型设值<code>nil</code>值，在使用的时候可以明确的知道对象是否可能为nil，有点像ObjC的对象，对象可以为nil，也可以不为nil，而swift得可选类型范围更广可以作用于任何类型（基础类型，类，结构体，枚举）</p><h3 id="1-声明"><a href="#1-声明" class="headerlink" title="1. 声明"></a>1. 声明</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明可选类型，在类型后面加上?</span></span><br><span class="line"><span class="keyword">var</span> obj1: <span class="type">NSObject</span>?</span><br><span class="line">obj1 <span class="operator">=</span> <span class="type">NSObject</span>()</span><br><span class="line">obj1 <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 不能给一个可选类型赋nil，下面会报错，</span></span><br><span class="line"><span class="keyword">var</span> obj <span class="operator">=</span> <span class="type">NSObject</span>()</span><br><span class="line">obj <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 如果声明可选变量时没有赋值，则默认为nil</span></span><br><span class="line"><span class="keyword">var</span> i: <span class="type">Int</span>?</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 一个函数返回一个可选类型</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getdog</span>() -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;wangcai&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 不能把可选类型赋值给非可选类型，下面会报错</span></span><br><span class="line"><span class="keyword">let</span> cat: <span class="type">String</span> <span class="operator">=</span> dog</span><br></pre></td></tr></table></figure><h3 id="2-强制解析"><a href="#2-强制解析" class="headerlink" title="2. 强制解析"></a>2. 强制解析</h3><p>可选类型不能直接使用，需要通过取值操作符<code>!</code>取得变量的值，才能使用，如果变量有值，则返回该值，如果变量为空，则会运行时错误</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b: <span class="type">Int</span>?</span><br><span class="line"><span class="keyword">var</span> a: <span class="type">Int</span></span><br><span class="line">a <span class="operator">=</span> <span class="number">12</span></span><br><span class="line">b <span class="operator">=</span> <span class="number">13</span></span><br><span class="line"><span class="keyword">let</span> c <span class="operator">=</span> a <span class="operator">+</span> b<span class="operator">!</span>              <span class="comment">// 先对b取值，再运算</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b: <span class="type">Bool</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">if</span> b<span class="operator">!</span> &#123;                     <span class="comment">// b为空，编译不报错，运行时报错</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;true&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;false&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-可选绑定"><a href="#3-可选绑定" class="headerlink" title="3. 可选绑定"></a>3. 可选绑定</h3><p>使用可选绑定可以判断一个可选类型是否有值，如果有值，则绑定到变量上，如果没有值，返回false，使用<code>if-let</code>组合实现</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i: <span class="type">Int</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> number <span class="operator">=</span> i &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(number)</span>&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选绑定还支持绑定条件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i: <span class="type">Int</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> number <span class="operator">=</span> i <span class="keyword">where</span> i <span class="operator">&gt;</span> <span class="number">10</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;i不为空且大于10 <span class="subst">\(number)</span>&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可选绑定还支持多个绑定，不许所有的绑定都满足才返回true</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> firstNumber <span class="operator">=</span> <span class="number">1</span>, <span class="keyword">let</span> secondNumber <span class="operator">=</span> <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出 &quot;4 &lt; 42 &lt; 100&quot;</span></span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">let</span> firstNumber <span class="operator">=</span> <span class="type">Int</span>(<span class="string">&quot;4&quot;</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> <span class="keyword">let</span> secondNumber <span class="operator">=</span> <span class="type">Int</span>(<span class="string">&quot;42&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> firstNumber <span class="operator">&lt;</span> secondNumber <span class="operator">&amp;&amp;</span> secondNumber <span class="operator">&lt;</span> <span class="number">100</span> &#123;</span><br><span class="line">             <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(firstNumber)</span> &lt; <span class="subst">\(secondNumber)</span> &lt; 100&quot;</span>)</span><br><span class="line">&#125; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-隐式解析"><a href="#4-隐式解析" class="headerlink" title="4. 隐式解析"></a>4. 隐式解析</h3><p>声明类型的时候可以使用隐式解析，即在使用可选变量的时候自动取值，不需要调用<code>!</code>操作符，</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个函数返回一个可选类型</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getdog</span>() -&gt; <span class="type">String</span>? &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;wangcai&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假定我们通过getdog方法返回的值一定不为空</span></span><br><span class="line"><span class="keyword">var</span> dog: <span class="type">String</span>? <span class="operator">=</span> getdog()</span><br><span class="line"><span class="keyword">let</span> cat: <span class="type">String</span> <span class="operator">=</span> dog<span class="operator">!</span>          <span class="comment">// 使用前需要通过!强制取值</span></span><br></pre></td></tr></table></figure><p>使用dog的时候都需要取值我们觉得太麻烦了，可以声明成隐式可选类型，使用的时候自动取值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dog: <span class="type">String</span>! <span class="operator">=</span> getdog()     <span class="comment">// 实际上dog还是可选类型，只是使用的时候回自动取值</span></span><br><span class="line"><span class="keyword">let</span> cat: <span class="type">String</span> <span class="operator">=</span> dog           <span class="comment">// 在使用dog的时候会自动进行取值，不需要取值操作符</span></span><br></pre></td></tr></table></figure><h3 id="5-可选类型自判断链接"><a href="#5-可选类型自判断链接" class="headerlink" title="5. 可选类型自判断链接"></a>5. 可选类型自判断链接</h3><p>在使用可选类型之前，需要进行判断其是否有值，才能使用，通过<code>!</code>操作符取值后使用（保证有值的情况下），或通过<code>if-let</code>可选绑定的方式，swift提供了一种类似C#语言的语法糖可以让代码更为简洁，可以自动判断值，如果有值，则操作，无值则不操作，并返回nil，在使用前加上<code>?</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> favDog: <span class="type">Dog</span>?</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line"><span class="keyword">var</span> d <span class="operator">=</span> <span class="type">Dog</span>()</span><br><span class="line"><span class="comment">// p.favDog = d</span></span><br><span class="line">p.favDog<span class="operator">?</span>.name <span class="operator">=</span> <span class="string">&quot;tobi&quot;</span>   <span class="comment">// 如果p.favDog为空，不设置name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> name <span class="operator">=</span> p.favDog<span class="operator">?</span>.name &#123;</span><br><span class="line">    <span class="comment">// p.favDog不为空且p.favDog.name不为空</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// p.favDog为空或p.favDog.name为空</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自判断链接还支持多连接如</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> identifier <span class="operator">=</span> john.residence<span class="operator">?</span>.address<span class="operator">?</span>.buildingIdentifier</span><br></pre></td></tr></table></figure><h3 id="6-可选关联运算符"><a href="#6-可选关联运算符" class="headerlink" title="6. 可选关联运算符"></a>6. 可选关联运算符</h3><p>可选关联运算符可对可选类型进行拆包，如果可选类型对象为nil，返回第二个操作数，第二个操作数类型必须和第一个操作数同类型（可选或不可选）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> defaultColorName <span class="operator">=</span> <span class="string">&quot;red&quot;</span></span><br><span class="line"><span class="keyword">var</span> userDefinedColorName: <span class="type">String</span>?   <span class="comment">// defaults to nil</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colorNameToUse <span class="operator">=</span> userDefinedColorName <span class="operator">??</span> defaultColorName</span><br></pre></td></tr></table></figure><ul><li>defaultColorName和userDefinedColorName必须是同类型（String或String?）</li><li>如果userDefinedColorName不为空，返回其值，如果userDefinedColorName为空，返回defaultColorName</li><li>返回值colorNameToUse的类型同<code>??</code>的第二个操作数的类型，为<code>String</code></li></ul><h2 id="六、运算符"><a href="#六、运算符" class="headerlink" title="六、运算符"></a>六、运算符</h2><p>swift运算符在原有的基础上做了一些改进，还添加了一下更高级的用法，还有新的运算符</p><ul><li><p><code>=</code>运算符不返回值</p></li><li><p>符合运算符<code>+=</code>, <code>-=</code>等不返回值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面语句会报错</span></span><br><span class="line"><span class="keyword">let</span> b <span class="operator">=</span> a <span class="operator">*=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>比较运算符可以用于元组的比较（逐个比较，如果遇到不等的元素，则返回，默认最多只能比较7个元素的元组，超过则需要自定义）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="string">&quot;zebra&quot;</span>) <span class="operator">&lt;</span> (<span class="number">2</span>, <span class="string">&quot;apple&quot;</span>)     <span class="comment">// true，因为 1 小于 2</span></span><br></pre></td></tr></table></figure></li><li><p>字符串String，字符Character支持<code>+</code>运算符</p></li><li><p>浮点数支持<code>%</code>求余运算</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8</span> <span class="operator">%</span> <span class="number">2.5</span> <span class="comment">// 等于 0.5</span></span><br></pre></td></tr></table></figure></li><li><p><code>++/--</code>运算在swift3被抛弃，用<code>+=/-=</code>代替</p></li><li><p>支持溢出运算符（<code>&amp;+</code>, <code>&amp;-</code>, <code>&amp;*</code>），可以在溢出时进行(高位)截断</p></li><li><p>支持位运算符（<code>&gt;&gt;</code>, <code>&lt;&lt;</code>）</p></li><li><p>支持三目运算符（<code>a ? b : c</code>）</p></li><li><p>支持逻辑运算符（<code>&amp;&amp;</code>, <code>||</code>, <code>!</code>）</p></li><li><p>与其他高级语言类似，swift运算符支持重载，可以为类添加自定义的运算符逻辑，后面会讲到</p></li><li><p><code>!=</code>, <code>==</code>, <code>===</code>, <code>!==</code>（恒等于&#x2F;不恒等于）<br><code>===</code>：这两个操作符用于引用类型，用于判断两个对象是否指向同一地址<br><code>!===</code>：与<code>===</code>相反，表示两个变量&#x2F;常量指向的的地址不同<br><code>==</code>：表示两个对象逻辑相等，可以通过重载运算符实现相等的逻辑，两个值相等的对象可以是不同地址的对象<br><code>!=</code>：与<code>==</code>相反，表示两个对象逻辑不等</p></li><li><p>区间运算符<br>  可以使用<code>a...b</code>表示一个范围，有点类似于Python的<code>range(a, b)</code></p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(i)          <span class="comment">// 1, 2, 3, 4, 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <code>a...b</code>: 从a到b并包含a和b<br>  <code>a..&lt;b</code>: 包含a不包含b</p><blockquote><p><code>a..b</code>表示半闭区间的用法已经被放弃</p></blockquote><p>  范围运算符也可以作用于字符串<br>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> az <span class="operator">=</span> <span class="string">&quot;a&quot;</span><span class="operator">...</span><span class="string">&quot;z&quot;</span>      <span class="comment">// 返回的是CloseInteval或HalfOpenInterval</span></span><br><span class="line">az.contains(<span class="string">&quot;e&quot;</span>)        <span class="comment">// True</span></span><br></pre></td></tr></table></figure></p></li><li><p>空合运算符<code>??</code>（与C#类似）<br>  对于可选类型取值，如果不为空则返回该值，如果为空则去第二个操作数</p>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result <span class="operator">=</span> a <span class="operator">??</span> b</span><br></pre></td></tr></table></figure></li></ul><h2 id="七、流程控制"><a href="#七、流程控制" class="headerlink" title="七、流程控制"></a>七、流程控制</h2><p>swift使用三种语句控制流程：<code>for-in</code>、<code>for</code>、<code>switch-case</code>、<code>while</code>和<code>repeat-while</code>，且判断条件的括号可以省略</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names <span class="operator">=</span> [<span class="string">&quot;Anna&quot;</span>, <span class="string">&quot;Alex&quot;</span>, <span class="string">&quot;Brian&quot;</span>, <span class="string">&quot;Jack&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello, <span class="subst">\(name)</span>!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不需要使用到迭代的值，使用下划线`_`忽略该值</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><p>流程控制语句的条件返回值必须是Bool，下面会报错</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dd: <span class="type">Bool</span>? <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> dd &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fd&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件判断可以与<code>let</code>结合使用，当值为nil时，视为false（即：<code>可选绑定</code>）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dd: <span class="type">Bool</span>? <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> ee <span class="operator">=</span> dd &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fd&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Swift2.0以后，不支持<code>do-while</code>语句，使用<code>repeat-while</code>代替，用法与<code>do-while</code>一样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span> &#123;  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;repeat while : <span class="subst">\(j)</span>&quot;</span>)  </span><br><span class="line">    j<span class="operator">++</span>  </span><br><span class="line">&#125; <span class="keyword">while</span> j <span class="operator">&lt;</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="guard-else"><a href="#guard-else" class="headerlink" title="guard-else"></a>guard-else</h3><p>翻译为保镖模式，在执行操作前，进行检查，如果不符合，则拦截，使用方式与if有些类似，如果与let结合使用，可以对可选类型解包，先看看普通的<code>if-else</code>模式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>(<span class="params">i</span>: <span class="type">Int</span>?) &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> i <span class="operator">=</span> i <span class="keyword">where</span> i <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="comment">// 符合条件的处理</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不符合条件的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的处理把条件放在了条件判断内部，使用guard与之相反，把正确的情况放在最外部，而异常情况放在条件判断内部</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>(<span class="params">i</span>: <span class="type">Int</span>?) &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> i <span class="operator">=</span> i <span class="keyword">where</span> i <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里拦截，处理不符合条件的情况</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 符合条件的处理，这个时候已经对i进行了拆包，i是非可选类型，可以直接使用</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保镖模式可以避免代码中过多的流程判断代码导致过多的代码块嵌套，增强可读性</p><blockquote><p>保镖模式<code>guard-else</code>内的代码块必须包含<code>break</code>, <code>return</code>等跳出代码块的关键字</p></blockquote><h3 id="switch-case"><a href="#switch-case" class="headerlink" title="switch-case"></a>switch-case</h3><ul><li>switch语句支持更多数据类型（String，Int, Float, 元组, 枚举），理论上switch支持任意类型的对象（需要实现<code>~=</code>方法或<code>Equatable</code>协议，详情参见<a href="http://www.jianshu.com/p/ff660a3e3d8a">这里</a>）</li><li>case可以带多个值，用逗号隔开</li><li>case可以支持区间（<code>a...b</code>），支持元组，区间可以嵌套在元组内使用</li><li>case多条语句不需要用大括号包起来</li><li>case语句不需要break，除了空语句，如果需要执行下面的case，可以使用<code>fallthrough</code></li><li>如果case不能命中所有的情况，必须要<code>default</code>，如Int，String类型，否则编译会失败</li><li>可以用<code>fallthrough</code>关键字声明接着执行下一条case语句，注意，如果case语句有赋值语句（<code>let</code>），则<code>fallthrough</code>无效</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">HttpStatus</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">ServerError</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">NetworkError</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Success</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Redirect</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> status <span class="operator">=</span> <span class="type">HttpStatus</span>.<span class="type">Redirect</span></span><br><span class="line"><span class="keyword">switch</span> status &#123;</span><br><span class="line"><span class="comment">// case可以接收多个值</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">HttpStatus</span>.<span class="type">ServerError</span>, <span class="type">HttpStatus</span>.<span class="type">NetworkError</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line">    <span class="comment">// case语句结束显式写break，除非是空语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> .<span class="type">Redirect</span>:             <span class="comment">// 如果编译器可以识别出枚举类型，可以省略枚举名</span></span><br><span class="line">    print (<span class="string">&quot;redirect&quot;</span>)</span><br><span class="line">    <span class="keyword">fallthrough</span>             <span class="comment">// 像C语言一样，继续执行下一条case</span></span><br><span class="line"><span class="keyword">case</span> <span class="type">HttpStatus</span>.<span class="type">Success</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//元组，区间</span></span><br><span class="line"><span class="keyword">let</span> request <span class="operator">=</span> (<span class="number">0</span>, <span class="string">&quot;https://baidu.com&quot;</span>)</span><br><span class="line"><span class="keyword">switch</span> request &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">let</span> a):                  <span class="comment">// 支持绑定</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> (a, b) <span class="keyword">where</span> a <span class="operator">==</span> <span class="number">1</span>:      <span class="comment">// 绑定可以卸载元组外面，支持where判断</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cancel <span class="subst">\(b)</span>&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> (<span class="number">2</span><span class="operator">...</span><span class="number">10</span>, <span class="keyword">_</span>):                 <span class="comment">// 支持区间，支持忽略值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;error&quot;</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;unknown&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// case可以与where进行进一步判断</span></span><br><span class="line"><span class="keyword">let</span> request2 <span class="operator">=</span> (<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">switch</span> request2 &#123;</span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">let</span> y) <span class="keyword">where</span> y <span class="operator">&lt;</span> <span class="number">5</span>:</span><br><span class="line"><span class="string">&quot;success&quot;</span>   <span class="comment">//被输出</span></span><br><span class="line"><span class="keyword">case</span> (<span class="number">0</span>, <span class="keyword">let</span> y) <span class="keyword">where</span> y <span class="operator">&gt;=</span> <span class="number">5</span>:</span><br><span class="line"><span class="string">&quot;error&quot;</span>   <span class="comment">//被输出</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="string">&quot;unknown&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>case除了和swift一起使用外，还支持与if语句结合使用，用法与switch一样</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bb <span class="operator">=</span> (<span class="number">12</span>, <span class="string">&quot;bomo&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> (<span class="number">1</span><span class="operator">...</span><span class="number">20</span>, <span class="keyword">let</span> cc) <span class="operator">=</span> bb <span class="keyword">where</span> cc <span class="operator">==</span> <span class="string">&quot;bomo&quot;</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(cc)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;nil&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带标签的语句"><a href="#带标签的语句" class="headerlink" title="带标签的语句"></a>带标签的语句</h3><p>如果有多层嵌套的情况下，有时候我们需要在某处直接退出多层循环，在objc下并没有比较好的方式实现，需要添加退出标识，然后一层一层退出，而在swift可以很方便的退出多层循环，首先需要使用标签标识不通的循环体，形式如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">labelName : <span class="keyword">while</span> condition &#123; statements &#125;</span><br></pre></td></tr></table></figure><p>看下面例子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">outerLoop1 : <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10</span> &#123;</span><br><span class="line">    outerLoop2 : <span class="keyword">for</span> j <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10</span> &#123;</span><br><span class="line">        outerLoop3 : <span class="keyword">for</span> k <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span><span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> j <span class="operator">&gt;</span> <span class="number">5</span> &#123;</span><br><span class="line">                <span class="comment">// 1. 跳出一层循环（默认）继续outerLoop2的循环</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2. 跳出两层循环，继续outerLoop1的循环</span></span><br><span class="line">                <span class="comment">// break outerLoop2</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 3. 跳出三层循环，退出整个循环，继续后面的语句</span></span><br><span class="line">                <span class="comment">// break outerLoop1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="八、函数"><a href="#八、函数" class="headerlink" title="八、函数"></a>八、函数</h2><h3 id="1-基本形式"><a href="#1-基本形式" class="headerlink" title="1. 基本形式"></a>1. 基本形式</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有返回值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">函数名</span>(<span class="params">参数名1</span>:参数类型<span class="number">1</span>, <span class="params">参数名2</span>:参数类型<span class="number">2</span>) -&gt; 返回值类型 &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个返回值（元组）</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">getPoint</span>() -&gt; (x: <span class="type">Int</span>, y: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p <span class="operator">=</span> getPoint()</span><br><span class="line">p.x</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参数无返回值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">sayHello</span>() &#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//egg</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">b</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">add(<span class="number">12</span>, b: <span class="number">232</span>)</span><br></pre></td></tr></table></figure><p>函数调用除了第一个参数，后面所有的参数必须带上参数名（符合Objc的函数命名规则）如果是调用构造器，第一个参数也需要显示声明</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">sayHello</span>(<span class="params">msg</span>: <span class="type">String</span>, <span class="params">count</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">_</span> <span class="keyword">in</span> <span class="number">1</span><span class="operator">...</span>count &#123;</span><br><span class="line">            print (msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="type">A</span>(name: <span class="string">&quot;bomo&quot;</span>)               <span class="comment">// 构造器所有参数都必须显示声明参数名</span></span><br><span class="line">a.sayHello(<span class="string">&quot;hello&quot;</span>, count: <span class="number">2</span>)         <span class="comment">// 函数参数除了第一个其他都需要显示声明参数名</span></span><br></pre></td></tr></table></figure><h3 id="2-可变参数"><a href="#2-可变参数" class="headerlink" title="2. 可变参数"></a>2. 可变参数</h3><p>可变参数只能作为最后一个参数，一个方法最多只有一个可变参数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">sum</span>(<span class="params">numbers</span>: <span class="type">Int</span>...) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> numbers &#123;</span><br><span class="line">        sum <span class="operator">+=</span> number</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-外部参数名"><a href="#3-外部参数名" class="headerlink" title="3. 外部参数名"></a>3. 外部参数名</h3><p>默认情况下，如果不指定外部参数名，swift编译器会自动为函数参数声明与内部参数名同名的外部参数名（格式为：<code>外部参数名 内部参数名: 类型名</code>）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认情况下，外部参数名与内部参数名一样</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="params">first</span> <span class="params">a</span>: <span class="type">Int</span>, <span class="params">second</span> <span class="params">b</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">add(first: <span class="number">10</span>, second: <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>如果函数在第一个参数定义外部参数名，必须显示指定，当然我们还可以通过下划线<code>_</code>让函数忽略参数名</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="keyword">_</span> <span class="params">b</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="4-函数默认值"><a href="#4-函数默认值" class="headerlink" title="4. 函数默认值"></a>4. 函数默认值</h3><p>函数还支持声明默认值，（格式为：<code>外部参数名 内部参数名: 类型名 = 默认值</code>）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">log</span>(<span class="params">msg</span>: <span class="type">String</span>, <span class="params">isDebug</span>: <span class="type">Bool</span> <span class="operator">=</span> <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> isDebug &#123;</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">log(<span class="string">&quot;fail&quot;</span>)</span><br><span class="line">log(<span class="string">&quot;success&quot;</span>, isDebug: <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>如果使用默认值并且默认值不是出现在最后，那调用的时候必须写全所有参数</p><blockquote><p>建议把默认参数放到最后面，这样可以确保非默认参数的赋值顺序，减少参数混乱的情况</p></blockquote><h3 id="5-闭包"><a href="#5-闭包" class="headerlink" title="5. 闭包"></a>5. 闭包</h3><ul><li>函数作为变量</li><li>函数作为函数参数</li><li>函数作为函数返回值</li><li>闭包函数声明<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">b</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数作为变量，函数hello赋给somefunc，并调用</span></span><br><span class="line"><span class="keyword">let</span> somefunc: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="operator">=</span> add</span><br><span class="line">somefunc(<span class="number">10</span>, <span class="number">20</span>)      <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//函数作为参数</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">logAdd</span>(<span class="params">a</span>:<span class="type">Int</span>, <span class="params">b</span>:<span class="type">Int</span>, <span class="params">function</span>: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数内容</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;begin&quot;</span>)</span><br><span class="line">    function(a, b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">logAdd(<span class="number">12</span>, b: <span class="number">23</span>, function: add)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数作为返回值（包装一个函数，在执行前后输出信息），函数作为参数又作为返回值</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">addWrapper</span>(<span class="params">addFunc</span>: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>) -&gt; ((<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="comment">// 函数内容</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">wrapper</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">b</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;begin&quot;</span>)</span><br><span class="line">        <span class="keyword">let</span> res <span class="operator">=</span> addFunc(a, b)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newAdd <span class="operator">=</span> addWrapper(add)</span><br><span class="line">newAdd(<span class="number">12</span>, <span class="number">32</span>)</span><br></pre></td></tr></table></figure></li></ul><p>闭包函数声明形式</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; (parameters) -&gt; returnType <span class="keyword">in</span></span><br><span class="line">    statements      <span class="comment">// 可以有多行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>闭包函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个函数变量</span></span><br><span class="line"><span class="keyword">var</span> addfunc: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//闭包的写法</span></span><br><span class="line"><span class="comment">// 1. 完整写法</span></span><br><span class="line">add<span class="keyword">func</span> <span class="title function_">=</span> &#123;(a: <span class="type">Int</span>, b: <span class="type">Int</span>) -&gt; (<span class="type">Int</span>) <span class="keyword">in</span></span><br><span class="line">    <span class="comment">//var c = a + 1       //函数体可以有多条语句，如果在同一行，需要用分号隔开，函数体不需要大括号</span></span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 前面的addfunc变量可以推断出后面函数的参数类型和返回值类型，故可以省略</span></span><br><span class="line">add<span class="keyword">func</span> <span class="title function_">=</span> &#123;(a, b) <span class="keyword">in</span> <span class="keyword">return</span> a <span class="operator">+</span> b&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 参数列表括号可以省去，函数只有一条语句时，return可以省略</span></span><br><span class="line">add<span class="keyword">func</span> <span class="title function_">=</span> &#123;a, b <span class="keyword">in</span> a <span class="operator">+</span> b&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 参数和in可以省去，通过$和索引取得参数</span></span><br><span class="line">add<span class="keyword">func</span> <span class="title function_">=</span> &#123;<span class="variable">$0</span> <span class="operator">+</span> <span class="variable">$1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作符需要的参数与函数参数一致，可以省去参数，并使用括号括起来，作为参数时，可不用括号</span></span><br><span class="line">add<span class="keyword">func</span> <span class="title function_">=</span> (<span class="operator">+</span>)</span><br></pre></td></tr></table></figure><h3 id="6-Trailing-尾行-闭包"><a href="#6-Trailing-尾行-闭包" class="headerlink" title="6. Trailing(尾行)闭包"></a>6. Trailing(尾行)闭包</h3><p>如果函数作为另一个函数的参数，并且是最后一个参数时，可以通过Trainling闭包来增强函数的可读性</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">someFunctionThatTakesAClosure</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">closure</span>: () -&gt; ()) &#123;</span><br><span class="line">    <span class="comment">// 函数体部分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 一般形式</span></span><br><span class="line">someFunctionThatTakesAClosure(<span class="number">10</span>, closure: &#123;</span><br><span class="line">    <span class="comment">// 闭包主体部分</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Trainling闭包的方式</span></span><br><span class="line">someFunctionThatTakesAClosure(<span class="number">10</span>) &#123;</span><br><span class="line">    <span class="comment">// 闭包主体部分</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 如果没有其他参数时，可以省略括号</span></span><br><span class="line">someFunctionThatTakesAClosure &#123;</span><br><span class="line">    <span class="comment">// 闭包主体部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-Escaping（逃逸）闭包"><a href="#7-Escaping（逃逸）闭包" class="headerlink" title="7. Escaping（逃逸）闭包"></a>7. Escaping（逃逸）闭包</h3><p>如果一个闭包&#x2F;函数作为参数传给另外一个函数，但这个闭包在传入函数返回之后才会执行，就称该闭包在函数中”逃逸”，需要在函数参数添加<code>@escaping</code>声明，来声明该闭包&#x2F;函数允许从函数中”逃逸”，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> completionHandlers: [() -&gt; <span class="type">Void</span>] <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入的闭包/函数并没有在函数内执行，需要在函数类型钱添加@escaping声明</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">someFunctionWithEscapingClosure</span>(<span class="params">completionHandler</span>: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) &#123;</span><br><span class="line">    completionHandlers.append(completionHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>逃逸闭包只是一个声明，以增强函数的意图</p></blockquote><h3 id="8-自动闭包"><a href="#8-自动闭包" class="headerlink" title="8. 自动闭包"></a>8. 自动闭包</h3><p>对于没有参数的闭包，swift提供了一种简写的方式，直接写函数体，不需要函数形式（返回值和参数列表），如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个自动闭包（无参数，可以有返回值，返回值类型swift可以自动识别）</span></span><br><span class="line"><span class="keyword">let</span> sayHello <span class="operator">=</span> &#123; <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用闭包函数</span></span><br><span class="line">sayHello()</span><br></pre></td></tr></table></figure><blockquote><p>自动闭包只是闭包的一种简写方式</p></blockquote><p>如果一个函数接受一个不带参数的闭包</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">logIfTrue</span>(<span class="params">predicate</span>: () -&gt; <span class="type">Bool</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> predicate() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用的时候可以使用自动闭包</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">logIfTrue(predicate: &#123; <span class="keyword">return</span> <span class="number">1</span> <span class="operator">&lt;</span> <span class="number">2</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简化return</span></span><br><span class="line">logIfTrue(predicate: &#123; <span class="number">1</span> <span class="operator">&lt;</span> <span class="number">2</span> &#125;)</span><br></pre></td></tr></table></figure><p>上面代码看起来可读性不是很好，swift引入了一个关键字<code>@autoclosure</code>，简化自动闭包的大括号，在闭包类型前面添加该关键字声明</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">logIfTrue</span>(<span class="params">predicate</span>: <span class="keyword">@autoclosure</span> () -&gt; <span class="type">Bool</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> predicate() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;True&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">logIfTrue(predicate:<span class="number">1</span> <span class="operator">&lt;</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><blockquote><p><code>@autoclosure</code> 关键字是为了简化闭包的写法，增强可读性，这里的例子比较简单，可以参考：<a href="http://swifter.tips/autoclosure/">@AUTOCLOSURE 和 ??</a></p></blockquote><h3 id="9-常量参数和变量参数"><a href="#9-常量参数和变量参数" class="headerlink" title="9. 常量参数和变量参数"></a>9. 常量参数和变量参数</h3><p>默认情况下所有函数参数都是常量，意味着参数是不可变的，我们可以显式的声明参数为变量</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">log</span>(<span class="params">msg</span>: <span class="type">String</span>) &#123;</span><br><span class="line">    msg <span class="operator">=</span> <span class="string">&quot;begin &quot;</span> <span class="operator">+</span> msg <span class="operator">+</span> <span class="string">&quot; end&quot;</span>       <span class="comment">// 会报错，因为msg为常量</span></span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">func</span> <span class="title function_">log</span>(<span class="params">var</span> <span class="params">msg</span>: <span class="type">String</span>) &#123;</span><br><span class="line">    msg <span class="operator">=</span> <span class="string">&quot;begin &quot;</span> <span class="operator">+</span> msg <span class="operator">+</span> <span class="string">&quot; end&quot;</span>       <span class="comment">// 变量参数正常运行</span></span><br><span class="line">    <span class="built_in">print</span>(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注：变量参数在swift3被抛弃</p></blockquote><h3 id="10-输入输出参数"><a href="#10-输入输出参数" class="headerlink" title="10. 输入输出参数"></a>10. 输入输出参数</h3><p>在c语言里有指针，可以通过传址直接修改外部变量的值，在swift通过<code>inout</code>关键字声明函数内部可直接修改外部变量，外部通过<code>&amp;</code>操作符取得变量地址</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">swap</span>(<span class="params">inout</span> <span class="params">a</span>: <span class="type">Int</span>, <span class="params">inout</span> <span class="params">b</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> temp <span class="operator">=</span> a</span><br><span class="line">    a <span class="operator">=</span> b</span><br><span class="line">    b <span class="operator">=</span> temp</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a <span class="operator">=</span> <span class="number">19</span>, b <span class="operator">=</span> <span class="number">3</span></span><br><span class="line"><span class="built_in">swap</span>(<span class="operator">&amp;</span>a, <span class="operator">&amp;</span>b)</span><br></pre></td></tr></table></figure><h3 id="11-嵌套函数"><a href="#11-嵌套函数" class="headerlink" title="11. 嵌套函数"></a>11. 嵌套函数</h3><p>swift的函数还支持嵌套，默认情况下，嵌套函数对外部不可见，只能在函数内部使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">chooseStepFunction</span>(<span class="params">backward</span>: <span class="type">Bool</span>) -&gt; (<span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">//定义两个内部函数</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">stepForward</span>(<span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> input <span class="operator">+</span> <span class="number">1</span> &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">stepBackward</span>(<span class="params">input</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> input <span class="operator">-</span> <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> backward <span class="operator">?</span> stepBackward : stepForward</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套函数相当于objc函数内的block</p><h3 id="12-defer"><a href="#12-defer" class="headerlink" title="12. defer"></a>12. defer</h3><p>在swift2.0之后添加了<code>defer</code>关键字，可以定义代码块在函数执行完成之前的完成一些操作，<strong>并且在函数抛出错误的时候也可以执行</strong></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;begin1&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> &#123;             <span class="comment">// 入栈</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;begin2&quot;</span>)</span><br><span class="line">    <span class="keyword">defer</span> &#123;             <span class="comment">// 入栈</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;begin4&quot;</span>)</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;end4&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;begin5&quot;</span>)</span><br><span class="line">        <span class="keyword">defer</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;end5&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;do balabala&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面输出结果为</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">begi<span class="symbol">n1</span></span><br><span class="line">begi<span class="symbol">n2</span></span><br><span class="line">begi<span class="symbol">n4</span></span><br><span class="line">begi<span class="symbol">n5</span></span><br><span class="line">e<span class="symbol">nd5</span></span><br><span class="line">e<span class="symbol">nd4</span></span><br><span class="line"><span class="keyword">do</span> balabala</span><br><span class="line">e<span class="symbol">nd2</span></span><br><span class="line">e<span class="symbol">nd1</span></span><br></pre></td></tr></table></figure><p>通常可以用在需要成对操作的逻辑中（如：<code>open/close</code>）</p><h2 id="九、枚举"><a href="#九、枚举" class="headerlink" title="九、枚举"></a>九、枚举</h2><p>swift的枚举比C语言的枚举更为强大，支持更多特性，swift的枚举更像类和结构体，支持类和结构体的一些特性，与<code>ObjC</code>不同，如果不声明枚举的值，编译器不会给枚举设置默认值</p><blockquote><p>枚举与结构体一样，是值类型</p></blockquote><h3 id="1-声明和使用"><a href="#1-声明和使用" class="headerlink" title="1. 声明和使用"></a>1. 声明和使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CompassPoint</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">North</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">South</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">East</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">West</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 可以把枚举值定义在一行，用逗号隔开</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CompassPoint2</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">North</span>, <span class="type">South</span>, <span class="type">East</span>, <span class="type">West</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 像对象一样使用枚举，代码结构更为清晰，枚举更为简短</span></span><br><span class="line"><span class="keyword">let</span> direction <span class="operator">=</span> <span class="type">CompassPoint</span>.<span class="type">East</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 如果编译器可以识别出枚举的类型，可以省略枚举名</span></span><br><span class="line"><span class="keyword">let</span> direction2: <span class="type">CompassPoint</span></span><br><span class="line">direction2 <span class="operator">=</span> .<span class="type">East</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 如果编译器能确定case命中所有的情况，可以不需要default</span></span><br><span class="line"><span class="keyword">switch</span> direction &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="type">East</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;east&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">West</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;west&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">South</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;south&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> .<span class="type">North</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;north&quot;</span>)</span><br><span class="line">    <span class="comment">//所有值都被枚举，则不需要default</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-嵌套枚举"><a href="#2-嵌套枚举" class="headerlink" title="2. 嵌套枚举"></a>2. 嵌套枚举</h3><p>swift的枚举定义支持嵌套，在使用的时候一层一层引用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Character</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Weapon</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Bow</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Sword</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Lance</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Dagger</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Helmet</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Wooden</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Iron</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Diamond</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Thief</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Warrior</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Knight</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> character <span class="operator">=</span> <span class="type">Character</span>.<span class="type">Thief</span></span><br><span class="line"><span class="keyword">let</span> weapon <span class="operator">=</span> <span class="type">Character</span>.<span class="type">Weapon</span>.<span class="type">Bow</span></span><br><span class="line"><span class="keyword">let</span> helmet <span class="operator">=</span> <span class="type">Character</span>.<span class="type">Helmet</span>.<span class="type">Iron</span></span><br></pre></td></tr></table></figure><h3 id="3-递归枚举"><a href="#3-递归枚举" class="headerlink" title="3. 递归枚举"></a>3. 递归枚举</h3><p>枚举的关联值的类型可以设为枚举自身，这样的枚举称为递归枚举</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">ArithmeticExpression</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">indirect</span> <span class="keyword">case</span> addition(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">    <span class="keyword">indirect</span> <span class="keyword">case</span> multiplication(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带递归类型的枚举需要在case前面添加关键字声明<code>indirect</code>，也可以在enum前面加上声明，表示所有的成员是可以递归的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">indirect</span> <span class="keyword">enum</span> <span class="title class_">ArithmeticExpression</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> number(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> addition(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">    <span class="keyword">case</span> multiplication(<span class="type">ArithmeticExpression</span>, <span class="type">ArithmeticExpression</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用递归枚举取值的时候可以使用递归函数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">evaluate</span>(<span class="keyword">_</span> <span class="params">expression</span>: <span class="type">ArithmeticExpression</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">   <span class="keyword">switch</span> expression &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="keyword">let</span> .number(value):</span><br><span class="line">       <span class="keyword">return</span> value</span><br><span class="line">   <span class="keyword">case</span> <span class="keyword">let</span> .addition(left, right):</span><br><span class="line">       <span class="keyword">return</span> evaluate(left) <span class="operator">+</span> evaluate(right)</span><br><span class="line">   <span class="keyword">case</span> <span class="keyword">let</span> .multiplication(left, right):</span><br><span class="line">       <span class="keyword">return</span> evaluate(left) <span class="operator">*</span> evaluate(right)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> five <span class="operator">=</span> <span class="type">ArithmeticExpression</span>.number(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">let</span> four <span class="operator">=</span> <span class="type">ArithmeticExpression</span>.number(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">let</span> sum <span class="operator">=</span> <span class="type">ArithmeticExpression</span>.addition(five, four)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (5 + 4) * 2</span></span><br><span class="line"><span class="keyword">let</span> product <span class="operator">=</span> <span class="type">ArithmeticExpression</span>.multiplication(sum, <span class="type">ArithmeticExpression</span>.number(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(evaluate(product))</span><br></pre></td></tr></table></figure><blockquote><p>其实感觉这种嵌套多层的用法可读性并不是特别好，而且在取值的时候还需要递归，通常来说，嵌套一层就够了</p></blockquote><h3 id="4-原始值"><a href="#4-原始值" class="headerlink" title="4. 原始值"></a>4. 原始值</h3><p>与C语言一样，可以为每个枚举指定值，并且可以支持更多类型（<code>Int</code>, <code>Float</code>, <code>Character</code>, <code>String</code>）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义枚举，并初始化原始值</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">ASCIIControlCharacter</span>: <span class="title class_">Character</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Tab</span> <span class="operator">=</span> <span class="string">&quot;<span class="subst">\t</span>&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">LineFeed</span> <span class="operator">=</span> <span class="string">&quot;<span class="subst">\n</span>&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">CarriageReturn</span> <span class="operator">=</span> <span class="string">&quot;<span class="subst">\r</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过两个属性获得原始值</span></span><br><span class="line"><span class="keyword">var</span> ch <span class="operator">=</span> <span class="type">ASCIIControlCharacter</span>.<span class="type">Tab</span></span><br><span class="line">ch.hashValue    <span class="comment">// 获取是否有原始值</span></span><br><span class="line">ch.rawValue     <span class="comment">// 获得原始值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 通过原始值构造枚举，如果不存在，则返回nil</span></span><br><span class="line"><span class="keyword">var</span> tab <span class="operator">=</span> <span class="type">ASCIIControlCharacter</span>.<span class="keyword">init</span>(rawValue: <span class="string">&quot;<span class="subst">\t</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 如果是原始值是整形值，后面的值默认自增1，如果不指定，则默认为空，而不是从0开始</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Planet</span>: <span class="title class_">Int</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Mercury</span> <span class="operator">=</span> <span class="number">1</span>, <span class="type">Venus</span>         <span class="comment">// Venus = 2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Neptune</span>                    <span class="comment">// Neptune = 3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 如果没有指定枚举原始值的类型，则默认为空，而不是整型</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">CompassPoint</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">North</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">South</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">East</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">West</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//swift 不会为North, South, East, West设置为0,1,2,3，并且CompassPoint没有原始值（rawValue）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. 有原始值的枚举可以通过原始值构造（构造器返回可选类型）</span></span><br><span class="line"><span class="keyword">let</span> lineFeed <span class="operator">=</span> <span class="type">ASCIIControlCharacter</span>(rawValue: <span class="string">&quot;<span class="subst">\n</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-关联值"><a href="#5-关联值" class="headerlink" title="5. 关联值"></a>5. 关联值</h3><p>上面我们说到，枚举与类和结构体类似，swift的枚举可以给不同的枚举值绑定关联值，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Barcode</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">UPCA</span>(<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>)        <span class="comment">//条形码，关联一个元组</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">QRCode</span>(<span class="type">String</span>)             <span class="comment">//二维码，关联一个字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> productBarcode <span class="operator">=</span> <span class="type">Barcode</span>.<span class="type">UPCA</span>(<span class="number">8</span>, <span class="number">85909_51226</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">// var productBarcode = .QRCode(&quot;http://www.baidu.com&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> productBarcode &#123;</span><br><span class="line"><span class="keyword">case</span> .<span class="type">UPCA</span>(<span class="keyword">let</span> a, <span class="keyword">let</span> b, <span class="keyword">let</span> c):        <span class="comment">//在枚举的时候可以取得关联值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;barcode: <span class="subst">\(a)</span><span class="subst">\(b)</span><span class="subst">\(c)</span>&quot;</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .<span class="type">QRCode</span>(value):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;qrcode: <span class="subst">\(value)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面这种轻量的数据，在OC上一般我们可能需要定义两个类实现，而swift的枚举可以轻松的处理这种轻量数据，而减少项目中类的定义和维护</p><h2 id="十、类与结构体"><a href="#十、类与结构体" class="headerlink" title="十、类与结构体"></a>十、类与结构体</h2><p>先来看看结构体和类的一些差异</p><ul><li>类是引用类型，结构体为值类型</li><li>类使用引用计数管理内存，结构体分配在栈上，有系统管理内存，变量传递的时候，结构体整个拷贝，而类默认只传递引用地址（有些类会进行一些额外的拷贝，详见<a href="">深拷贝和浅拷贝</a>）</li><li>结构体不支持继承，类支持继承</li><li>与ObjC不同，swift的结构体可以定义方法</li><li>类支持运行时类型检查，而结构体不支持</li><li>类有构造器和析构器，结构体只有构造器</li><li>常量结构体的成员的值不能改变</li></ul><blockquote><p>实际上，在 Swift 中，所有的基本类型:整数(Integer)、浮 点数(floating-point)、布尔值(Boolean)、字符串(string)、数组(array)和字典(dictionary)，都是 值类型，并且在底层都是以结构体的形式所实现。</p></blockquote><h3 id="1-结构体，类定义"><a href="#1-结构体，类定义" class="headerlink" title="1. 结构体，类定义"></a>1. 结构体，类定义</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> y: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">printPoint</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;x=<span class="subst">\(x)</span>, y=<span class="subst">\(y)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> someObj <span class="operator">=</span> <span class="type">NSObject</span>()          <span class="comment">// 定义属性，并初始化</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>                  <span class="comment">// 定义属性，并指定类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">name</span>: <span class="type">String</span>) &#123;              <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> name</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">hello</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello <span class="subst">\(<span class="keyword">self</span>.name)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;dealloc&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swift中，许多基本类型如<code>String</code>, <code>Array</code>和<code>Dictionary</code>都是用结构体实现的，意味着在传递的时候都会进行值拷贝，当然swift也对这些类型进行了优化，只有在需要的时候进行拷贝</p><h3 id="2-静态属性，静态方法"><a href="#2-静态属性，静态方法" class="headerlink" title="2. 静态属性，静态方法"></a>2. 静态属性，静态方法</h3><p>swift中有两个<code>static</code>和<code>class</code>声明静态变量或方法，其中<code>class</code>只能用在类的方法和计算属性上，其他的都使用<code>static</code>，由于类支持继承，所以使用<code>class</code>声明的静态方法可以被继承，而static声明的静态方法不能被继承</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> instanceCount: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span>       <span class="comment">// 声明一个类属性</span></span><br><span class="line">    <span class="keyword">init</span> () &#123;</span><br><span class="line">        <span class="type">Person</span>.instanceCount <span class="operator">+=</span> <span class="number">1</span>           <span class="comment">// 通过类名引用类属性，子类可以访问基类的类属性</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用class声明的静态方法可以被继承</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">func</span> <span class="title class_">overrideableComputedTypeProperty</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(Person.instanceCount)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用static声明的静态方法不能被继承</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">printInstanceCount</span>() &#123;      <span class="comment">// 声明一个静态方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(Person.instanceCount)</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类和结构体的声明和用法与类类似，使用<code>static</code></p><blockquote><p>注意：<code>class</code>只能用来声明计算属性和方法，不能用来声明普通属性</p></blockquote><h3 id="3-构造器和析构器"><a href="#3-构造器和析构器" class="headerlink" title="3. 构造器和析构器"></a>3. 构造器和析构器</h3><p>swift的构造器规则和限制比较多，关于构造器可以参见：<a href="/2016-07-07/swift-constructor/">这里</a></p><p>析构器相当于objc里面的<code>dealloc</code>方法，做一些需要手动释放资源的操作，析构器与构造器不同，没有参数，定义的时候不需要括号，类在释放的之前会自动调用父类的析构器，不需要主动调用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;释放额外的资源，如通知&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-类型判断"><a href="#4-类型判断" class="headerlink" title="4. 类型判断"></a>4. 类型判断</h3><p>在objc中，我们通常使用<code>isKindOfClass</code>, <code>isMemberOfClass</code>, <code>isSubclassOfClass</code>等方法进行类型判断，swift使用<code>is</code>和<code>as</code>判断类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>: <span class="title class_">Parent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s <span class="operator">=</span> <span class="type">Son</span>()</span><br><span class="line"><span class="comment">// isKindOfClass</span></span><br><span class="line">son <span class="keyword">is</span> <span class="type">Son</span>                <span class="comment">// true</span></span><br><span class="line">son <span class="keyword">is</span> <span class="type">Parent</span>             <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isMemberOfClass</span></span><br><span class="line">son.dynamicType <span class="operator">==</span> <span class="type">Son</span>.<span class="keyword">self</span>         <span class="comment">// true</span></span><br><span class="line">son.dynamicType <span class="operator">==</span> <span class="type">Parent</span>.<span class="keyword">self</span>      <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// isSubclassOfClass 暂时没找到相关的API</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;TODO: swift动态性，反射</p><h3 id="5-弱引用"><a href="#5-弱引用" class="headerlink" title="5. 弱引用"></a>5. 弱引用</h3><p>与<code>ObjC</code>一样，swift的内存管理也使用引用计数管理，也使用weak声明弱引用变量</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> person: <span class="type">Person</span>? <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-访问级别"><a href="#6-访问级别" class="headerlink" title="6. 访问级别"></a>6. 访问级别</h3><p>在swift中，framework和bundle都被处理成模块</p><pre><code>* public：公开，可以被外部访问* internal：内部，在模块（framework）内部使用，模块外访问不到* private：只能在当前源文件中使用</code></pre><p>swift默认的访问级别为Internal，使用的时候只需要在类&#x2F;变量&#x2F;函数前面加上访问级别即可</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">public</span> <span class="title class_">var</span> <span class="title class_">peopleCount</span>: <span class="title class_">Int</span> = 0    // 类变量，通过<span class="title class_">class</span>声明，类变量使用时使用类名引用</span><br><span class="line">    <span class="title class_">internal</span> <span class="title class_">var</span> <span class="title class_">age</span>: <span class="title class_">Int</span>                    // 实例变量</span><br><span class="line">    <span class="title class_">var</span> <span class="title class_">name</span>: <span class="title class_">String</span>                         // 不声明，则为<span class="title class_">internal</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.age <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="type">Person</span>.peopleCount<span class="operator">++</span>              <span class="comment">// 使用静态变量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">sayHello</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外层访问级别的必须是比成员更高，下面会报警告</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;                      <span class="comment">// 默认为internal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> age: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span>         <span class="comment">// 为public，比类访问级别高，会有警告</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> gender: <span class="type">Int</span> <span class="operator">=</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">sayHello</span>() &#123;</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的访问级别要比参数(或泛型类型)的访问级别低，否则会报警告</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">PrivatePerson</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> age: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> gender: <span class="type">Int</span> <span class="operator">=</span> <span class="number">10</span>          <span class="comment">// 报警告</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">sayHello</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">func</span> <span class="title function_">test</span>(<span class="params">person</span>:<span class="type">PrivatePerson</span>) &#123;    <span class="comment">//报编译错误：这里参数访问级别为private，所以函数访问级别不能高于private，则只能为private</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>枚举类型</code>的成员访问级别跟随枚举类型，嵌套类型默认最高访问级别为internal（外层为public，内层默认为internal）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CompassPoint</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">North</span>            <span class="comment">// 四个枚举成员访问级别都为public</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">South</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">East</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">West</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类访问级别不能高于父类（包括泛型类型），协议继承也同理，子协议访问级别不能高于父协议</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Son</span>: <span class="title class_">Parent</span> &#123;       <span class="comment">// 报编译错误：Son访问级别必须低于Parent，应该为internal或private</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>元组</code>的访问级别为元组内所有类型访问级别中最低级的</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Son</span>: <span class="title class_">Parent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeClass</span> &#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">let</span> sometuple <span class="operator">=</span> (<span class="type">Son</span>(), <span class="type">Parent</span>())  <span class="comment">// 报编译错误：sometuple的访问级别不能高于成员类型的访问级别，由于Son为private，故sometuple必须为private</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量的访问级别不能高于类型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">PrivateClass</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeClass</span> &#123;</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">var</span> value: <span class="type">PrivateClass</span>        <span class="comment">// 报编译错误：变量value的访问级别不能高于其类型，故value必须声明为private</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性的 Setter 访问级别不能高于 Getter访问级别</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SomeClass</span> &#123;</span><br><span class="line">    <span class="keyword">private(set)</span> <span class="keyword">var</span> num <span class="operator">=</span> <span class="number">1_000_000</span>      <span class="comment">// 声明属性num，getter访问级别没有声明，默认为Internal，setter访问级别为private</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">internal(set)</span> <span class="keyword">var</span> name <span class="operator">=</span> <span class="string">&quot;bomo&quot;</span>   <span class="comment">// 报编译错误：属性name的setter访问级别为internal，高于getter访问级别private</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>协议与类的访问级别关系</p><ul><li>协议中所有必须实现的成员的访问级别和协议本身的访问级别相同</li><li>其子协议的访问级别不高于父协议（与类相同）</li><li>如果类实现了协议，那类的访问级别必须低于或等于协议的访问级别</li></ul><p>类型别名访问级别与类型的关系</p><ul><li>类型别名的访问级别不能高于原类型的访问级别；</li></ul><p>函数构造函数默认访问级别为internal，如果需要给其他模块使用，需显式声明为public</p><blockquote><p>注意：swift的访问级别是作用于文件（private）和模块的（internal）的，而不只是类，所以只要在同一个文件内，private访问级别在不同类也可以直接访问，例如我们可以通过子类包装父类的方法以改变访问级别</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">someMethod</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title class_">B</span>: <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">internal</span> <span class="keyword">func</span> <span class="title function_">someMethod</span>() &#123;   <span class="comment">// 在同一个文件，改变someMethod的访问级别</span></span><br><span class="line">        <span class="keyword">super</span>.someMethod()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-属性"><a href="#7-属性" class="headerlink" title="7. 属性"></a>7. 属性</h3><ul><li>使用关键字<code>lazy</code>声明一个懒加载 <strong>变量</strong> 属性，当属性被使用的时候（get），才会进行初始化</li><li>set方法的访问级别必须必get方法低</li><li>声明属性的时候可以使用<code>private(set)</code>和<code>internal(set)</code>改变set方法默认的访问级别</li><li>每个实例都有一个self属性，指向实例自身，通常在属性与函数参数有冲突的时候使用</li><li>对于常量属性，不许在定义它的类的构造器中赋值，不能再子类赋值</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataImporter</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataManager</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 只有第一次调用importer的get方法的时候才会初始化</span></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">var</span> importer <span class="operator">=</span> <span class="type">DataImporter</span>()</span><br><span class="line">    <span class="keyword">var</span> data <span class="operator">=</span> [<span class="type">String</span>]()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> width: <span class="type">Double</span> <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> height: <span class="type">Double</span> <span class="operator">=</span> <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 声明get方法和set方法的访问级别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">private(set)</span> <span class="keyword">var</span> weight: <span class="type">Double</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 自定义get/set方法</span></span><br><span class="line">    <span class="keyword">var</span> square: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">self</span>.width <span class="operator">+</span> <span class="keyword">self</span>.height)<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//set &#123;                 //如果不指定名称，默认通过newValue使用新值</span></span><br><span class="line">        <span class="keyword">set</span>(newValue) &#123;</span><br><span class="line">            <span class="keyword">self</span>.width <span class="operator">=</span> newValue<span class="operator">/</span><span class="number">2.0</span>;</span><br><span class="line">            <span class="keyword">self</span>.height <span class="operator">=</span> newValue<span class="operator">/</span><span class="number">2.0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 只读属性，可以省略get，直接使用一个花括号</span></span><br><span class="line">    <span class="keyword">var</span> perimeter: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">self</span>.width <span class="operator">+</span> <span class="keyword">self</span>.height) <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 属性监视器，在初始化的时候不会触发</span></span><br><span class="line">    <span class="keyword">var</span> someInt: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">willSet</span> &#123;       <span class="comment">//用法与set一样如果不指定名称，默认通过newValue使用旧值</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;set方法之前触发&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;        <span class="comment">//用法与set一样如果不指定名称，默认通过oldValue使用旧值</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;set方法完成后触发，可以在这里设置obj的值覆盖set方法设置的值&quot;</span>)</span><br><span class="line">            <span class="keyword">self</span>.someInt <span class="operator">=</span> <span class="number">0</span>      <span class="comment">// someInt的值永远为0，在监视器修改属性的值不会导致观察器被再次调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用lazy声明的属性不是线程安全的，在多线程情况下可能产生多份，需要自己控制</p></blockquote><p>对于结构体，与OC不同，swift的结构体允许直接对属性的子属性直接修改，而不需要取出重新赋值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">someVideoMode.resolution.width <span class="operator">=</span> <span class="number">1280</span></span><br></pre></td></tr></table></figure><p>在oc上需要这样做</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var resolution = someVideoMode.resolution</span><br><span class="line">resolution.width = <span class="number">1024</span></span><br><span class="line">someVideoMode.resolution = resolution</span><br></pre></td></tr></table></figure><h3 id="8-继承"><a href="#8-继承" class="headerlink" title="8. 继承"></a>8. 继承</h3><p>我们都知道，在oc里所有的类都继承自NSObject&#x2F;NSProxy，而在swift中的类并不是从一个通用的基类继承的，所有没有继承其他父类的类都称为<code>基类</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">var</span> gender <span class="operator">=</span> <span class="string">&quot;unknown&quot;</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">gender</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.gender <span class="operator">=</span> gender</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">func</span> <span class="title function_">hello</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;parent hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>: <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="comment">// 重写可以改变父类方法的访问级别</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">override</span> <span class="keyword">func</span> <span class="title function_">hello</span>() &#123;                  <span class="comment">// 重写父类方法必须加上override，否则会报编译错误</span></span><br><span class="line">        <span class="comment">//super.hello()                               // 可以通过super访问父类成员，包括附属脚本</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;son hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重写属性的时候，如果属性提供了setter方法，则必须为提供getter方法<br>如果重写了属性的setter方法，则不能重写willSet和didSet方法<br>如果重写了willSet和didSet方法，则不能重写get和set方法</p></blockquote><p>父类的属性，方法，类方法，附属脚本，包括类本身都可以被子类继承和重写，可以通过<code>final</code>约束限制子类的重写（<code>final class</code>, <code>final var</code>, <code>final func</code>, <code>final class func</code>, 以及 <code>final subscript</code>）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">var</span> gender <span class="operator">=</span> <span class="string">&quot;unknown&quot;</span>        <span class="comment">// 不允许被子类重写</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span>                    <span class="comment">// 可以被子类重写</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="params">gender</span>: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.gender <span class="operator">=</span> gender</span><br><span class="line">        <span class="keyword">self</span>.name <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">func</span> <span class="title function_">hello</span>() &#123;                <span class="comment">// 不允许被重写</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;parent hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>swift编译器在识别数组类型的时候，如果数组元素有相同的基类，会被自动识别出来</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span>: <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>: <span class="title class_">Person</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> t1 <span class="operator">=</span> <span class="type">Teacher</span>()</span><br><span class="line"><span class="keyword">let</span> t2 <span class="operator">=</span> <span class="type">Teacher</span>()</span><br><span class="line"><span class="keyword">let</span> s1 <span class="operator">=</span> <span class="type">Student</span>()</span><br><span class="line"><span class="keyword">let</span> s2 <span class="operator">=</span> <span class="type">Student</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people <span class="operator">=</span> [t1, t2, s1, s2]      <span class="comment">// people会被识别为[Person]类型</span></span><br></pre></td></tr></table></figure><p>向下类型转换<code>as!</code>, <code>as?</code>，<code>as!</code>返回非可选类型，如果类型不匹配会报错，<code>as?</code>返回可选类型，如果类型不匹配返回nil</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> person <span class="keyword">in</span> people &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> teacher <span class="operator">=</span> person <span class="keyword">as?</span> <span class="type">Teacher</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;teacher&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> student <span class="operator">=</span> person <span class="keyword">as?</span> <span class="type">Student</span> &#123;</span><br><span class="line">        println(<span class="string">&quot;student&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-附属脚本subscript"><a href="#9-附属脚本subscript" class="headerlink" title="9. 附属脚本subscript"></a>9. 附属脚本subscript</h3><p>附属脚本可以让类、结构体、枚举对象快捷访问集合或序列，而不需要调用使用对象内的实例变量引用，看下面实例</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DailyMeal</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">MealTime</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Breakfast</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Lunch</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Dinner</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> meals: [<span class="type">MealTime</span> : <span class="type">String</span>] <span class="operator">=</span> [:]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要使用DailyMeal的meals对象的，需要这么用</span></span><br><span class="line"><span class="keyword">var</span> dailyMeal <span class="operator">=</span> <span class="type">DailyMeal</span>()</span><br><span class="line">dailyMeal.meals[<span class="type">MealTime</span>.<span class="type">Breakfast</span>] <span class="operator">=</span> <span class="string">&quot;Toast&quot;</span></span><br></pre></td></tr></table></figure><p>使用附属脚本可以直接通过类对象索引访问meals的值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DailyMeal</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">MealTime</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Breakfast</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Lunch</span></span><br><span class="line">        <span class="keyword">case</span> <span class="type">Dinner</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> meals: [<span class="type">MealTime</span> : <span class="type">String</span>] <span class="operator">=</span> [:]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义附加脚本，类似属性</span></span><br><span class="line">    <span class="keyword">subscript</span>(<span class="params">realMealTime</span>: <span class="type">MealTime</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value <span class="operator">=</span> meals[realMealTime] &#123;</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span>(newValue) &#123;</span><br><span class="line">            meals[realMealTime] <span class="operator">=</span> newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dailyMeal <span class="operator">=</span> <span class="type">DailyMeal</span>()</span><br><span class="line">dailyMeal[.<span class="type">Breakfast</span>] <span class="operator">=</span> <span class="string">&quot;sala&quot;</span></span><br><span class="line"><span class="built_in">print</span>(dailyMeal[.<span class="type">Breakfast</span>])</span><br></pre></td></tr></table></figure><p>附加脚本还支持多个参数</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Matrix</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> rows: <span class="type">Int</span>, columns: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> grid: [<span class="type">Double</span>]</span><br><span class="line">    <span class="keyword">init</span>(<span class="params">rows</span>: <span class="type">Int</span>, <span class="params">columns</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.rows <span class="operator">=</span> rows</span><br><span class="line">        <span class="keyword">self</span>.columns <span class="operator">=</span> columns</span><br><span class="line">        grid <span class="operator">=</span> <span class="type">Array</span>(count: rows <span class="operator">*</span> columns, repeatedValue: <span class="number">0.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">indexIsValidForRow</span>(<span class="params">row</span>: <span class="type">Int</span>, <span class="params">column</span>: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> row <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> row <span class="operator">&lt;</span> rows <span class="operator">&amp;&amp;</span> column <span class="operator">&gt;=</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> column <span class="operator">&lt;</span> columns</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">subscript</span>(<span class="params">row</span>: <span class="type">Int</span>, <span class="params">column</span>: <span class="type">Int</span>) -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="built_in">assert</span>(indexIsValidForRow(row, column: column), <span class="string">&quot;Index out of range&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> grid[(row <span class="operator">*</span> columns) <span class="operator">+</span> column]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">assert</span>(indexIsValidForRow(row, column: column), <span class="string">&quot;Index out of range&quot;</span>)</span><br><span class="line">            grid[(row <span class="operator">*</span> columns) <span class="operator">+</span> column] <span class="operator">=</span> newValue</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> matrix <span class="operator">=</span> <span class="type">Matrix</span>(rows: <span class="number">2</span>, columns: <span class="number">2</span>)</span><br><span class="line">matrix[<span class="number">0</span>, <span class="number">1</span>] <span class="operator">=</span> <span class="number">1.5</span></span><br><span class="line">matrix[<span class="number">1</span>, <span class="number">0</span>] <span class="operator">=</span> <span class="number">3.2</span></span><br></pre></td></tr></table></figure><p>附加脚本类似属性，拥有get&#x2F;set方法，支持只读和读写两种方式，附加脚本也支持多个参数，附属脚本可以屏蔽外部对内部对象的直接访问，隐藏对象内部的细节，提高封装度，使得代码更加健壮和简洁</p><h3 id="10-类型嵌套"><a href="#10-类型嵌套" class="headerlink" title="10. 类型嵌套"></a>10. 类型嵌套</h3><p>与枚举一样，结构体和类都支持类型嵌套，可以在类里面再定义类&#x2F;结构体&#x2F;枚举</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span> &#123;</span><br><span class="line">    <span class="comment">// 类里面嵌套定义枚举</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Suit</span>: <span class="title class_">Character</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Spades</span> <span class="operator">=</span> <span class="string">&quot;♠&quot;</span>, <span class="type">Hearts</span> <span class="operator">=</span> <span class="string">&quot;♡&quot;</span>, <span class="type">Diamonds</span> <span class="operator">=</span> <span class="string">&quot;♢&quot;</span>, <span class="type">Clubs</span> <span class="operator">=</span> <span class="string">&quot;♣&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 枚举里面嵌套定义结构体</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">Values</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> first: <span class="type">Int</span>, second: <span class="type">Int</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类里面嵌套定义结构体</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> x: <span class="type">Int</span></span><br><span class="line">        <span class="keyword">let</span> y: <span class="type">Int</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类里面嵌套定义类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">InnerClass</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> name: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">var</span> id: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候像属性一样引用</span></span><br><span class="line"><span class="keyword">let</span> values <span class="operator">=</span> <span class="type">SomeClass</span>.<span class="type">Suit</span>.<span class="type">Values</span>(first: <span class="number">1</span>, second: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="11-类型别名"><a href="#11-类型别名" class="headerlink" title="11. 类型别名"></a>11. 类型别名</h3><p>swift类型别名与c语言中取别名有点像，通过关键字<code>typealias</code>声明别名</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">MyInt</span> <span class="operator">=</span> <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">add</span>(<span class="params">a</span>: <span class="type">MyInt</span>, <span class="params">b</span>: <span class="type">MyInt</span>) -&gt; <span class="type">MyInt</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="operator">+</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通常在容易出现命名冲突的情况下会考虑使用类型别名</p></blockquote><h2 id="十一、扩展Extension"><a href="#十一、扩展Extension" class="headerlink" title="十一、扩展Extension"></a>十一、扩展Extension</h2><p>与oc一样，扩展就是对已有的类添加新的功能，与oc的category类似，swift的扩展可以：</p><ul><li>提供新的构造器（需要符合构造器的基本规则）</li><li>添加实例计算型属性和类计算性属性</li><li>添加实例方法和类方法</li><li>添加附加脚本</li><li>添加新的嵌套类型</li><li>使一个已有类型符合某个接口</li></ul><p>swift扩展不可以：</p><ul><li>不可以添加存储属性</li><li>不可以向已有属性添加属性观测器(willSet, didSet)</li></ul><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">hello</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义扩展</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fly</span>() &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;fly&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p <span class="operator">=</span> <span class="type">Person</span>()</span><br><span class="line">p.fly()</span><br></pre></td></tr></table></figure><p>扩展也可以作用在结构体和枚举上</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> width: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">let</span> height: <span class="type">Double</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> perimeter: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> <span class="operator">*</span> (<span class="keyword">self</span>.width <span class="operator">+</span> <span class="keyword">self</span>.height)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rect <span class="operator">=</span> <span class="type">Rectangle</span>(width: <span class="number">100</span>, height: <span class="number">200</span>)</span><br><span class="line"><span class="built_in">print</span>(rect.perimeter)</span><br></pre></td></tr></table></figure><p>扩展内的成员定义与类类似，这里不再说明</p><h3 id="扩展属性"><a href="#扩展属性" class="headerlink" title="扩展属性"></a>扩展属性</h3><p>由于swift不能扩展新的属性，有时候我们希望给类添加属性，在oc里可以用关联属性新增存储属性，在swift也可以，需要引入<code>ObjectiveC</code>模块</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ObjectiveC</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span> <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">var</span> xoTag: <span class="type">UInt</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">extension</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> z: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="operator">&amp;</span>xoTag) <span class="keyword">as!</span> <span class="type">Int</span></span><br><span class="line">        &#125; <span class="keyword">set</span>(newValue) &#123;</span><br><span class="line">            objc_setAssociatedObject(<span class="keyword">self</span>, <span class="operator">&amp;</span>xoTag, newValue, objc_AssociationPolicy.<span class="type">OBJC_ASSOCIATION_ASSIGN</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十二、协议Protocal"><a href="#十二、协议Protocal" class="headerlink" title="十二、协议Protocal"></a>十二、协议Protocal</h2><p>swift的协议在oc的基础上加了更多的支持，可以支持属性，方法，附加脚本，操作符等，协议的属性必须为变量<code>var</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">SomeProtocol</span> &#123;</span><br><span class="line">    <span class="comment">// 属性要求</span></span><br><span class="line">    <span class="keyword">var</span> mustBeSettable: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="comment">// 只读属性</span></span><br><span class="line">    <span class="keyword">var</span> doesNotNeedToBeSettable: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">// 只读静态属性</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> staticProperty: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">func</span> <span class="title function_">hello</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-mutating"><a href="#1-mutating" class="headerlink" title="1. mutating"></a>1. mutating</h3><p>在结构体&#x2F;枚举中的值类型变量，默认情况下不能对其进行修改，编译不通过，如果需要修改值类型的属性，需要在方法声明前加上<code>mutating</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">moveToPoint</span>(<span class="params">point</span>: <span class="type">Point</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.x <span class="operator">=</span> point.x        <span class="comment">// 报错：不能对值类型的属性进行修改</span></span><br><span class="line">        <span class="keyword">self</span>.y <span class="operator">=</span> point.y        <span class="comment">// 报错：不能对值类型的属性进行修改</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">moveToPoint2</span>(<span class="params">point</span>: <span class="type">Point</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.x <span class="operator">=</span> point.x        <span class="comment">// 编译通过</span></span><br><span class="line">        <span class="keyword">self</span>.y <span class="operator">=</span> point.y        <span class="comment">// 编译通过</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可变方法还可以对self进行修改，这个方法和moveToPoint2效果相同</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">moveToPoint3</span>(<span class="params">x</span> <span class="params">deltaX</span>: <span class="type">Int</span>, <span class="params">y</span> <span class="params">deltaY</span>: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span> <span class="operator">=</span> <span class="type">Point</span>(x:deltaX, y:deltaY)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可变方法还可以修改枚举值自身的值</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">TriStateSwitch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Off</span>, <span class="type">Low</span>, <span class="type">High</span></span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">next</span>() &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> .<span class="type">Off</span>:</span><br><span class="line">                <span class="keyword">self</span> <span class="operator">=</span> .<span class="type">Low</span></span><br><span class="line">            <span class="keyword">case</span> .<span class="type">Low</span>:</span><br><span class="line">                <span class="keyword">self</span> <span class="operator">=</span> .<span class="type">High</span></span><br><span class="line">            <span class="keyword">case</span> .<span class="type">High</span>:</span><br><span class="line">                <span class="keyword">self</span> <span class="operator">=</span> .<span class="type">Off</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特别是在定义Protocal的时候，需要考虑到协议可能作用于枚举或结构体，在定义协议的时候需要在方法前加上<code>mutating</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">SomeProtocol</span> &#123;</span><br><span class="line">    <span class="keyword">mutating</span> <span class="keyword">func</span> <span class="title function_">moveToPoint</span>(<span class="params">point</span>: <span class="type">Point</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-协议类型"><a href="#2-协议类型" class="headerlink" title="2. 协议类型"></a>2. 协议类型</h3><p>协议虽然没有任何实现，但可以当做类型来用，与oc的protocal类似，用协议类型表示实现了该协议的对象，与oc的<code>id&lt;SomeProtocol&gt;</code>一样</p><h3 id="3-协议组合"><a href="#3-协议组合" class="headerlink" title="3. 协议组合"></a>3. 协议组合</h3><p>有时候我们需要表示一个对象实现多个协议，可以使用协议组合来表示，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">SwimProtocal</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">fly</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protocol</span> <span class="title class_">WalkProtocal</span> &#123;</span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">walk</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">through</span>(<span class="params">animal</span>: <span class="keyword">protocol</span><span class="operator">&lt;</span><span class="type">WalkProtocal</span>, <span class="type">SwimProtocal</span><span class="operator">&gt;</span>) &#123;</span><br><span class="line">    animal.walk()</span><br><span class="line">    animal.fly()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-自身类型"><a href="#4-自身类型" class="headerlink" title="4. 自身类型"></a>4. 自身类型</h3><p>有时候我们需要表示实现协议的类型，可以使用<code>Self</code>代替，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">CompareProtocal</span> &#123;</span><br><span class="line">    <span class="comment">// Self表示实现协议自己的类型本身</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">compare</span>(<span class="params">other</span>: <span class="keyword">Self</span>) -&gt; <span class="type">Bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Product</span>: <span class="title class_">CompareProtocal</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> id: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">compare</span>(<span class="params">other</span>: <span class="type">Product</span>) -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.id <span class="operator">==</span> other.id</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-objc协议"><a href="#5-objc协议" class="headerlink" title="5. @objc协议"></a>5. @objc协议</h3><p>swift声明的协议是不能直接被oc的代码桥接调用的，如果需要，需要在声明前加上<code>@objc</code>，使用<code>@objc</code>声明的协议不能被用于结构体和枚举</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">protocol</span> <span class="title class_">HasArea</span> &#123;            <span class="comment">// 协议可以被桥接到oc中使用</span></span><br><span class="line">    <span class="keyword">var</span> area: <span class="type">Double</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-Optional要求"><a href="#6-Optional要求" class="headerlink" title="6. Optional要求"></a>6. Optional要求</h3><p>在oc中的protocal可以定义可选方法，在swift默认不支持可选方法，swift只有在添加了<code>@objc</code>声明的协议才能定义可选方法，在定义前添加<code>optional</code>声明</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">@objc</span> <span class="keyword">protocol</span> <span class="title class_">HasArea</span> &#123;</span><br><span class="line">    <span class="keyword">optional</span> <span class="keyword">var</span> area: <span class="type">Double</span> &#123; <span class="keyword">get</span> &#125;     <span class="comment">// 定义可选属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十三、错误"><a href="#十三、错误" class="headerlink" title="十三、错误"></a>十三、错误</h2><p>与其他高级语言异常处理有点类似，swift引入了错误的机制，可以在出现异常的地方抛出错误，错误对象继承自Error，抛出的错误函数会立即返回，并将错误丢给调用函数的函数处理，如果一个函数可能抛出错误，那么必须在函数定义的时候进行声明，如下</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义错误类型</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">OperationError</span>: <span class="title class_">Error</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">DivideByZero</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Other</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义可能抛出异常的函数，在函数声明的返回值前面加上throws</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">divide</span>(<span class="params">a</span>: <span class="type">Int</span>, <span class="params">b</span>: <span class="type">Int</span>) <span class="keyword">throws</span> -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="type">OperationError</span>.<span class="type">DivideByZero</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Float</span>(a) <span class="operator">/</span> <span class="type">Float</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用可能出错的函数（调用出必须加上try）</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result <span class="operator">=</span> <span class="keyword">try</span> divide(a: <span class="number">10</span>, b: <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="type">OperationError</span>.<span class="type">DivideByZero</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="comment">//其他错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果错误是一个对象，而不是枚举，可以用let绑定到变量上</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> divide(a: <span class="number">10</span>, b: <span class="number">0</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> err <span class="keyword">as</span> <span class="type">SomeErrorType</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(err.message)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;other error&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不处理错误的话可以使用<code>try?</code>，使用try?关键字的方法会被包装到一个可选类型中，如果发生错误，则会返回nil，如下面序列化的例子</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">serialize</span>(<span class="params">obj</span>: <span class="type">AnyObject</span>) -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> jsonString <span class="operator">=</span> <span class="keyword">try?</span> someSerializeFuncMayThrowError(obj) <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(jsonString)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fail&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>try?配合guard let一起使用效果更好</p></blockquote><h2 id="十四、断言"><a href="#十四、断言" class="headerlink" title="十四、断言"></a>十四、断言</h2><p>断言可以让我们在调试时候更好的发现问题，排查错误，几乎所有的高级语言都支持断言，swift也如此，断言的代码在release的时候回被忽略，不会影响发布程序的性能，只会在调试的时候生效</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果age小于0，程序会停止，并输出错误信息</span></span><br><span class="line"><span class="built_in">assert</span>(age <span class="operator">&gt;=</span> <span class="number">0</span>, <span class="string">&quot;A person&#x27;s age cannot be less than zero&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="十五、泛型"><a href="#十五、泛型" class="headerlink" title="十五、泛型"></a>十五、泛型</h2><p>关于泛型的介绍，这里不进行说明，swift的泛型是我认为最酷的特性之一，当然其他语言也有，可以让类或函数更大程度的重用，swift的泛型与其他语言的泛型有点类似</p><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p>在类或函数声明的时候，指定一个泛型类型参数（通常为T）然后使用的时候直接把T当成类型使用</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型函数定义</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">swapTwoValues</span>&lt;<span class="type">T</span>&gt;(<span class="params">inout</span> <span class="params">a</span>: <span class="type">T</span>, <span class="params">inout</span> <span class="params">b</span>: <span class="type">T</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> temporaryA <span class="operator">=</span> a</span><br><span class="line">    a <span class="operator">=</span> b</span><br><span class="line">    b <span class="operator">=</span> temporaryA</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Result</span>&lt;<span class="title class_">T</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> code: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> errorMessage: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">T</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个泛型类型参数</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Result</span>&lt;<span class="title class_">T</span>, <span class="title class_">TK</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> code: <span class="type">Int</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> errorMessage: <span class="type">String</span>?</span><br><span class="line">    <span class="keyword">var</span> data: <span class="type">T</span>?</span><br><span class="line">    <span class="keyword">var</span> subData: <span class="type">TK</span>?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-泛型约束"><a href="#2-泛型约束" class="headerlink" title="2. 泛型约束"></a>2. 泛型约束</h3><p>我们还可以对泛型进行约束，泛型类型参数只能是某些类型的子类，或实现了某些协议</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">findIndex</span>&lt;<span class="type">T</span>&gt;(<span class="params">array</span>: [<span class="type">T</span>], <span class="params">valueToFind</span>: <span class="type">T</span>) -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, value) <span class="keyword">in</span> array.enumerate() &#123;</span><br><span class="line">        <span class="keyword">if</span> value <span class="operator">==</span> valueToFind &#123;</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面函数会报编译错误，因为在swift里，并不是所有的类都能用<code>==</code>操作符比较，只有实现了Equatable协议的类才能用<code>==</code>操作符，修改为</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">findIndex</span>&lt;<span class="type">T</span>: <span class="type">Equatable</span>&gt;(<span class="params">array</span>: [<span class="type">T</span>], <span class="params">valueToFind</span>: <span class="type">T</span>) -&gt; <span class="type">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">for</span> (index, value) <span class="keyword">in</span> array.enumerate() &#123;</span><br><span class="line">        <span class="keyword">if</span> value <span class="operator">==</span> valueToFind &#123;</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-多泛型类型参数"><a href="#3-多泛型类型参数" class="headerlink" title="3. 多泛型类型参数"></a>3. 多泛型类型参数</h3><p>有时候我们需要用多个协议进行约束，可以使用下面方式（类与函数的使用方式类似）</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">someFunc</span>&lt;<span class="type">T</span> : protocol&lt;<span class="type">StudyProtocal</span>, <span class="type">RunProtocal</span>&gt;<span class="operator">&gt;</span>(arg: <span class="type">T</span>) &#123;</span><br><span class="line">    <span class="comment">// do stuff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果约束既有类又有协议的话可以使用<code>where</code>添加限制条件</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">someFunc</span>&lt;<span class="type">T</span>, <span class="type">TK</span> where <span class="type">T</span>:<span class="type">Student</span>, <span class="type">T</span>: <span class="type">StudyProtocal</span>&gt;(<span class="params">t</span>: <span class="type">T</span>, <span class="params">tk</span>: <span class="type">TK</span>) &#123;</span><br><span class="line">    <span class="comment">// do stuff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-泛型是不可变的"><a href="#4-泛型是不可变的" class="headerlink" title="4. 泛型是不可变的"></a>4. 泛型是不可变的</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dog1 <span class="operator">=</span> <span class="type">SomeClass</span>&lt;<span class="type">Parent</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> dog2 <span class="operator">=</span> <span class="type">SomeClass</span>&lt;<span class="type">Son</span>&gt;()</span><br><span class="line"></span><br><span class="line">dog1 <span class="operator">=</span> dog2       <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><blockquote><p>关于可变，不可变，逆变，协变参考这里：<a href="http://swift.gg/2015/12/24/friday-qa-2015-11-20-covariance-and-contravariance/">http://swift.gg/2015/12/24/friday-qa-2015-11-20-covariance-and-contravariance/</a></p></blockquote><h3 id="5-泛型协议"><a href="#5-泛型协议" class="headerlink" title="5. 泛型协议"></a>5. 泛型协议</h3><p>swift的协议不支持泛型，不能像类一样定义泛型，而是通过类型参数定义泛型</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protocol</span> <span class="title class_">GenericProtocol</span> &#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">T1</span></span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">T2</span></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">someFunc</span>(<span class="params">t2</span>: <span class="type">T2</span>) -&gt; <span class="type">T1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SomeClass</span>&lt;<span class="title class_">T</span>&gt; : <span class="title class_">GenericProtocol</span> &#123;</span><br><span class="line">    <span class="comment">// 设置泛型类型</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T1</span> <span class="operator">=</span> <span class="type">String</span></span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">T2</span> <span class="operator">=</span> <span class="type">T</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">func</span> <span class="title function_">someFunc</span>(<span class="params">t2</span>: <span class="type">T2</span>) -&gt; <span class="type">T1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十六、运算符重载"><a href="#十六、运算符重载" class="headerlink" title="十六、运算符重载"></a>十六、运算符重载</h2><p>与其他高级语言的一样，swift也提供了运算符重载的功能，我们可以自定义运算符的实现，运算符通常分为三种类型</p><ul><li>单目运算符：<code>&lt;运算符&gt;&lt;操作数&gt;</code>或<code>&lt;操作数&gt;&lt;运算符&gt;</code>，如<code>!a</code></li><li>双目运算符：<code>&lt;操作数&gt;&lt;运算符&gt;&lt;操作数&gt;</code>，如：<code>1 + 1</code></li><li>三元运算符：<code>&lt;操作数&gt;&lt;运算符&gt;&lt;操作数&gt;&lt;运算符&gt;&lt;操作数&gt;</code>，如：<code>a ? b : c</code></li></ul><p>swift的运算符重载</p><ul><li>支持自定义运算符<code>/</code>, <code>=</code>, <code>-</code>, <code>+</code>, <code>*</code>, <code>%</code>, <code>&lt;</code>, <code>&gt;</code>, <code>!</code>, <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>.</code>, <code>~</code>的任意组合。可以脑洞大开创造颜文字。</li><li>不能对默认的赋值运算符<code>=</code>进行重载。组合赋值运算符可以被重载，如<code>==</code>，<code>!==!</code></li><li>无法对三元运算符<code>a ? b : c</code>进行重载</li><li>运算符声明和定义只能定义在全局作用域，不能定义在类&#x2F;结构体&#x2F;枚举内</li><li></li></ul><h3 id="1-前缀，中缀，后缀运算符"><a href="#1-前缀，中缀，后缀运算符" class="headerlink" title="1. 前缀，中缀，后缀运算符"></a>1. 前缀，中缀，后缀运算符</h3><ul><li>前缀<code>prefix</code>：默认的有-，!，~等</li><li>中缀<code>infix</code>：默认的有+，*，&#x3D;&#x3D;等</li><li>后缀<code>postfix</code>：默认的有：++，–等</li></ul><h3 id="1-1-声明运算符"><a href="#1-1-声明运算符" class="headerlink" title="1.1 声明运算符"></a>1.1 声明运算符</h3><p>如果实现不存在的运算符需要添加运算符声明（系统的提供的，可以不需要声明），声明必须放在全局作用域</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前缀运算符</span></span><br><span class="line"><span class="keyword">prefix</span> <span class="keyword">operator</span> <span class="title">+++</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中缀运算符（二元运算符）</span></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">+++</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后缀运算符</span></span><br><span class="line"><span class="keyword">postfix</span> <span class="keyword">operator</span> <span class="title">+++</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-实现上面三个运算符"><a href="#1-2-实现上面三个运算符" class="headerlink" title="1.2 实现上面三个运算符"></a>1.2 实现上面三个运算符</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义Point结构体</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> x: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> y: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重载操作符要放在全局作用域</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">+++</span> (<span class="params">left</span>: <span class="type">Point</span>, <span class="params">right</span>: <span class="type">Point</span>) -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Point</span>(x: left.x <span class="operator">+</span> right.x, y: left.y <span class="operator">+</span> right.y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要修改操作数，需要添加inout关键字</span></span><br><span class="line"><span class="keyword">prefix</span> <span class="keyword">func</span> <span class="title function_">+++</span> (<span class="params">inout</span> <span class="params">left</span>: <span class="type">Point</span>) &#123;</span><br><span class="line">    left.x <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">    left.y <span class="operator">+=</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">postfix</span> <span class="keyword">func</span> <span class="title function_">---</span> (<span class="params">right</span>: <span class="type">Point</span>) -&gt; <span class="type">Point</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Point</span>(x: right.x <span class="operator">-</span> <span class="number">1</span>, y: right.y <span class="operator">-</span> <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-使用"><a href="#1-3-使用" class="headerlink" title="1.3 使用"></a>1.3 使用</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 <span class="operator">=</span> <span class="type">Point</span>(x: <span class="number">12</span>, y: <span class="number">21</span>)</span><br><span class="line"><span class="keyword">var</span> p2 <span class="operator">=</span> <span class="type">Point</span>(x: <span class="number">12</span>, y: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 <span class="operator">=</span> p1<span class="operator">+++</span>p2            <span class="comment">// p3.x = 24, p3.y = 23</span></span><br><span class="line"><span class="operator">+++</span>p1                       <span class="comment">// p1.x = 13, p1.y = 3</span></span><br><span class="line">p1<span class="operator">---</span>                       <span class="comment">// p1.x = 12, p1.y = 2</span></span><br></pre></td></tr></table></figure><h3 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2. 优先级"></a>2. 优先级</h3><p>这个很好理解，就是优先级高的运算符先执行，声明运算符的时候可以指明优先级</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">^</span> &#123;</span><br><span class="line">    associativity left        <span class="comment">// 结合性，后面说</span></span><br><span class="line">    precedence <span class="number">140</span>            <span class="comment">// 指定运算符优先级</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.apple.com/reference/swift/1851035-swift_standard_library_operators">这里</a>可以查看默认运算符的优先级</p><h3 id="3-结合性"><a href="#3-结合性" class="headerlink" title="3. 结合性"></a>3. 结合性</h3><p>运算符还可以定义结合性，对于双目运算符，当优先级一样的时候，可以定义运算符优先进行左结合还是右结合，运算符的结合性有下面三种</p><ul><li>left：左结合</li><li>right：右结合</li><li>none：无</li></ul><p>结合性设置为<code>left</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个双目操作符</span></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">^</span> &#123;</span><br><span class="line">    associativity left         <span class="comment">// 结合性</span></span><br><span class="line">    precedence <span class="number">140</span>             <span class="comment">// 指定运算符优先级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">^</span> (<span class="params">left</span>: <span class="type">Int</span>, <span class="params">right</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>(pow(<span class="type">Double</span>(left), <span class="type">Double</span>(right)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">2</span> <span class="operator">^</span> <span class="number">2</span> <span class="operator">^</span> <span class="number">2</span> <span class="operator">^</span> <span class="number">2</span>           <span class="comment">// 执行结果为256</span></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">let</span> aa <span class="operator">=</span> ((<span class="number">2</span> <span class="operator">^</span> <span class="number">2</span>) <span class="operator">^</span> <span class="number">2</span>) <span class="operator">^</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>如果我们设置结合性为<code>right</code></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个双目操作符</span></span><br><span class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> <span class="title">^</span> &#123;</span><br><span class="line">    associativity right         <span class="comment">// 结合性</span></span><br><span class="line">    precedence <span class="number">140</span>              <span class="comment">// 指定运算符优先级</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">^</span> (<span class="params">left</span>: <span class="type">Int</span>, <span class="params">right</span>: <span class="type">Int</span>) -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Int</span>(pow(<span class="type">Double</span>(left), <span class="type">Double</span>(right)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a <span class="operator">=</span> <span class="number">2</span> <span class="operator">^</span> <span class="number">2</span> <span class="operator">^</span> <span class="number">2</span> <span class="operator">^</span> <span class="number">2</span>           <span class="comment">// 执行结果为65536</span></span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">let</span> aa <span class="operator">=</span> <span class="number">2</span> <span class="operator">^</span> (<span class="number">2</span> <span class="operator">^</span> (<span class="number">2</span> <span class="operator">^</span> <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>如果结合性设置为<code>none</code>，则会报错，无法判断</p><h2 id="十七、命名空间"><a href="#十七、命名空间" class="headerlink" title="十七、命名空间"></a>十七、命名空间</h2><p>在很多语言里面，都有命名空间的概念，可以分离代码，防止命名冲突，而swift也有类似命名空间的概念，通过访问级别实现命名空间<br>&#x2F;&#x2F;TODO</p><h2 id="十八、参考链接"><a href="#十八、参考链接" class="headerlink" title="十八、参考链接"></a>十八、参考链接</h2><ul><li><a href="https://en.wikipedia.org/wiki/Operator_associativity#Right-associativity_of_assignment_operators">运算符结合性</a></li><li><a href="https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html">Swift高级运算符</a></li></ul><h2 id="十九、总结"><a href="#十九、总结" class="headerlink" title="十九、总结"></a>十九、总结</h2><p>总的来说，swift还是比较装逼的，整个很多新名词，新概念，例如，指定构造器，便利构造器，构造器代理，但其实这些东西在别的语言基本上有，没那么复杂，另外swift的关键字太多了，有些可有可无，是不是苹果看到什么好的就想往swift里面塞还是怎么着，另外感觉苹果还是太装逼了，例如do-while非要偏偏要搞成repeat-while啥的，个人感觉编程语言应该是轻便，简单，当然，并且能满足所有需求的，反正，没什么特别的好感</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《编写高质量代码 改善Python程序的91个建议》学习笔记</title>
      <link href="/2016-06-28/Python-tip/"/>
      <url>/2016-06-28/Python-tip/</url>
      
        <content type="html"><![CDATA[<p>最近在读《编写高质量代码 改善Python程序的91个建议》，在这里总结阅读中遇到的一些要点，和一些自己的理解</p><span id="more"></span><h2 id="0-the-Zen-of-Python"><a href="#0-the-Zen-of-Python" class="headerlink" title="0. the Zen of Python"></a>0. the Zen of Python</h2><p>先来看看一个有趣的彩蛋，python的设计之禅，我们在Python控制台输入<code>import this</code>，可以看到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> this</span><br><span class="line">The Zen of Python, by Tim Peters          <span class="comment"># Python的禅宗</span></span><br><span class="line"></span><br><span class="line">Beautiful <span class="keyword">is</span> better than ugly.            <span class="comment"># 优美胜于丑陋</span></span><br><span class="line">Explicit <span class="keyword">is</span> better than implicit.         <span class="comment"># 明了胜于晦涩</span></span><br><span class="line">Simple <span class="keyword">is</span> better than <span class="built_in">complex</span>.            <span class="comment"># 简单胜于复杂</span></span><br><span class="line">Complex <span class="keyword">is</span> better than complicated.       <span class="comment"># 复杂胜于凌乱</span></span><br><span class="line">Flat <span class="keyword">is</span> better than nested.               <span class="comment"># 扁平胜于嵌套</span></span><br><span class="line">Sparse <span class="keyword">is</span> better than dense.              <span class="comment"># 间隔胜于紧凑</span></span><br><span class="line">Readability counts.                       <span class="comment"># 可读性很重要</span></span><br><span class="line">Special cases aren<span class="string">&#x27;t special enough to break the rules.                     # 特例并不违背规则</span></span><br><span class="line"><span class="string">Although practicality beats purity.                                         # 虽然实用性比完美</span></span><br><span class="line"><span class="string">Errors should never pass silently.</span></span><br><span class="line"><span class="string">Unless explicitly silenced.                                                 # 错误不应该被忽略，除非你明确要这样做</span></span><br><span class="line"><span class="string">In the face of ambiguity, refuse the temptation to guess.                   # 在模棱两可的时候，拒绝胡乱猜测</span></span><br><span class="line"><span class="string">There should be one-- and preferably only one --obvious way to do it.       # 应该有一个，最后只有一个方式可以做到</span></span><br><span class="line"><span class="string">Although that way may not be obvious at first unless you&#x27;</span>re Dutch.          <span class="comment"># 虽然好的方式可能不容易做到（但我心向之），除非你是Python之父</span></span><br><span class="line">Now <span class="keyword">is</span> better than never.                           <span class="comment"># 立行胜于不做</span></span><br><span class="line">Although never <span class="keyword">is</span> often better than *right* now.    <span class="comment"># 不做胜于鲁莽</span></span><br><span class="line">If the implementation <span class="keyword">is</span> hard to explain, it<span class="string">&#x27;s a bad idea.</span></span><br><span class="line"><span class="string">If the implementation is easy to explain, it may be a good idea.    # 如果你无法向别人描述好你的实现，那这一定是个糟糕的想法，如果能，或许是个好想法</span></span><br><span class="line"><span class="string">Namespaces are one honking great idea -- let&#x27;</span>s do more of those!    <span class="comment"># 命名空间是一个很棒的理念，我们尽量多利用它</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>python的设计哲学可以归纳为两个单词：简单，易懂</p><h2 id="1-理解Pythonic"><a href="#1-理解Pythonic" class="headerlink" title="1. 理解Pythonic"></a>1. 理解Pythonic</h2><p>什么是Pythonic，最直观的解释就是Python风格的代码，那什么是Python风格的代码<br>看看下面这个C语言的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mylist_length; i++) &#123;</span><br><span class="line">   do_something(mylist[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果直接写成Python的风格，是这样的（Python的<code>for</code>语句只用于迭代，故我们把上面的写法转成<code>while</code>语句）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; mylist_length:</span><br><span class="line">   do_something(mylist[i])</span><br><span class="line">   i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>上面代码可以正确运行，但是并不被人为是Python的风格，我们稍作修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mylist_length):</span><br><span class="line">   do_something(mylist[i])</span><br></pre></td></tr></table></figure><p>上面代码比之前的<code>while</code>更为简洁，但还不是完全的Pythonic风格，下面方式才是完全的Pythonic风格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> mylist:</span><br><span class="line">   do_something(element)</span><br></pre></td></tr></table></figure><p>从上面例子中我们可以看出，Pythonic的代码，变量更少，更为短小，更为简单，读起来更为清晰</p><p>另外一个经常被提到的问题是，如何直接修改引用的变量（指针变量），我们再来看另外一个C语言的例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span>* a, <span class="type">float</span>* b)</span> &#123;</span><br><span class="line">    *a = <span class="number">3</span>;</span><br><span class="line">    *b = <span class="number">5.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> alpha;</span><br><span class="line"><span class="type">int</span> beta;</span><br><span class="line">foo(&amp;alpha, &amp;beta);</span><br></pre></td></tr></table></figure><p>上面代码不能很好的描述其功能，并且晦涩难懂，在Python不鼓励这种写法，也不支持这种写法，Python使用输入输出的方式传值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">foo</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>, <span class="number">5.5</span></span><br><span class="line"></span><br><span class="line">alpha, beta = foo()</span><br></pre></td></tr></table></figure><p>再看一个例子，在C语言中交换两个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">1</span>, b = <span class="number">2</span></span><br><span class="line"><span class="type">int</span> tmp = a</span><br><span class="line">a = b</span><br><span class="line">b = tmp</span><br></pre></td></tr></table></figure><p>Python中交换两个数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">b</span> = <span class="selector-tag">b</span>, a</span><br></pre></td></tr></table></figure><p>Pythonic是一种代码风格，以简单，易懂为宗旨</p><p>参考：<a href="http://blog.startifact.com/posts/older/what-is-pythonic.html">http://blog.startifact.com/posts/older/what-is-pythonic.html</a></p><h2 id="2-编写Pythonic代码"><a href="#2-编写Pythonic代码" class="headerlink" title="2. 编写Pythonic代码"></a>2. 编写Pythonic代码</h2><ul><li><p>变量名不与内建方法重名，如dict, list, element等，</p></li><li><p>由于Python使用缩进识别代码块，所以在代码里面，多余的空格和Tab尽量不要随便使用，<strong>不推荐</strong>对齐等号的方式（下面方式）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a        = <span class="number">10</span>                 <span class="comment"># some comment</span></span><br><span class="line">some_str = <span class="string">&#x27;hello world&#x27;</span>      <span class="comment"># some comment</span></span><br></pre></td></tr></table></figure></li><li><p>注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下面第一种比较第二行更好</span></span><br><span class="line">x = x + <span class="number">1</span>         <span class="comment"># increase x by 1</span></span><br><span class="line">x = x + <span class="number">1</span> <span class="comment"># increase x by 1</span></span><br></pre></td></tr></table></figure></li><li><p>函数详细注释</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;summary desctiption</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    more detail comments for the function</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        a: some comment for parameter a</span></span><br><span class="line"><span class="string">        b: some comment for parameter b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        return type, return value desctiption</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        IOError: IOError exception may raise in the function</span></span><br><span class="line"><span class="string">        IndexError: IndexError exception may raise in the function</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>函数设计</p><ul><li>函数长度不宜过长，通常以小于一屏为准</li><li>函数嵌套不宜过多，通常保持在3层以内（for, if-else等）</li><li>参数不宜过多</li><li>函数只做一件事</li><li>使用异常抛出错误，而不通过返回值错误</li><li>尽量不要在函数中定义可变对象，除非特殊需要</li></ul></li></ul><h2 id="3-常量"><a href="#3-常量" class="headerlink" title="3. 常量"></a>3. 常量</h2><p>Python没有提供常量的支持，通常使用命名规范识别常量，所有字母大写，如<code>MAX_OVERFLOW</code>，当然，这只是一种约定，实际上与变量一样，是可以改变的</p><p>还有一种方式来模拟实现常量的功能，使用类来限制对属性的赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">_const</span>:</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ConstError</span>(<span class="title class_ inherited__">TypeError</span>): <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ConstCaseError</span>(<span class="title class_ inherited__">ConstError</span>): <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setattr__</span>(<span class="params">self, name, value</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__dict__.has_key(name):</span><br><span class="line">            <span class="keyword">raise</span> self.ConstError, <span class="string">&#x27;Can\&#x27;t change const.%s&#x27;</span> % name</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.isupper():</span><br><span class="line">            <span class="keyword">raise</span> self.ConstCaseError, <span class="string">&#x27;const name &quot;%s&quot; is not all uppercase&#x27;</span> % name</span><br><span class="line">        self.__dict__[name] = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> const</span><br><span class="line">const.COMPANY = <span class="string">&#x27;Google&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-使用断言"><a href="#4-使用断言" class="headerlink" title="4. 使用断言"></a>4. 使用断言</h2><p>断言在其他很多语言都存在，可以方便用于测试和调试程序，使用断言格式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> expression, some_error_info</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如下</span></span><br><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">assert</span> x == y, <span class="string">&#x27;not equals&#x27;</span></span><br></pre></td></tr></table></figure><p>上面例子相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">__debug__</span> <span class="keyword">and</span> <span class="keyword">not</span> x == y:</span><br><span class="line">    <span class="keyword">raise</span> AssertionError(<span class="string">&#x27;not equals&#x27;</span>)</span><br></pre></td></tr></table></figure><p>断言会带来一定的性能消耗，由于Python没有严格意义上的Debug和Release模式，故它并不优化字节码，只是忽略相关代码的执行，在执行脚本的时候添加<code>-O</code>参数可以禁用断言</p><h2 id="5-使用枚举"><a href="#5-使用枚举" class="headerlink" title="5. 使用枚举"></a>5. 使用枚举</h2><p>Python本身并不提供枚举的功能，关于Python是否要加入枚举功能，也引发了很多讨论，最后被组织拒绝了(在Python3.4以后又支持了😅)，但是因为Python强大的动态性，我们可以通过很多方式实现枚举的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Seasons</span>:</span><br><span class="line">    Spring = <span class="number">0</span></span><br><span class="line">    Summer = <span class="number">1</span></span><br><span class="line">    Autumn = <span class="number">2</span></span><br><span class="line">    Winter = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简写为</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Seasons</span>:</span><br><span class="line">    Spring, Summer, Autumn, Winter = <span class="built_in">range</span>(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用函数动态构造一个对象</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enum</span>(<span class="params">*posarg, **kvarg</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">type</span>(<span class="string">&#x27;Enum&#x27;</span>, (<span class="built_in">object</span>,), <span class="built_in">dict</span>(<span class="built_in">zip</span>(posarg, xrange(<span class="built_in">len</span>(posarg)))))</span><br><span class="line"></span><br><span class="line">season = enum(<span class="string">&#x27;spring&#x27;</span>, <span class="string">&#x27;summer&#x27;</span>, <span class="string">&#x27;autumn&#x27;</span>, <span class="string">&#x27;winter&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> season.summer</span><br></pre></td></tr></table></figure><p>我们还可以用第三方模块实现枚举的功能<code>flufl.enum</code><br>&#x2F;&#x2F;TODO:</p><h2 id="6-不推荐使用type-来判断类型相等"><a href="#6-不推荐使用type-来判断类型相等" class="headerlink" title="6. 不推荐使用type()来判断类型相等"></a>6. 不推荐使用type()来判断类型相等</h2><ul><li><p>在经典类中，所有对象执行type()都相等</p></li><li><p>在新式类中，type()无法用于判断子类与父类的关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>(son) <span class="keyword">is</span> <span class="built_in">type</span>(parent)       <span class="comment"># 正常逻辑应该为True，但是结果是False</span></span><br></pre></td></tr></table></figure></li><li><p>通常使用isinstance()方法判断类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">isinstance</span>(son, Son)                  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(son, (Son, <span class="built_in">list</span>, <span class="built_in">tuple</span>))   <span class="comment"># True</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="7-注意运算时候的精度问题"><a href="#7-注意运算时候的精度问题" class="headerlink" title="7. 注意运算时候的精度问题"></a>7. 注意运算时候的精度问题</h2><p>Python与C语言一样，计算精度取决于计算的值的类型，如两个整数相除，结果是整数，如果需要获得高精度的结果，需要转换为float类型在进行计算，在python3里，这个问题不存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> a / b             <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">print</span> a / <span class="built_in">float</span>(b)      <span class="comment"># 0.33333333</span></span><br></pre></td></tr></table></figure><h2 id="8-尽量避免浮点类型的比较"><a href="#8-尽量避免浮点类型的比较" class="headerlink" title="8. 尽量避免浮点类型的比较"></a>8. 尽量避免浮点类型的比较</h2><p>浮点类型，在计算过程中可能有精度损失的风险，应尽量避免，如果可以转成整形再计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">1.0</span></span><br><span class="line"><span class="keyword">while</span> i != <span class="number">1.5</span>:</span><br><span class="line">    i += <span class="number">0.1</span></span><br><span class="line">    <span class="built_in">print</span> i</span><br></pre></td></tr></table></figure><p>上面语句会一直在while循环，而不能正确跳出</p><h2 id="9-避免使用eval"><a href="#9-避免使用eval" class="headerlink" title="9. 避免使用eval"></a>9. 避免使用eval</h2><p>用过JS或PHP的可能都知道eval函数，可以直接执行字符串脚本，然而，字符串有注入的风险，有安全性问题，如果需要，可以考虑使用<code>ast.literal_eval</code>代替</p><p>&#x2F;&#x2F;TODO</p><h2 id="10-使用enumerate枚举索引和变量"><a href="#10-使用enumerate枚举索引和变量" class="headerlink" title="10. 使用enumerate枚举索引和变量"></a>10. 使用enumerate枚举索引和变量</h2><p>Python语言很灵活，同一功能有多种实现方式，如索引列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">    do_something(i, index)</span><br><span class="line">    index+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l))</span><br><span class="line">    do_something(l[index], index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三</span></span><br><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(l)), l)</span><br><span class="line">    do_something(i, index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式四</span></span><br><span class="line"><span class="keyword">for</span> index, i <span class="keyword">in</span> <span class="built_in">enumerate</span>(l):</span><br><span class="line">    do_something(i, index)</span><br></pre></td></tr></table></figure><p>推荐使用方式四，支持延迟加载，不会一次枚举出所有的值，性能最优，书写也简洁，enumerate不适用于dict对象</p><h2 id="11-分清is和-x3D-x3D"><a href="#11-分清is和-x3D-x3D" class="headerlink" title="11. 分清is和&#x3D;&#x3D;"></a>11. 分清is和&#x3D;&#x3D;</h2><p>is：比较内存地址，而不是内容，<code>a is b</code>相当于<code>id(a) == id(b)</code><br>&#x3D;&#x3D;：<code>a == b</code>相当于<code>a.__eq__(b)</code>，可以重载<code>__eq__</code>方法实现等于的逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, pid, name</span>):</span><br><span class="line">        self.pid = pid</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__eq__</span>(<span class="params">self, p</span>):</span><br><span class="line">        <span class="keyword">return</span> self.pid == p.pid</span><br><span class="line"></span><br><span class="line">p1 = person(<span class="number">1</span>, <span class="string">&#x27;bomo&#x27;</span>)</span><br><span class="line">p2 = person(<span class="number">1</span>, <span class="string">&#x27;tobi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> p1 == p2    <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h2 id="12-尽量使用Unicode编码"><a href="#12-尽量使用Unicode编码" class="headerlink" title="12. 尽量使用Unicode编码"></a>12. 尽量使用Unicode编码</h2><p>python编码见<a href="/2016-06-24/python-encode-decode/">这里</a></p><h2 id="13-多使用模块和包来管理文件"><a href="#13-多使用模块和包来管理文件" class="headerlink" title="13. 多使用模块和包来管理文件"></a>13. 多使用模块和包来管理文件</h2><ul><li>尽量减少使用<code>from pack import *</code>这种导入方式，会污染命名空间，容易导致命名冲突，如果冲突，则后导入的覆盖先导入的</li><li>TODO: absolute import, relative import</li></ul><h2 id="14-Python不支持-i语法"><a href="#14-Python不支持-i语法" class="headerlink" title="14. Python不支持++i语法"></a>14. Python不支持++i语法</h2><p>Python会把<code>++i</code>解释为<code>+(+i)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = -<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span> ++a</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="built_in">print</span> +(+a)</span><br><span class="line"><span class="comment"># 输出-1</span></span><br></pre></td></tr></table></figure><h2 id="15-使用with自动释放资源"><a href="#15-使用with自动释放资源" class="headerlink" title="15. 使用with自动释放资源"></a>15. 使用with自动释放资源</h2><p>用过C#的朋友应该都知道using，可以在代码块结束后自动释放资源，而Python也支持类似的语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>像上面这种IO资源，在使用完成后需要开发者自己调用释放资源的方法，通常也会使用<code>try-except-finall</code>y来保证释放资源，而通常情况下，释放资源很容易遗漏，可以使用<code>with</code>语法，把相关操作放在代码块中，当离开代码块的时候会自动调用释放资源的方法，这样就可以避免人为的遗漏问题，上面代码可以写成下面方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="built_in">print</span> f.read()</span><br><span class="line"><span class="comment"># 离开代码块后，f会自动释放</span></span><br></pre></td></tr></table></figure><p>无论代码块中是否会抛出异常，离开代码块的时候，资源f都会被释放，其实只需要实现<code>__enter__</code>和<code>__exit__</code>方法就能支持这种行为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyObj</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;open&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;enter&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;close&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> exc_type <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;没有异常&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;出现异常&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">obj = MyObj()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> obj.<span class="built_in">open</span>() <span class="keyword">as</span> v:</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">str</span>(v) + <span class="string">&#x27;执行一些操作&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># open</span></span><br><span class="line"><span class="comment"># enter</span></span><br><span class="line"><span class="comment"># Nonedo something</span></span><br><span class="line"><span class="comment"># close</span></span><br><span class="line"><span class="comment"># 没有异常</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬取拉勾网数据</title>
      <link href="/2016-06-27/python-lagou/"/>
      <url>/2016-06-27/python-lagou/</url>
      
        <content type="html"><![CDATA[<p>学了一段时间的Python，于是抓了一些数据练手，选择了拉勾网上的招聘数据，抓取完成后进行分析，先来看看结果</p><ul><li>拉勾网只能取到最近一个月的职位，所以以下统计也只有一个月的数据</li><li>只爬取了技术分类下的数据，如下图</li><li>总数据有<strong>34122</strong>条，由于拉勾的接口最多只能取到5000条数据，所以其中Android分类和前端开发分类数据可能不全，而其他关键字的结果都不到5000条，数据基本完整</li></ul><span id="more"></span><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-28/15206332.jpg" alt=" "></p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-28/25682703.jpg" alt=" "></p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-28/42481592.jpg" alt=" "></p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-28/26443417.jpg" alt=" "></p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-28/39682738.jpg" alt=" "></p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-28/45082468.jpg" alt=" "></p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-28/99594263.jpg" alt=" "></p><ul><li>可以看到北京薪资最高，</li><li>安卓需求是iOS的一倍</li><li>最热门的技术岗位都在前端</li><li>需求最大的职位是PHP</li><li>CTO，CDN，自然语言处理，GO语言，Hadoop，全栈工程师薪资最高</li></ul><p>当然上面只是拉勾网一家最近一个月的数据</p><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><h3 id="1-要点"><a href="#1-要点" class="headerlink" title="1. 要点"></a>1. 要点</h3><ul><li>urllib2库的简单使用</li><li>sqlite的使用（入库，统计）</li><li>flask的简单使用</li><li>chartkick的简单使用</li></ul><p>分析拉勾网的数据，可以看到，在切换页的时候，数据列表使用ajax异步加载，通过Chrome查看网络数据可以看到数据通过一个Post请求，获取</p><p><code>http://www.lagou.com/jobs/positionAjax.json?px=default&amp;city=全国&amp;needAddtionalResult=false</code><br>Post数据：<code>first=false&amp;pn=12&amp;kd=iOS</code><br>pn为页数，kd为搜索关键字</p><h2 id="二、爬取数据"><a href="#二、爬取数据" class="headerlink" title="二、爬取数据"></a>二、爬取数据</h2><p>由于拉勾网的接口没有加密，也没有做限制，爬取的代码很简单，cookie都不用，下面是爬取的代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__download</span>(<span class="params">url, data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;下载url内容&quot;&quot;&quot;</span></span><br><span class="line">    request = urllib2.Request(url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = urllib2.urlopen(request, data)</span><br><span class="line">        <span class="keyword">return</span> response.read()</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">str</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    city = <span class="string">u&#x27;广州&#x27;</span></span><br><span class="line">    page_num = <span class="number">10</span></span><br><span class="line">    keyword = <span class="string">u&#x27;iOS&#x27;</span></span><br><span class="line">    url = <span class="string">u&#x27;http://www.lagou.com/jobs/positionAjax.json?px=default&amp;city=%s&amp;needAddtionalResult=false&#x27;</span> % (city,)</span><br><span class="line">    data = <span class="string">u&#x27;first=false&amp;pn=%d&amp;kd=%s&#x27;</span> % (page_num, keyword)</span><br><span class="line">    html = __download(url, data)</span><br><span class="line">    <span class="keyword">if</span> html:</span><br><span class="line">        <span class="comment"># 分析入库</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logger.error(<span class="string">&#x27;download fail&#x27;</span>)</span><br></pre></td></tr></table></figure><p>爬完之后，我们可以进行分析入库，这里会用到json库</p><p>拉勾网的薪资信息使用<code>**k-**k</code>, <code>**k以上</code>, <code>**k以下</code>表示，这里我把他们解析成三个字段：<code>minsalary</code>, <code>midsalary</code>, <code>maxsalary</code>，mid取最大或最小或中间值，<code>minsalary</code>和<code>maxsalary</code>可空，在统计的时候使用的是<code>midsalary</code>作为薪资值</p><p>最后我们得到数据库</p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-28/61622306.jpg" alt=" "></p><h2 id="三、分析"><a href="#三、分析" class="headerlink" title="三、分析"></a>三、分析</h2><p>接下来是通过浏览器展现图表，这里使用的Flask框架作为Web服务器</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br><span class="line">sudo pip install flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图表库</span></span><br><span class="line">sudo pip install chartkick</span><br></pre></td></tr></table></figure><p>新建一个模块<code>ChartServer.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面获取数据或工具类</span></span><br><span class="line"><span class="keyword">from</span> Analyzer <span class="keyword">import</span> Analyzer</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造一个Flask对象，即服务器对象</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.jinja_env.add_extension(<span class="string">&quot;chartkick.ext.charts&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义路由</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/percent/&lt;count&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/percent/&lt;city&gt;/&lt;count&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">job_percent_for_city</span>(<span class="params">city=<span class="literal">None</span>, count=<span class="number">0</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 职位的数量排行</span></span><br><span class="line"><span class="string">    :param count: 结果数</span></span><br><span class="line"><span class="string">    :param city: 关键字</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从数据库中读取数据</span></span><br><span class="line">    analyzer = Analyzer()</span><br><span class="line">    data = analyzer.key_persent(count=count, city=city)</span><br><span class="line">    <span class="comment"># 有序字典</span></span><br><span class="line">    data = collections.OrderedDict(<span class="built_in">sorted</span>(data.items(),key = <span class="keyword">lambda</span> t:t[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line">    data = json.dumps(data, encoding=<span class="string">&#x27;utf-8&#x27;</span>,indent=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    subtitle = <span class="string">u&#x27;全国&#x27;</span> <span class="keyword">if</span> city <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">else</span> city</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 传递参数给模板，并渲染</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, data=data, title=<span class="string">u&#x27;职位的数量排行&#x27;</span>, subtitle=subtitle)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 运行服务器</span></span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure><p>模板定义，模板的路径为<code>/templates/index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;jquery.min.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;chartkick.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;highcharts.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;% line_chart data with library=&#123;&quot;title&quot;:&#123;&quot;text&quot;: title&#125;, &quot;subtitle&quot;: &#123;&quot;text&quot;: subtitle&#125;&#125; %&#125;</span><br><span class="line">&#123;% pie_chart data with library=&#123;&quot;title&quot;:&#123;&quot;text&quot;: title&#125;, &quot;subtitle&quot;: &#123;&quot;text&quot;: subtitle&#125;&#125; %&#125;</span><br><span class="line">&#123;% column_chart data with library=&#123;&quot;title&quot;:&#123;&quot;text&quot;: title&#125;, &quot;subtitle&quot;: &#123;&quot;text&quot;: subtitle&#125;&#125; %&#125;</span><br><span class="line">&#123;% area_chart data with library=&#123;&quot;title&quot;:&#123;&quot;text&quot;: title&#125;, &quot;subtitle&quot;: &#123;&quot;text&quot;: subtitle&#125;&#125; %&#125;</span><br></pre></td></tr></table></figure><p>这里使用的几个js文件引用的是本地文件<code>/static/jquery.min.js</code>, <code>/static/chartkick.js</code>, <code>/static/highcharts.js</code></p><p>运行<code>ChartServer</code>模块当我们请求 <code>/percent/广州/10</code>这个url的时候，就会执行<code>job_percent_for_city</code>方法，然后返回渲染后的文本输出到浏览器</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>本文主要记录了爬取的一些要点和过程，更多细节可以到<a href="https://github.com/zhengbomo/python_practice">这里</a>直接查看代码</p><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ul><li><a href="http://docs.jinkan.org/docs/flask/">Flask的中文介绍</a></li><li><a href="http://www.361way.com/chartkick-flask/4477.html">chartkick+flask画报表</a></li><li><a href="https://github.com/mher/chartkick.py">chartkick.py项目</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python编解码</title>
      <link href="/2016-06-24/python-encode-decode/"/>
      <url>/2016-06-24/python-encode-decode/</url>
      
        <content type="html"><![CDATA[<p>python使用中文字符串的时候，经常会遇到乱码，升值是根本无法使用的问题，经常无端报错，有找不到原因，有时候使用decode或encode可以解决问题，但是并不知道为什么，今天在这里总结一下关于python编解码的一些相关要点</p><span id="more"></span><h2 id="1-python的字符串"><a href="#1-python的字符串" class="headerlink" title="1. python的字符串"></a>1. python的字符串</h2><p>python有两种类型的字符串，分别是<code>unicode</code>和<code>str</code>，我们知道，大部分其他语言的字符串都只有一种，使用同一的编码方式，为什么python要搞出两个来坑人？</p><p>先来看看声明，以便下面区别，str字符串没有前缀，unicode字符串有前缀<code>u</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">&#x27;str字符串&#x27;</span></span><br><span class="line">u = <span class="string">u&#x27;unicode字符串&#x27;</span></span><br></pre></td></tr></table></figure><p>在python中，str是字节串，而unicode才是真正意义上的字符串，str是unicode字符串经过编码后字节组成，而它们是可以互相转换的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># unicode -&gt; str</span></span><br><span class="line">s = <span class="string">u&#x27;abc中文&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(s)             <span class="comment"># &lt;type &#x27;str&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># str -&gt; unicode</span></span><br><span class="line"><span class="built_in">print</span> s.decode(<span class="string">&#x27;utf-8&#x27;</span>)   <span class="comment"># abc中文</span></span><br></pre></td></tr></table></figure><p>unicode编码是python处理字符串的中间编码，其他编码都是通过unicode进行转换的，所以为了避免混乱，这里推荐一个原则：<strong>不要对unicode使用decode，不要对str使用encode</strong></p><p>如果要把gbk编码的str转为utf16编码的str，我们需要用unicode编码做中转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s8 = <span class="string">u&#x27;abc中文&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>)   <span class="comment"># &#x27;abc\xd6\xd0\xce\xc4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转成unicode</span></span><br><span class="line">temp = s8.decode(<span class="string">&#x27;gbk&#x27;</span>)        <span class="comment"># u&#x27;abc\u4e2d\u6587&#x27;</span></span><br><span class="line"><span class="comment"># 转成str</span></span><br><span class="line">s16 = temp.encode(<span class="string">&#x27;utf-16&#x27;</span>)      <span class="comment"># &#x27;\xff\xfea\x00b\x00c\x00-N\x87e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合起来</span></span><br><span class="line">s16 = s8.decode(<span class="string">&#x27;gbk&#x27;</span>).encode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br></pre></td></tr></table></figure><p>s16使用的是<code>utf-16</code>编码，这时候我们在控制台或IDE输出一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> s16</span><br><span class="line"><span class="comment"># 输出：��abc-N�e</span></span><br></pre></td></tr></table></figure><p>我们看到了乱码，这是由于控制台或IDE的编码与字符串的编码不一致导致的，如果一致，就正常输出</p><h2 id="2-py文件编码"><a href="#2-py文件编码" class="headerlink" title="2. py文件编码"></a>2. py文件编码</h2><p>在python中，如果源文件使用了非Ascii字符，必须在文件头（前几行）声明文件编码格式，这样python解释器在解释的时候，会把相应的str字符串编码为响应的编码格式</p><p>声明py文件编码格式如下，下面四种方式可以，第一句<code>#!/usr/bin/python</code>是用来兼容linux，声明python解释器的位置，通常也加上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="comment">#coding:utf-16</span></span><br><span class="line"><span class="comment">#coding=gbk</span></span><br></pre></td></tr></table></figure><p><strong>注意上面声明的编码格式必须与文件保存的编码格式一致，否则会读取失败或出现乱码</strong><br>文件头声明的编码是给解释器看的，它会把文件中的字符串用响应的格式进行编码</p><p>test.py（文件编码为GBK，py编码声明为GBK）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=gbk</span></span><br><span class="line"></span><br><span class="line">u = <span class="string">u&#x27;abc中文&#x27;</span></span><br><span class="line">s = <span class="string">&#x27;abc中文&#x27;</span></span><br><span class="line"><span class="built_in">print</span> u                     <span class="comment"># abc中文</span></span><br><span class="line"><span class="built_in">print</span> s                     <span class="comment"># 出现乱码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转为unicode字符串，正常</span></span><br><span class="line"><span class="built_in">print</span> s.decode(<span class="string">&#x27;gbk&#x27;</span>)       <span class="comment"># abc中文</span></span><br></pre></td></tr></table></figure><p>上面代码运行的后，直接打印s会出现乱码，因为s是用GBK进行编码的str字符串，而IDE或控制台使用的编码为UTF8，不一致，所以输出乱码，解决办法可以吧s转换为unicode字符串</p><h2 id="3-读取文件"><a href="#3-读取文件" class="headerlink" title="3. 读取文件"></a>3. 读取文件</h2><p>假定文件<code>test.txt</code>是用GBK编码存储的，我们现在读取其内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">io.<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>)</span><br><span class="line">f = io.<span class="built_in">open</span>(<span class="string">&#x27;test.txt&#x27;</span>, encoding=<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> f.read()</span><br><span class="line"><span class="comment"># 这是一个GBK编码存储的文件</span></span><br></pre></td></tr></table></figure><p>默认使用utf-8编码读取，不指定编码格式可能会读不了或出现乱码</p><h2 id="4-getdefaultencoding-x2F-setdefaultencoding"><a href="#4-getdefaultencoding-x2F-setdefaultencoding" class="headerlink" title="4. getdefaultencoding&#x2F;setdefaultencoding"></a>4. getdefaultencoding&#x2F;setdefaultencoding</h2><p>上面我们说到，把gbk编码转换成utf16的时候，我们需要借助unicode编码进行中转，其实不中转也是可以的，python会自动帮我们转</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先拿到一个gbk编码的str</span></span><br><span class="line">gbk = <span class="string">u&#x27;abc中文&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 严谨的方式是这样的</span></span><br><span class="line">gbk.decode(<span class="string">&#x27;gbk&#x27;</span>).encode(<span class="string">&#x27;utf16&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省去解码这一步（会报错）</span></span><br><span class="line">gbk.encode(<span class="string">&#x27;utf16&#x27;</span>)</span><br></pre></td></tr></table></figure><p>上面我们直接对str进行encode，python解释器会自动帮我们吧str先转成unicode，而解码方式使用系统默认的方式，一般默认的解码方式是<code>ascii</code>，可以通过<code>sys.getdefaultencoding()</code>取到，所以上面语句相当于，显然会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gbk.decode(<span class="string">&#x27;ascii&#x27;</span>).encode(<span class="string">&#x27;utf16&#x27;</span>)</span><br></pre></td></tr></table></figure><p>这个时候我们可以设置<code>defaultencoding</code>为gbk就可以了，设置之前，需要reload一下sys库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> sys.getdefaultencoding()      <span class="comment"># ascii</span></span><br><span class="line">reload(sys)</span><br><span class="line">sys.setdefaultencoding(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gbk = <span class="string">u&#x27;abc中文&#x27;</span>.encode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> gbk.encode(<span class="string">&#x27;utf16&#x27;</span>)           <span class="comment"># 输出：&#x27;\xff\xfea\x00b\x00c\x00-N\x87e&#x27;</span></span><br></pre></td></tr></table></figure><p>输出成功</p><h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ul><li>文件编码，存储时的编码格式，与python无关</li><li>python编码声明，放在py文件前几行，为了避免冲突，通常保持与文件编码一致</li><li>IDE&#x2F;控制台编码，当我们在IDE&#x2F;或控制台输出的字符串的时候，如果IDE的编码与字符串的编码不一致，也导致输出乱码</li><li>str字符串encode的时候，会自动先转为unicode，再进行编码，setdefaultencoding可以设置str字符串默认转换为unicode的编码</li><li>在python中，真正用来执行操作的还是unicode字符串，而str字符串仅用于前后的编码的转换而已</li></ul><p>为了保证编码正确，我们可以尽量把其他编码格式的str字符串根据响应的编码格式，转换为unicode字符串，再使用</p><p>在开发中我们尽量都使用UTF8作为编码的格式，包括IDE，文件编码默认都是用UTF8</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python网络请求库urllib</title>
      <link href="/2016-06-23/python-urllib2/"/>
      <url>/2016-06-23/python-urllib2/</url>
      
        <content type="html"><![CDATA[<p>Python也提供了自带网络请求库有，urllib，urllib2</p><ul><li>urllib          # 初级url请求库，提供最基本的url请求，header都不支持</li><li>urllib2         # 高级url请求库，通常与urllib库一起使用</li><li>cookielib       # Cookie容器处理</li></ul><span id="more"></span><h2 id="1-Opener"><a href="#1-Opener" class="headerlink" title="1. Opener"></a>1. Opener</h2><p>在Python中使用Opener对象来请求的url资源，使用<code>urlopen</code>方法则调用默认的opener请求</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="comment"># 使用默认的opener请求数据（Get）</span></span><br><span class="line">response = urllib2.urlopen(<span class="string">&#x27;http://python.org/&#x27;</span>)</span><br><span class="line">html = response.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以把url封装成Request对象进行请求（Get）</span></span><br><span class="line">req = urllib2.Request(<span class="string">&#x27;http://www.python.org&#x27;</span>)</span><br><span class="line">response = urllib2.urlopen(req)</span><br><span class="line">html = response.read()</span><br></pre></td></tr></table></figure><h3 id="2-Post请求"><a href="#2-Post请求" class="headerlink" title="2. Post请求"></a>2. Post请求</h3><p>上面处理的是get请求，下面看看Post请求，只要在Request对象设置了data参数或在urlopen设置了data参数，就会被识别为post请求</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">req = urllib2.Request(<span class="string">&#x27;http://www.python.org&#x27;</span>)</span><br><span class="line">values = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bomo&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">data = urllib.urlencode(values)</span><br><span class="line">req = urllib2.Request(url, data)</span><br><span class="line">response = urllib2.urlopen(req)</span><br><span class="line">html = response.read()</span><br></pre></td></tr></table></figure><h2 id="2-Header"><a href="#2-Header" class="headerlink" title="2. Header"></a>2. Header</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">req = urllib2.Request(<span class="string">&#x27;http://www.python.org&#x27;</span>)</span><br><span class="line">values = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bomo&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line">data = urllib.urlencode(values)</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)&quot;</span>&#125;</span><br><span class="line">response = urllib2.urlopen(req, headers, headers=headers data=data)</span><br><span class="line">html = response.read()</span><br></pre></td></tr></table></figure><h2 id="3-Cookie"><a href="#3-Cookie" class="headerlink" title="3. Cookie"></a>3. Cookie</h2><p>Web请求相当于一条请求管道，在请求的过程中可以有多个操作，如缓存处理，Cookie处理，URL跳转处理，代理处理等等，在urllib2中被定义为handler，cookie处理相当于opener的一个handler，一个opener可以有多个handler，通过不同的handler处理做不同的处理，如可以通过自带的方法创建handler，如有urllib2.ProxyHandler，urllib2.HTTPRedirectHandler等</p><p>Python中Cookie的基本使用如下</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;cookie.txt&#x27;</span></span><br><span class="line"><span class="comment"># 构造一个Cookie容器来保存Cookie</span></span><br><span class="line">cookie = cookielib.LWPCookieJar(filename)</span><br><span class="line"><span class="comment"># 利用urllib2库的HTTPCookieProcessor对象来创建cookie处理器</span></span><br><span class="line">handler = urllib2.HTTPCookieProcessor(cookie)</span><br><span class="line"><span class="comment"># 通过handler来构建opener</span></span><br><span class="line">opener = urllib2.build_opener(handler)</span><br><span class="line"><span class="comment"># 有了opener就可以请求了</span></span><br><span class="line">response = opener.<span class="built_in">open</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 请求完成后，可以获取到cookie的值，这里我们保存到文件</span></span><br><span class="line">cookie.save(ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>刚刚获取到cookie并存到了文件，这时候我们直接从文件读取出cookie来使用</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">import</span> cookielib</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&#x27;cookie.txt&#x27;</span></span><br><span class="line">cookie = cookielib.LWPCookieJar(filename)</span><br><span class="line">cookie.load(<span class="string">&#x27;cookie.txt&#x27;</span>, ignore_discard=<span class="literal">True</span>, ignore_expires=<span class="literal">True</span>)</span><br><span class="line">opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))</span><br><span class="line">req = urllib2.Request(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">response = opener.<span class="built_in">open</span>(req)</span><br><span class="line"><span class="built_in">print</span> response.read()</span><br></pre></td></tr></table></figure><h2 id="4-重定向问题"><a href="#4-重定向问题" class="headerlink" title="4. 重定向问题"></a>4. 重定向问题</h2><p>默认情况下，Python请求到301&#x2F;302的结果的时候，会自动进行重定向请求，如果不需要跳转怎么办，我们可以添加一个handler，不处理重定向的操作</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedirectHandler</span>(urllib2.HTTPRedirectHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">http_error_301</span>(<span class="params">self, req, fp, code, msg, headers</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">http_error_302</span>(<span class="params">self, req, fp, code, msg, headers</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">opener = urllib2.build_opener(RedirectHandler)</span><br><span class="line">opener.<span class="built_in">open</span>(<span class="string">&#x27;http://www.google.cn&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="5-参考"><a href="#5-参考" class="headerlink" title="5. 参考"></a>5. 参考</h2><ul><li><a href="https://docs.python.org/2/library/index.html">urllib2库官方介绍</a></li><li><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/">BeautifulSoup官方介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> urllib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用sqlite</title>
      <link href="/2016-06-22/python-sqlite/"/>
      <url>/2016-06-22/python-sqlite/</url>
      
        <content type="html"><![CDATA[<p>与其他语言一样，Python也能进行数据库操作，并且在2.5版本以后，Python就内置了sqlite3，所以在使用Python的时候不需要装任何东西，可以直接使用</p><span id="more"></span><p>下面是一个最简单的操作数据库的例子</p><h2 id="1-增删改"><a href="#1-增删改" class="headerlink" title="1. 增删改"></a>1. 增删改</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="comment"># 连接数据库，在当前目录下找数据库文件，如果不能再，则会创建</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用绝对路径</span></span><br><span class="line"><span class="comment"># conn = sqlite3.connect(&#x27;/Users/bomo/Documents/Code/Python/test.db&#x27;)</span></span><br><span class="line"><span class="comment"># 连接内存数据库</span></span><br><span class="line"><span class="comment"># conn = sqlite3.connect(&quot;:memory:&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得一个游标，通过这个游标对数据库操作，使用完成后需要关闭</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一个sql语句，创建一个表</span></span><br><span class="line">sql = <span class="string">&#x27;CREATE TABLE if not exists user (id varchar(20) primary key AUTOINCREMENT, name varchar(20), age integer)&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="comment"># 增删改必须调用commit才能生效</span></span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入一条记录</span></span><br><span class="line">sql = <span class="string">&#x27;INSERT INTO user (name, age) values (\&#x27;bomo\&#x27;, 18)&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除一条记录</span></span><br><span class="line">sql = <span class="string">&#x27;DELETE FROM user WHERE name=\&#x27;bomo\&#x27;&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">conn.commit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用完成后需要关闭游标</span></span><br><span class="line">cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭连接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><blockquote><p>如果对数据库进行增删改操作的时候，需要调用<code>connection.commit()</code>方法才能生效</p></blockquote><h2 id="2-查询"><a href="#2-查询" class="headerlink" title="2. 查询"></a>2. 查询</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test.db&#x27;</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询结果集，参数为元组</span></span><br><span class="line">sql = <span class="string">&#x27;select * from user where id = ?&#x27;</span></span><br><span class="line">cursor.execute(sql, (<span class="string">&#x27;1&#x27;</span>,))</span><br><span class="line">values = cursor.fetchall()    <span class="comment"># 获取所有的行记录，得到一个list，list元素为tuple</span></span><br><span class="line"><span class="built_in">print</span> values</span><br><span class="line"><span class="comment"># 输出：[(1, u&#x27;bomo&#x27;, 18), (2, u&#x27;tobi&#x27;, 6)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询单个结果</span></span><br><span class="line">sql = <span class="string">&#x27;select count(*) from user&#x27;</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line">result = cursor.fetchone()    <span class="comment"># 得到一个元组</span></span><br><span class="line"><span class="built_in">print</span> result</span><br><span class="line"><span class="comment"># 输出：(2,)</span></span><br><span class="line"></span><br><span class="line">cursor.close()</span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h3 id="3-row-factory"><a href="#3-row-factory" class="headerlink" title="3. row_factory"></a>3. row_factory</h3><p>上面查询结果可以看到，输出结果为元组，只包含值信心，我们可以通过row_factory配置更丰富的结果集，python的sqlite自带<code>sqlite.Row</code>工厂可以生成可以通过索引和列名访问值的结果集，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">connection = sqlite3.connect(<span class="string">&#x27;spider.db&#x27;</span>)</span><br><span class="line"><span class="comment"># 查询结果集使用Row构造, sqlite.Row提供了基于索引和列名索引的方式</span></span><br><span class="line">connection.row_factory = sqlite3.Row</span><br><span class="line">cu = connection.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询多行</span></span><br><span class="line">cu.execute(<span class="string">&#x27;select * from user limit 1&#x27;</span>)</span><br><span class="line">rows = cu.fetchall()</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    <span class="comment"># print type(row)   # &lt;type &#x27;sqlite3.Row&#x27;&gt;</span></span><br><span class="line">    <span class="comment"># 取得所有的列</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> row.keys():</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;%s=%s &#x27;</span> % (col, i[col])</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># id=1</span></span><br><span class="line"><span class="comment"># name=bomo</span></span><br><span class="line"><span class="comment"># age=18</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询单行</span></span><br><span class="line">cu = connection.cursor()</span><br><span class="line">cu.execute(<span class="string">&#x27;select count(*) as rowcount count from user&#x27;</span>)</span><br><span class="line">row = cu.fetchone()</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> row.keys():</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;%s=%s &#x27;</span> % (col, i[col])</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># rowcount=2</span></span><br><span class="line"></span><br><span class="line">cu.close()</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure><p>当然，我们也可以自定义<code>row_factory</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义row构造器，返回字典对象，可以通过列名索引</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dict_factory</span>(<span class="params">cursor, row</span>):</span><br><span class="line">    d = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> idx, col <span class="keyword">in</span> <span class="built_in">enumerate</span>(cursor.description):</span><br><span class="line">        d[col[<span class="number">0</span>]] = row[idx]</span><br><span class="line">    <span class="keyword">return</span> d</span><br><span class="line"></span><br><span class="line">connection.row_factory = dict_factory</span><br></pre></td></tr></table></figure><h2 id="4-字符串编码"><a href="#4-字符串编码" class="headerlink" title="4. 字符串编码"></a>4. 字符串编码</h2><p>数据库默认的编码格式为UTF-8，可以通过下面命令指定编码格式，如果主数据库还没创建，则可以指定编码，否则使用原有编码格式</p><ul><li>PRAGMA encoding &#x3D; “UTF-8”;</li><li>PRAGMA encoding &#x3D; “UTF-16”;</li><li>PRAGMA encoding &#x3D; “UTF-16le”;</li><li>PRAGMA encoding &#x3D; “UTF-16be”;</li></ul><p>　</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">connection = sqlite3.connect(<span class="string">&#x27;spider.db&#x27;</span>)</span><br><span class="line">conn.executescript(<span class="string">&#x27;PRAGMA encoding = &quot;UTF-16&quot;;&#x27;</span>)</span><br><span class="line">cu = connection.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># do something</span></span><br><span class="line"></span><br><span class="line">cu.close()</span><br><span class="line">connection.close()</span><br></pre></td></tr></table></figure><blockquote><p>问题：主数据库（main database）是指什么??</p></blockquote><h2 id="5-text-factory"><a href="#5-text-factory" class="headerlink" title="5. text_factory"></a>5. text_factory</h2><p>从sqlite数据库读取出来的字符串需要转换成unicode对象，text_factory可以用于编码的转换，构建unicode字符串，默认保存的就是unicode编码，如果我们需要把字符串存成UTF8编码的，我们需要修改text_factory的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conn = sqlite3.connect(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">conn.text_factory = <span class="built_in">str</span>                                     <span class="comment"># 默认为utf8编码</span></span><br><span class="line">conn.text_factory = <span class="keyword">lambda</span> t: unicode(t, <span class="string">&#x27;gbk&#x27;</span>, <span class="string">&#x27;ignore&#x27;</span>)   <span class="comment"># 设为gbk编码</span></span><br></pre></td></tr></table></figure><p>参见官网的<a href="https://docs.python.org/2/library/sqlite3.html#sqlite3.Connection.text_factory">介绍</a></p><p>关于python的编解码和unicode与str可以看我<a href="/2016-06-24/python-encode-decode/">另一篇文章</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python迭代器和生成器</title>
      <link href="/2016-06-21/python-iterator-generator/"/>
      <url>/2016-06-21/python-iterator-generator/</url>
      
        <content type="html"><![CDATA[<p>与其他高级语言一样，Python也提供了迭代器的功能，迭代器统一了访问的集合的方式，Python中所有的集合数据类型（list, str, dict, set, tuple）都支持使用for进行迭代，当然我们也可以为自己定义的类或函数实现这种迭代的功能</p><span id="more"></span><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们先来看一个例子，我们生成一个斐波那契序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fabs</span>(<span class="params">count</span>):</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="built_in">print</span> b</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>上面在函数里面直接print结果，显然这样做的复用性特别差，于是我们想到了用列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fabs</span>(<span class="params">count</span>):</span><br><span class="line">    l = []</span><br><span class="line">    n, a, b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="built_in">max</span>:</span><br><span class="line">        l.append(b)</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fabs(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span> i</span><br></pre></td></tr></table></figure><p>使用list返回可以解决了复用性问题，但是有时候我们需要使用的数据量非常大的时候，返回整个list会占用大量内存，这个时候，我们希望，函数返回的值不要一次性全部返回，而是用到的时候计算再返回，这样数据量再打也只占用一份内存而已了，Python提供了两种方式实现这种逐步迭代的方式，于是就有了下面迭代器和生成器</p><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器统一了所有集合访问元素的方式，包括有序无序的，相比for遍历集合，其支持随机访问的集合，如<code>set</code>，<code>dict</code>，只能向前，不能后退，迭代器有下面两个基本方法，大多数高级语言都会定义统一的迭代器操作，Python中的迭代器类型需要实现下面两个方法</p><ul><li><code>next</code>：返回迭代器下一个元素</li><li><code>__iter__</code>方法：返回一个迭代器</li></ul><p>给一个类实现迭代器功能，生成斐波那契序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fabs</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">max</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;传入斐波那契数列的个数&quot;&quot;&quot;</span></span><br><span class="line">        self.<span class="built_in">max</span> = <span class="built_in">max</span>;</span><br><span class="line">        self.n, self.a, self.b = <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.n &lt; self.<span class="built_in">max</span>:</span><br><span class="line">            r = self.b</span><br><span class="line">            self.a, self.b = self.b, self.a + self.b</span><br><span class="line">            self.n = self.n + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        <span class="keyword">raise</span> StopIteration()   <span class="comment"># 迭代结束需要抛出异常</span></span><br><span class="line"></span><br><span class="line">fab = Fabs(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> fab:</span><br><span class="line">    <span class="built_in">print</span> i             <span class="comment"># 1, 1, 2, 3, 5, 8, 13, 21</span></span><br></pre></td></tr></table></figure><h2 id="生成器yield"><a href="#生成器yield" class="headerlink" title="生成器yield"></a>生成器yield</h2><p>上面我们看到每次迭代通过调用next取得值，Python还提供了另一个关键字yield用于更方便的迭代每个值，C#也支持这种语法，带有yield关键的函数被称为生成器（generator）</p><blockquote><p>yield：在函数使用yield返回每次迭代的值，而不直接返回，yield返回值后等待下次迭代，而保留当前的状态（局部变量不变），直到下次迭代的时候，接着后面的代码继续执行</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Foo</span>():</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>   <span class="comment"># 返回后等待第二次迭代</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>   <span class="comment"># 第二次迭代从这里开始，等待第三次迭代</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>   <span class="comment"># 第三次迭代从这里开始，迭代完成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myrange</span>(<span class="params"><span class="built_in">max</span></span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;iter start&#x27;</span>      <span class="comment"># 迭代开始时执行</span></span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">max</span>:</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;iter end&#x27;</span>      <span class="comment"># 迭代函数执行完没yield返回时，抛出StopIteration异常表示迭代结束</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不执行迭代过程（不输出iter start）</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">type</span>(myrange(<span class="number">10</span>))   <span class="comment"># 输出：&lt;type &#x27;generator&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> Foo():</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">str</span>(_)    <span class="comment"># 输出：1 3 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> myrange(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">str</span>(_)    <span class="comment"># 输出：0 1 2 3 4 5 6 7 8 9 iter end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>上面函数Foo可以迭代三次，分别返回1,3,2，与普通的列表一样</li><li>使用了生成器的函数，不能使用return，编译器会报错</li><li>生成器返回的对象是<code>generator</code></li><li>生成器在迭代完最后一个值之后，当迭代函数执行完，没有yield返回迭代值的话，会抛出StopIteration异常表示迭代结束</li><li>只有生成器调用<code>next</code>方法的时候才会运行迭代过程</li></ul><h2 id="生成器支持与外部函数交互send"><a href="#生成器支持与外部函数交互send" class="headerlink" title="生成器支持与外部函数交互send"></a>生成器支持与外部函数交互send</h2><p>生成器可以通过yield返回值给外部函数，也可以接受外部函数传递的值，通过<code>send</code>方法传值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> test():</span><br><span class="line">    <span class="built_in">print</span> _</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span> ite.<span class="built_in">next</span>()</span><br><span class="line"><span class="keyword">except</span> StopIteration, e:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>迭代器每次迭代实际上相当于调用了next方法，然后从yield取值，Python迭代器还提供了send方法，功能与next类似，但是可以传递参数作为yield的返回值在迭代器内部使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    p = <span class="keyword">yield</span> n</span><br><span class="line">    <span class="keyword">if</span> p:         <span class="comment"># 调用send时，p接收参数值，调用next时，p为None</span></span><br><span class="line">        n += p</span><br><span class="line"></span><br><span class="line">    p = <span class="keyword">yield</span> n</span><br><span class="line">    <span class="keyword">if</span> p:</span><br><span class="line">        n += p</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> n</span><br><span class="line"></span><br><span class="line">ite = test()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">print</span> ite.<span class="built_in">next</span>()    <span class="comment"># 第一次不允许调用send</span></span><br><span class="line">    <span class="built_in">print</span> ite.send(<span class="number">1</span>)   <span class="comment"># 传递参数1给迭代器</span></span><br><span class="line">    <span class="built_in">print</span> ite.send(<span class="number">2</span>)   <span class="comment"># 传递参数2给迭代器</span></span><br><span class="line">    <span class="built_in">print</span> ite.send(<span class="number">3</span>)   <span class="comment"># 最后一次传至无效，因为迭代已经完成，触发StopIteration</span></span><br><span class="line"><span class="keyword">except</span> StopIteration, e:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="yield的原理"><a href="#yield的原理" class="headerlink" title="yield的原理"></a>yield的原理</h2><p>&#x2F;&#x2F;TODO:</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python装饰器</title>
      <link href="/2016-06-17/python-decorator/"/>
      <url>/2016-06-17/python-decorator/</url>
      
        <content type="html"><![CDATA[<p>Python从语法级别提供了对装饰器模式的支持，有时候需要为一些函数添加一些额外的操作，如在执行前后打印执行时间，由于Python是函数式编程语言，支持高阶函数（函数可以作为参数和返回值使用），这样我们可以定义一个函数对原有的函数进行包装，比如在函数执行前后进行打印</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sayHello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;hello %s&#x27;</span> % (name,)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># 定义一个转换器,接收任意参数最后传给func</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kv</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;begin %s&#x27;</span> % (time.ctime(),)</span><br><span class="line">        func(*args, **kv)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;end %s&#x27;</span> % (time.ctime(),)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接调用</span></span><br><span class="line">sayHello(<span class="string">&#x27;bomo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包装后调用</span></span><br><span class="line">f = log(sayHello)</span><br><span class="line">f(<span class="string">&#x27;bomo&#x27;</span>)</span><br></pre></td></tr></table></figure><p>打印结果<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-17/57647661.jpg"></p><p>这样做还是很麻烦，Python提供了一种装饰器的语法，直接包装方法，而不改变原有的函数调用，我们在sayHello函数定义上加上<code>@log</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把log函数的定义放在sayHello之前</span></span><br><span class="line"><span class="meta">@log</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sayHello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;hello %s&#x27;</span> % (name,)</span><br><span class="line"></span><br><span class="line">sayHello(<span class="string">&#x27;bomo&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-17/6205983.jpg"><br>这里的<code>@log</code>的功能就相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sayHello = log(sayHello)</span><br></pre></td></tr></table></figure><p>Python的装饰器本质上就是函数调用，除了上面的方式，还支持三层嵌套，也支持参数，我们可以修改log函数为下面形式如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper2</span>(<span class="params">func</span>):</span><br><span class="line">        <span class="comment"># 定义一个转换器,接收任意参数最后传给func</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kv</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;begin %s %s&#x27;</span> % (name, time.ctime())</span><br><span class="line">            func(*args, **kv)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;end %s %s&#x27;</span> % (name, time.ctime())</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log(<span class="params"><span class="string">&#x27;timelog&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;hello %s&#x27;</span> % (name,)</span><br></pre></td></tr></table></figure><p>这时候就相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say_hello = log(<span class="string">&#x27;timelog&#x27;</span>)(say_hello)</span><br></pre></td></tr></table></figure><p>装饰器是替换了原来的方法，所以使用装饰器后方法名也会变化，由上面代码可以看出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">say_hello = log(<span class="string">&#x27;timelog&#x27;</span>)(say_hello)</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">say_hello = wrapper2(say_hello)</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">say_hello = wrapper</span><br></pre></td></tr></table></figure><p>故<code>say_hello.__name__</code>为<code>wrapper</code></p><p>有时候我们可能会有些操作依赖于原来的方法名，这时候我们就不希望方法名被改了，或者是我们在使用装饰器后还能访问到原来函数的一些属性（函数也是对象，也有属性），Python提供了<code>functools.wraps</code>装饰器，用于把外部方法的相关属性赋值给内部方法，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="comment"># 定义一个转换器,接收任意参数最后传给func</span></span><br><span class="line"><span class="meta">    @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kv</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;begin %s&#x27;</span> % (time.ctime(),)</span><br><span class="line">        func(*args, **kv)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;end %s&#x27;</span> % (time.ctime(),)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper2</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">        @functools.wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kv</span>):</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;begin %s %s&#x27;</span> % (name, time.ctime())</span><br><span class="line">            func(*args, **kv)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;end %s %s&#x27;</span> % (name, time.ctime())</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>Python还只是同事声明几个装饰器，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">log1</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kv</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;log1 begin %s&#x27;</span> % (time.ctime(),)</span><br><span class="line">        func(*args, **kv)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;log1 end %s&#x27;</span> % (time.ctime(),)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">log2</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kv</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;log2 begin %s&#x27;</span> % (time.ctime(),)</span><br><span class="line">        func(*args, **kv)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;log2 end %s&#x27;</span> % (time.ctime(),)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@log1</span></span><br><span class="line"><span class="meta">@log2</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;hello %s&#x27;</span> % (name,)</span><br><span class="line"></span><br><span class="line">say_hello(<span class="string">&#x27;bomo&#x27;</span>)</span><br></pre></td></tr></table></figure><p>输出，先定义的在外层</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">log1 begin Fri Jun 17 19:00:59 2016</span><br><span class="line">log2 begin Fri Jun 17 19:00:59 2016</span><br><span class="line">hello bomo</span><br><span class="line">log2 end Fri Jun 17 19:00:59 2016</span><br><span class="line">log1 end Fri Jun 17 19:00:59 2016</span><br></pre></td></tr></table></figure><p>在面向对象设计模式中有个叫装饰器模式的，与Python的类似，而Python直接从语法级实现了支持</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python多线程学习笔记</title>
      <link href="/2016-06-14/python-multithread/"/>
      <url>/2016-06-14/python-multithread/</url>
      
        <content type="html"><![CDATA[<p>关于多线程的理论，这里不做介绍，Python通过thread和threading两个标准库提供对多线程的支持。</p><ul><li>thread提供了低级别的、原始的线程以及一个简单的锁。</li><li>threading基于Java的线程模型设计。锁（Lock）和条件变量（Condition）在Java中是对象的基本行为（每一个对象都自带了锁和条件变量），而在Python中则是独立的对象。</li></ul><span id="more"></span><h2 id="thread模块"><a href="#thread模块" class="headerlink" title="thread模块"></a>thread模块</h2><p>使用<code>start_new_thread</code>方法开启一个线程，第一个参数为线程函数，第二个参数为参数，如果函数没有参数，要传空元组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;start test1&#x27;</span></span><br><span class="line">    <span class="comment"># 休息3秒</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;end test1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    thread.start_new_thread(test1, ())</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;main thread...&#x27;</span></span><br><span class="line">    <span class="comment"># start_new_thread创建的线程在主线程执行完成时会自动结束，这里等5秒</span></span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;main thread end&#x27;</span></span><br></pre></td></tr></table></figure><p>上面通过<code>sleep</code>防止主线程退出导致其他线程也跟着退出，显然不靠谱，这时候我们可以通过锁的方式控制线程执行顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lock = thread.allocate_lock()  <span class="comment"># 返回一个新的锁定对象。</span></span><br><span class="line">lock.acquire()                 <span class="comment"># 请求锁，如果该所没被占用，则成功返回，如果被占用，则等待直到锁被释放</span></span><br><span class="line">lock.release()                 <span class="comment"># 释放锁</span></span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">thread_lock</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;start test1&#x27;</span></span><br><span class="line">    <span class="comment"># 休息3秒</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;end test1&#x27;</span></span><br><span class="line">    <span class="comment"># 执行完后释放锁</span></span><br><span class="line">    thread_lock.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个锁</span></span><br><span class="line">    lock = thread.allocate_lock()</span><br><span class="line">    <span class="comment"># 请求锁</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="comment"># 把锁传给函数</span></span><br><span class="line">    thread.start_new_thread(test1, (lock,))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;main thread...&#x27;</span></span><br><span class="line">    <span class="comment"># 只有被释放了才能请求到</span></span><br><span class="line">    lock.acquire()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;main thread end&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h2><p>thread模块不支持守护线程，当主线程退出时，所有子线程不管是否工作都会被结束，而threading更强大，也支持守护线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;start test1 &#x27;</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)      <span class="comment"># 休息3秒</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;end test1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个线程</span></span><br><span class="line">    t = threading.Thread(target=test1, args=())</span><br><span class="line">    <span class="comment"># 运行线程</span></span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;main thread...&#x27;</span></span><br><span class="line">    <span class="comment"># join函数阻塞当前线程，直到t线程运行完成</span></span><br><span class="line">    t.join()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;main thread end&#x27;</span></span><br></pre></td></tr></table></figure><p>使用Thread.start()运行的线程，在主线程执行完成后不会被强制结束，会一直运行至结束</p><p>常用属性</p><ul><li>threading.currentThread()：返回当前的线程变量。</li><li>threading.enumerate()：返回一个包含正在运行的线程的list</li><li>threading.activeCount()： 返回正在运行的线程数量</li></ul><p>Thread对象</p><ul><li>start(): 启动线程</li><li>join(): 阻塞直到线程完成</li><li>isAlive(): 返回线程是否活动的</li><li>getName(): 返回线程名</li><li>setName(): 设置线程名</li><li>run(): 表示线程活动的方法</li></ul><p>当Thread对象调用start方法的时候，默认会调用run方法，所以我们可以封装线程函数到Thread对象里面，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;线程执行函数&quot;&quot;&quot;</span></span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;%s run&#x27;</span> % (self.name,)</span><br><span class="line"></span><br><span class="line">t = MyThread(<span class="string">&#x27;thread_name&#x27;</span>)</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><h2 id="线程同步问题"><a href="#线程同步问题" class="headerlink" title="线程同步问题"></a>线程同步问题</h2><p>与其他语言一样，Python也提供了线程同步相关的支持，Python支持下面几种线程同步锁</p><p>线程锁的锁定释放的流程如下</p><blockquote><p>请求锁定 —&gt; 进入锁定池等待 —&gt; 获取锁 —&gt; 已锁定 —&gt; 释放锁</p></blockquote><h3 id="1-Lock-amp-RLock"><a href="#1-Lock-amp-RLock" class="headerlink" title="1. Lock &amp; RLock"></a>1. Lock &amp; RLock</h3><ol><li><p>Lock<br>指令锁，只有两种状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mutex = threading.Lock()    <span class="comment"># 构造方法</span></span><br><span class="line">mutex.acquire()             <span class="comment"># 请求锁，成功则锁定，如果该锁已被锁定，则阻塞等待</span></span><br><span class="line"><span class="comment"># mutex.acquire()           # 会发生死锁</span></span><br><span class="line">mutex.release()             <span class="comment"># 释放锁，使用前该锁必须已被锁定</span></span><br></pre></td></tr></table></figure></li><li><p>RLock<br>可重入锁，为了保证线程对共享资源的独占，又避免死锁的出现，允许在<code>同一线程</code>中多次请求锁，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mutex = threading.RLock()    <span class="comment"># 构造方法</span></span><br><span class="line">mutex.acquire()              <span class="comment"># 请求锁</span></span><br><span class="line">mutex.acquire()              <span class="comment"># 请求锁，不会死锁</span></span><br><span class="line">mutex.release()</span><br><span class="line">mutex.release()              <span class="comment"># 请求多少次就要释放多少次，成对出现</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-Semaphore"><a href="#2-Semaphore" class="headerlink" title="2. Semaphore"></a>2. Semaphore</h3><p>信号量，比Lock多了计数器，可以记录多次请求和释放，技术器不能小于0，小于0则会阻塞，通常可以用在控制并发数的情况下，用法与Lock类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">semaphore = threading.Semaphore(<span class="number">2</span>)    <span class="comment"># 构造一个信号量，容量为2</span></span><br><span class="line">semaphore.acquire()                   <span class="comment"># 请求信号，计数器-1，执行完后为1</span></span><br><span class="line">semaphore.acquire()                   <span class="comment"># 请求信号，计数器-1，执行完后为0</span></span><br><span class="line"><span class="comment"># semaphore.acquire()                   # 请求信号，计数器为0，阻塞，直到release让计数器+1</span></span><br><span class="line">semaphore.release()                   <span class="comment"># 请求信号，计数器+1，执行完后为1</span></span><br><span class="line">semaphore.release()                   <span class="comment"># 请求信号，计数器+1，执行完后为2</span></span><br></pre></td></tr></table></figure><h3 id="3-Event"><a href="#3-Event" class="headerlink" title="3. Event"></a>3. Event</h3><p>与Lock相反，Event内部维护一个标志位，初始化为false，调用set置为true，调用clear置为flase</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test1</span>(<span class="params">signal</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;I will sleep, wake me up 3 seconds later&quot;</span></span><br><span class="line">    signal.wait()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;I awake up...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sig = threading.Event()</span><br><span class="line"></span><br><span class="line">    t = threading.Thread(target=test1, args=(sig,))</span><br><span class="line">    t.start()</span><br><span class="line">    <span class="comment"># 睡3秒</span></span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 叫醒信号</span></span><br><span class="line">    sig.<span class="built_in">set</span>()</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;main thread end&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4-Condition"><a href="#4-Condition" class="headerlink" title="4. Condition"></a>4. Condition</h3><p>Condition称为条件变量，提供了Python多线程中复杂的同步支持，除了提供与Lock类似的<code>acquire</code>和<code>release</code>方法外，还提供了<code>wait</code>和<code>notify</code>方法，支持通知</p><ul><li>wait：release锁，阻塞，等待notify唤醒</li><li>notify：唤醒由wait阻塞的线程</li></ul><p>下面使用Condition来模拟一个捉迷藏的游戏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Seeker</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cond, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(Seeker, self).__init__()</span><br><span class="line">        self.cond = cond</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.cond.acquire()</span><br><span class="line">        <span class="built_in">print</span> self.name + <span class="string">&#x27;: 我已经把眼睛蒙上了&#x27;</span></span><br><span class="line">        self.cond.wait()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> self.name + <span class="string">&#x27;: 我找到你了 ^o^&#x27;</span></span><br><span class="line">        self.cond.notify()</span><br><span class="line">        self.cond.wait()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> self.name + <span class="string">&#x27;: 我赢了&#x27;</span></span><br><span class="line">        self.cond.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hider</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, cond, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(Hider, self).__init__()</span><br><span class="line">        self.cond = cond</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        time.sleep(<span class="number">1</span>)           <span class="comment"># 睡1秒确保Seeker先运行</span></span><br><span class="line">        self.cond.acquire()</span><br><span class="line">        <span class="built_in">print</span> self.name + <span class="string">&#x27;: 我已经藏好了，你快来找我吧&#x27;</span></span><br><span class="line">        self.cond.notify()</span><br><span class="line">        self.cond.wait()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> self.name + <span class="string">&#x27;: 被你找到了，哎~~~&#x27;</span></span><br><span class="line">        self.cond.notify()</span><br><span class="line"></span><br><span class="line">        self.cond.release()</span><br><span class="line"></span><br><span class="line">cond = threading.Condition()</span><br><span class="line">seeker = Seeker(cond, <span class="string">&#x27;seeker&#x27;</span>)</span><br><span class="line">hider = Hider(cond, <span class="string">&#x27;hider&#x27;</span>)</span><br><span class="line">seeker.start()</span><br><span class="line">hider.start()</span><br></pre></td></tr></table></figure><p>执行结果如下<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-17/91739824.jpg"></p><h2 id="队列Queue"><a href="#队列Queue" class="headerlink" title="队列Queue"></a>队列Queue</h2><p>多线程很多时候可以与队列一起使用，把任务放到队列，保证线程任务的执行顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line">myqueue = Queue.Queue(maxsize = <span class="number">10</span>) <span class="comment"># 指定容量，不指定则无限大</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面方法默认有个block参数和timeout参数，当容量不足或队列没有对象的时候会阻塞当前线程</span></span><br><span class="line">myqueue.put(<span class="number">10</span>)                     <span class="comment"># 存入值进队列</span></span><br><span class="line">myqueue.get(block=<span class="literal">False</span>)            <span class="comment"># 取出队列中的第一个元素，如果没有对象，抛出Queue.Empty异常</span></span><br></pre></td></tr></table></figure><p>可以利用Queue写一个线程安全的队列，如对数据库的操作可以放在一个队列里面进行，这样就可以省去线程同步带来的问题了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, queue</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__()</span><br><span class="line">        self.queue = queue</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        (sql, args) = self.queue.get(block=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">while</span> sql != <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="comment"># 假定退出操作为&#x27;q&#x27;</span></span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;exe %s&#x27;</span> % (sql,)</span><br><span class="line">            (sql, args) = self.queue.get(block=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_queue = Queue.Queue()</span><br><span class="line">my_thread = MyThread(my_queue)</span><br><span class="line">my_thread.start()</span><br><span class="line"></span><br><span class="line">my_queue.put((<span class="string">&#x27;insert into user(name, age)&#x27;</span>, (<span class="string">&#x27;bobo&#x27;</span>, <span class="number">23</span>)))</span><br><span class="line">my_queue.put((<span class="string">&#x27;update user set age=24 where name=?&#x27;</span>, (<span class="string">&#x27;bobo&#x27;</span>,)))</span><br><span class="line">my_queue.put((<span class="string">&#x27;delete from user where name=?&#x27;</span>, (<span class="string">&#x27;bobo&#x27;</span>,)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理完</span></span><br><span class="line">my_queue.put((<span class="string">&#x27;q&#x27;</span>, ()))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;wait for sqlite complete&#x27;</span></span><br><span class="line">my_thread.join()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;complete&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="GIL"><a href="#GIL" class="headerlink" title="GIL"></a>GIL</h2><p>刚接触Python多线程的时候可能会经常遇到GIL这个词，并且GIL还经常与Python不能高效的实现多线程划上等号<br>GIL（global interpreter lock）不是Python的特性，而是CPython的特性，而CPython是通常是Python默认的解释器，而Python本身，不依赖于GIL</p><p>CPython编译器引入了GIL全局锁（进程）来解决多线程环境下的数据同步问题，即Python对象的内部是thread-safe的，并且被开发者广泛依赖，当然这种简单粗暴的锁不可避免也带来了一定的性能损耗，并且由于GIL的存在，同一时刻只能有一个线程在运行，Python无法充分的利用多核CPU带来的多核计算</p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-17/73225581.jpg"></p><ul><li>CPU密集型通常是计算为主，如图像处理，复杂的数学计算等</li><li>IO密集型通常是与硬件相关的，如硬盘、网卡、声卡、显卡，计算机需要等待硬件的耗时处理，比较常见的有文件处理，网络流处理，这时候CPU负载比较低</li></ul><p>在CPU密集型的场景下，由于GIL的存在，线程消耗CPU资源比较多，而在多线程下需要频繁的获取和释放锁，带来很大量的开销，所以通常在CPU密集型的场景下，多线程通常不如单线程来得快，建议使用多进程，而不是多线程</p><p>在IO密集型的场景下，由于GIL的存在，Python在遇到IO操作的时候回释放锁，建议使用多线程，而不是多进程</p><p>当然进程与线程又有自身的优缺点，进程不共享内存，多进程通讯比较麻烦，而线程共享所有内存，通讯更方便，具体如何取舍还是得看具体业务了</p><p>关于GIL的更多介绍，可以参见<a href="http://cenalulu.github.io/Python/gil-in-Python/">这里</a></p><h2 id="测试CPU密集型和IO密集型场景下的多线程效果"><a href="#测试CPU密集型和IO密集型场景下的多线程效果" class="headerlink" title="测试CPU密集型和IO密集型场景下的多线程效果"></a>测试CPU密集型和IO密集型场景下的多线程效果</h2><ol><li>CPU密集型:给一张图片创建1000张缩略图</li><li>IO密集型:给一个文件进行重复的读写和删除1000次操作</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line">    THUMB_SIZE = (<span class="number">75</span>, <span class="number">75</span>)</span><br><span class="line">    SAVE_DIRECTORY = <span class="string">&#x27;thumbs&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, queue, is_cpu=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__()</span><br><span class="line">        self.queue = queue</span><br><span class="line">        self.is_cpu = is_cpu</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> is_cpu:</span><br><span class="line">            <span class="comment"># 如果是CPU密集型,只打开一次图片,避免IO操作对测试的影响,图片大一些效果比较好</span></span><br><span class="line">            self.path = <span class="string">u&#x27;/Users/zhengxiankai/Desktop/Python/test.jpg&#x27;</span></span><br><span class="line">            self.image = Image.<span class="built_in">open</span>(self.path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.path = <span class="string">u&#x27;/Users/zhengxiankai/Desktop/Python/test2.png&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        item = self.queue.get(block=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">while</span> item != <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="comment"># 假定退出操作为&#x27;q&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> self.is_cpu:</span><br><span class="line">                self.test_cpu(self.image)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.test_io(self.path)</span><br><span class="line">            self.queue.task_done()</span><br><span class="line">            item = self.queue.get(block=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        self.queue.task_done()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_cpu</span>(<span class="params">self, img</span>):</span><br><span class="line">        <span class="comment"># 模拟CPU密集型操作,只生成缩略图,不进行IO操作</span></span><br><span class="line">        img.thumbnail(self.__class__.THUMB_SIZE, Image.ANTIALIAS)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_io</span>(<span class="params">filename</span>):</span><br><span class="line">        <span class="comment"># 模拟IO密集型操作,进行文件读写和删除</span></span><br><span class="line">        base, file_name = os.path.split(filename)</span><br><span class="line">        file_id = uuid.uuid1()</span><br><span class="line">        save_path = os.path.join(base, <span class="built_in">str</span>(file_id) + <span class="string">&quot;.jpg&quot;</span>)</span><br><span class="line">        <span class="comment"># 保存文件</span></span><br><span class="line">        <span class="built_in">open</span>(save_path, <span class="string">&quot;wb&quot;</span>).write(<span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>).read())</span><br><span class="line">        <span class="comment"># 删除文件</span></span><br><span class="line">        os.remove(save_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyQueue</span>(Queue.Queue):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, maxsize=<span class="number">0</span>, thread_count=<span class="number">10</span>, is_cpu=<span class="literal">True</span></span>):</span><br><span class="line">        Queue.Queue.__init__(self, maxsize=maxsize)</span><br><span class="line">        self.thread_count = thread_count</span><br><span class="line">        self.threads = []</span><br><span class="line">        self.is_cpu = is_cpu</span><br><span class="line">        self.create_threads(thread_count)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_threads</span>(<span class="params">self, thread_count</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, thread_count):</span><br><span class="line">            thread = MyThread(self, self.is_cpu)</span><br><span class="line">            thread.start()</span><br><span class="line">            self.threads.append(thread)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">finish</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(self.threads)):</span><br><span class="line">            self.put(<span class="string">&#x27;q&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="comment"># 模拟1-10个线程的情况</span></span><br><span class="line">    types = [<span class="string">&#x27;cpu&#x27;</span>, <span class="string">&#x27; io&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> types:</span><br><span class="line">        <span class="keyword">for</span> thread_count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            my_queue = MyQueue(thread_count=thread_count, is_cpu=(t == <span class="string">&#x27;cpu&#x27;</span>))</span><br><span class="line">            <span class="comment"># 模拟1000次操作</span></span><br><span class="line">            <span class="keyword">for</span> __ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">1000</span>):</span><br><span class="line">                my_queue.put(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在处理完后结束所有线程</span></span><br><span class="line">            my_queue.finish()</span><br><span class="line">            start = time.time()</span><br><span class="line">            my_queue.join()</span><br><span class="line">            span = time.time() - start</span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&#x27;%s: thread_count=%d span=%s&#x27;</span> % (t, thread_count, <span class="built_in">str</span>(span))</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>用我的MacbookPro测试结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">cpu: thread_count=1 span=0.304748058319</span><br><span class="line">cpu: thread_count=2 span=0.299258947372</span><br><span class="line">cpu: thread_count=3 span=0.359387874603</span><br><span class="line">cpu: thread_count=4 span=0.452157974243</span><br><span class="line">cpu: thread_count=5 span=0.52136015892</span><br><span class="line">cpu: thread_count=6 span=0.610749959946</span><br><span class="line">cpu: thread_count=7 span=0.688009023666</span><br><span class="line">cpu: thread_count=8 span=0.812467098236</span><br><span class="line">cpu: thread_count=9 span=0.939681053162</span><br><span class="line"> io: thread_count=1 span=2.01645898819</span><br><span class="line"> io: thread_count=2 span=1.76048994064</span><br><span class="line"> io: thread_count=3 span=1.45470404625</span><br><span class="line"> io: thread_count=4 span=1.45363807678</span><br><span class="line"> io: thread_count=5 span=1.10205197334</span><br><span class="line"> io: thread_count=6 span=1.02844214439</span><br><span class="line"> io: thread_count=7 span=1.0888478756</span><br><span class="line"> io: thread_count=8 span=1.01435399055</span><br><span class="line"> io: thread_count=9 span=1.0473139286</span><br><span class="line"></span><br><span class="line">Process finished with <span class="built_in">exit</span> code 0</span><br></pre></td></tr></table></figure><p>上面可以看出，在CPU密集型的场景下，线程越多越慢，在IO密集型的场景下，线程数在6以下，提升效果明显，在6个以上，性能提升的效果不明显，所以Python得多线程也不是一无是处，看具体场景使用</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python学习笔记</title>
      <link href="/2016-06-14/python-start/"/>
      <url>/2016-06-14/python-start/</url>
      
        <content type="html"><![CDATA[<p>一直想学习一下Python语言，拥有动态语言的特性，还是解释型语言，拥有高级数据结构，可以以简单而高效的方式进行面向对象编程，并且Python类库众多，适合写脚本，特别是一些小工具，最近把Python语法大概捋了一遍，在这里记录学习的过程</p><span id="more"></span><h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><h2 id="1-什么是Python"><a href="#1-什么是Python" class="headerlink" title="1. 什么是Python"></a>1. 什么是Python</h2><p>Python是一种编程语言，支持高级数据结构，结构化，Python是一门解释性语言，无需编译即可运行，支持模块化，类库众多且重用性高，例如基础的IO，Socket，图形界面等，模块化使得Python适用于更多领域，绝大多数其他编程语言能做到的Python都能做到，甚至支持与二进制库连接起来，有一句话是这么说的：人生苦短，我用Python</p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-6-14/69651795.jpg"></p><h2 id="2-什么时候使用Python"><a href="#2-什么时候使用Python" class="headerlink" title="2. 什么时候使用Python"></a>2. 什么时候使用Python</h2><p>pPython比较使用于编写工具脚本，例如如果你有一些大量的重复的工作，希望计算机可以自动帮你完成，而又找不到相关的软件可以比较完美的实现，这个时候就可以考虑写一个Python脚本来执行，例如：</p><ul><li>例如批量扫描文件内容，并替换文件中的文本（执行某些操作）</li><li>批量修改文件名</li><li>从多个excel文件中提取相关信息并输出到一个excel中</li><li>批量抓取网页信息并保存到数据库（爬虫）</li></ul><blockquote><p>通常来说就是使用脚本自动完成一些自定义的行为，主要是Python支持的库（module）众多，能帮助你节省不少时间<br>当然如果你是开发人员，可能通过C++&#x2F;C#&#x2F;Java来写自动化的工具，但是这些工具可能会显得庞大而臃肿，可能会让人觉得这是烦躁而漫长的工作，那么你可以用Python试试</p></blockquote><p>当然Python能做的事远不止这些，支持的类库涵盖了很多领域，如人工智能，机器学习，图像处理，金融，物理学等，当然，很多功能其他语言也能做到，Python最大的优势就是类库众多，处理灵活，我们很多时候都不需要重复造轮子，特别是对于追求效率的你来说，或许是个好选择，</p><blockquote><p>语言只是个工具，没有语言是万能的，什么好用用什么</p></blockquote><h2 id="3-安装Python"><a href="#3-安装Python" class="headerlink" title="3. 安装Python"></a>3. 安装Python</h2><p>学习Python的时候建议使用Python 2.x版本，大多第三方库都基于2.x版本，3.x版本相对于2.x改动比较大，并且一些老的库不支持3.x，我这里使用的是<code>Python 2.7.10</code>，mac系统自带Python，可以通过下面命令查看Python的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认情况下使用Python查看Python2的版本</span></span><br><span class="line">$ Python -V</span><br><span class="line"><span class="comment"># 查看Python3的版本</span></span><br><span class="line">$ Python3 -V</span><br></pre></td></tr></table></figure><h2 id="4-工具"><a href="#4-工具" class="headerlink" title="4. 工具"></a>4. 工具</h2><p>与其他脚本语言类似（php, js）使用普通的文本编辑器即可，我这里用的是<a href="http://www.sublimetext.com/2">Sublime2</a>，当然也可以使用一些集成IDE</p><ul><li>Atom：与Sublime类似，支持代码高亮，自动补齐</li><li>PyCharm：JetBrains出的Python语言IDE，功能强大，收费</li><li>Eclipse：有Python插件提供支持</li></ul><p>如果是刚开始学习，推荐使用文本工具（Sublime或Atom）</p><h2 id="5-交互式编程"><a href="#5-交互式编程" class="headerlink" title="5. 交互式编程"></a>5. 交互式编程</h2><p>交互式编程相当于一问一答的方式，在Terminal输入Python进入交互式模式，与其他语言不同，Python不以分号结尾，并且通过缩进识别代码块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">localhost:~ bomo$ Python</span><br><span class="line">Python 2.7.10 (default, Oct 23 2015, 19:19:21)</span><br><span class="line">[GCC 4.2.1 Compatible Apple LLVM 7.0.0 (clang-700.0.59.5)] on darwin</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><h1 id="二、基础与语法"><a href="#二、基础与语法" class="headerlink" title="二、基础与语法"></a>二、基础与语法</h1><h2 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h2><p>与其他高级语言一样，除了基础数据类型，Python也支持高级数据类型<br>Python支持如下数据类型</p><ul><li><a href="https://docs.python.org/2.7/library/functions.html#complex">数值类型</a><br><code>int</code>, <code>long</code>, <code>float</code>, <code>decimal</code>数值, <code>fraction</code>有理数, <code>complex</code>复数</li><li><a href="https://docs.python.org/2.7/library/stdtypes.html#iterator-types">迭代器类型</a><br>迭代器类型包括，list, dict, tuple, str, set等</li></ul><h2 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2. 运算符"></a>2. 运算符</h2><ul><li><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code></li><li><code>//</code>, <code>**</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取整（不大于该数）</span></span><br><span class="line"><span class="number">11</span> // <span class="number">3.0</span>     <span class="comment"># 3.0</span></span><br><span class="line"><span class="number">11</span> // -<span class="number">3</span>      <span class="comment"># -4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 幂运算，与其他语言的`^`类似</span></span><br><span class="line"><span class="number">5</span> ** <span class="number">2</span>        <span class="comment"># 25</span></span><br></pre></td></tr></table></figure></li><li><code>in</code>, <code>not in</code><br>比较运算符，判断区间或集合是否存在某项</li><li><code>is</code>, <code>is not</code><br>判断两个对象是否相同<blockquote><p>is 与 &#x3D;&#x3D; 的区别</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a, b = <span class="number">1</span>, <span class="number">1.0</span></span><br><span class="line">a == b    <span class="comment"># True</span></span><br><span class="line">a <span class="keyword">is</span> b    <span class="comment"># False</span></span><br></pre></td></tr></table></figure></li></ul><p>  python（2.5+）也支持三元运算符，用法与C语言有点出入，形式为<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y     <span class="comment"># 等价于C语言的 x &gt; y ? x : y</span></span><br></pre></td></tr></table></figure></p><p>  在交互运算中，Python会把最近一次的表达式的值赋值给<code>_</code>，__该变量是只读的，不要尝试给其赋值__，一些不需要的变量有时也用<code>_</code>表示（其实跟普通的变量i一样），如for<br>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line"><span class="number">10</span> + <span class="number">32</span>     <span class="comment"># 42</span></span><br><span class="line">a + _       <span class="comment"># 52</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;这里不需要用到迭代的值&#x27;</span></span><br></pre></td></tr></table></figure></p><h2 id="3-流程控制与循环"><a href="#3-流程控制与循环" class="headerlink" title="3. 流程控制与循环"></a>3. 流程控制与循环</h2><p>Python的流程控制跟其他语言差不多，关键字有：<code>if-else</code>, <code>for</code>, <code>while</code>, <code>break</code>, <code>continue</code>, <code>pass</code></p><h3 id="3-1-if-else"><a href="#3-1-if-else" class="headerlink" title="3.1 if-else"></a>3.1 if-else</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Zero&#x27;</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;ff&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Other&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-for"><a href="#3-2-for" class="headerlink" title="3.2 for"></a>3.2 for</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">&#x27;mac&#x27;</span>, <span class="string">&#x27;windows&#x27;</span>, <span class="string">&#x27;linux&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">   <span class="built_in">print</span> w</span><br></pre></td></tr></table></figure><h3 id="3-3-pass"><a href="#3-3-pass" class="headerlink" title="3.3 pass"></a>3.3 pass</h3><p>空语句，与C语言的分号<code>;</code>类似，什么都不执行，通常用来表示一个空的代码块</p><ul><li>注意for, if-else, while 后面都有冒号<code>:</code></li><li>Python使用缩进来识别块（其他语言多数使用大括号来识别代码块）</li><li>Python没有<code>do-while</code>语句</li><li>Python没有<code>switch-case</code>，也可以参考：<a href="http://blog.sina.com.cn/s/blog_6409e7eb01018chn.html">http://blog.sina.com.cn/s/blog_6409e7eb01018chn.html</a></li></ul><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4. 函数"></a>4. 函数</h2><h3 id="4-1-函数定义"><a href="#4-1-函数定义" class="headerlink" title="4.1 函数定义"></a>4.1 函数定义</h3><p>形式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span>(<span class="params">函数参数列表</span>):</span><br><span class="line">  函数体</span><br></pre></td></tr></table></figure><p>eg: 输出一个Fibonacci斐波那契序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">n</span>):</span><br><span class="line">  a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> a &lt; n:</span><br><span class="line">       <span class="built_in">print</span> b,</span><br><span class="line">       a, b = b, a + b</span><br><span class="line"></span><br><span class="line">fib(<span class="number">2000</span>)             <span class="comment"># 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597</span></span><br></pre></td></tr></table></figure><h3 id="4-2-参数默认值"><a href="#4-2-参数默认值" class="headerlink" title="4.2 参数默认值"></a>4.2 参数默认值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a = <span class="number">12</span>, b = i</span>):</span><br><span class="line">  <span class="built_in">print</span> b</span><br><span class="line">i = <span class="number">11</span>;               <span class="comment"># i为不可变对象，这个时候test函数的参数b的默认值仍为10</span></span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">test(b = <span class="number">2</span>, a = <span class="number">12</span>)    <span class="comment"># 也可以指定参数</span></span><br></pre></td></tr></table></figure><p>从上面例子可以看到，参数的默认值在解释器运行到函数的时候就确定了，如上面的变量<code>b</code>，后面修改的的变量i与函数test没有关联了，有一点需要注意的是，如果默认参数是一个对象的时候，也是同样的，如下面例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">data=[]</span>):      <span class="comment"># 默认参数为空list</span></span><br><span class="line">    data.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> test()        <span class="comment"># 输出：[1]</span></span><br><span class="line"><span class="built_in">print</span> test()        <span class="comment"># 输出：[1, 1]</span></span><br><span class="line"><span class="built_in">print</span> test()        <span class="comment"># 输出：[1, 1, 1]</span></span><br></pre></td></tr></table></figure><p>Python解释器在解释道函数test的时候就确定好了函数test的参数默认值，所以每次调用使用的参数对象都是同一个，上面函数应该定义为如下方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">data=<span class="literal">None</span></span>):      <span class="comment"># 默认参数为空list</span></span><br><span class="line">    <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        data = []</span><br><span class="line">    data.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h3 id="4-3-可变参数"><a href="#4-3-可变参数" class="headerlink" title="4.3 可变参数"></a>4.3 可变参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a, *b</span>):</span><br><span class="line">   <span class="built_in">print</span> a</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> b</span><br><span class="line">     <span class="built_in">print</span> i</span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>, <span class="string">&#x27;james&#x27;</span>, <span class="string">&#x27;adophi&#x27;</span>)     <span class="comment"># &#x27;hello&#x27;, &#x27;bob&#x27;, &#x27;james&#x27;, &#x27;adophi&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>可变参数必须定义为最后一个（在可变字典参数前）</p></blockquote><h3 id="4-4-可变字典参数"><a href="#4-4-可变字典参数" class="headerlink" title="4.4 可变字典参数"></a>4.4 可变字典参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">a, *b, **c</span>):</span><br><span class="line">   keys = <span class="built_in">sorted</span>(c.keys())</span><br><span class="line">     <span class="keyword">for</span> kw <span class="keyword">in</span> keys:</span><br><span class="line">       <span class="built_in">print</span> kw, <span class="string">&quot;:&quot;</span>, keywords[kw]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test(<span class="string">&#x27;box&#x27;</span>, <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;value2&#x27;</span>, width=<span class="number">100</span>, height=<span class="number">200</span>, color=<span class="string">&quot;red&quot;</span>, rttt = <span class="number">21</span>)</span><br></pre></td></tr></table></figure><blockquote><p>可变字典参数必须定义在最后一个</p></blockquote><h3 id="4-5-lambda表达式"><a href="#4-5-lambda表达式" class="headerlink" title="4.5. lambda表达式"></a>4.5. lambda表达式</h3><p>形式</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lambda</span> 函数参数列表: 函数体</span><br></pre></td></tr></table></figure><p>eg: 使用Lambda表达式给列表排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pairs = [(<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>), (<span class="number">4</span>, <span class="string">&#x27;four&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pairs.sort(key = <span class="keyword">lambda</span> pair: pair[<span class="number">0</span>])</span><br><span class="line">pairs</span><br><span class="line">[(<span class="number">4</span>, <span class="string">&#x27;four&#x27;</span>), (<span class="number">1</span>, <span class="string">&#x27;one&#x27;</span>), (<span class="number">3</span>, <span class="string">&#x27;three&#x27;</span>), (<span class="number">2</span>, <span class="string">&#x27;two&#x27;</span>)]</span><br></pre></td></tr></table></figure><h2 id="5-装饰器"><a href="#5-装饰器" class="headerlink" title="5. 装饰器"></a>5. 装饰器</h2><p>参见<a href="/2016-06-17/Python-decorator">这里</a></p><h2 id="6-序列"><a href="#6-序列" class="headerlink" title="6. 序列"></a>6. 序列</h2><p>首先看看迭代器类型，Python常用的序列类型有list, tuple, str</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">squares = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]             <span class="comment"># 列表</span></span><br><span class="line">squares = [<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>, <span class="number">100</span>, <span class="number">1234</span>]   <span class="comment"># 支持不同类型</span></span><br><span class="line">squares[<span class="number">1</span>] = <span class="string">&quot;eeee&quot;</span>                     <span class="comment"># 支持索引，越界会报错</span></span><br><span class="line">last = squares[-<span class="number">1</span>]                      <span class="comment"># 复数表示从最后开始</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 支持切片（支持list,tuple,str）</span></span><br><span class="line">squares[a:b:c]          <span class="comment"># 表示从下标a到下标b且不包含下标b，取步长为c的集合，步长为正向右，步长为负向左</span></span><br><span class="line"></span><br><span class="line">a = squares[<span class="number">1</span>:<span class="number">3</span>]        <span class="comment"># [&#x27;eeee&#x27;, 100]</span></span><br><span class="line">squares[<span class="number">1</span>:<span class="number">3</span>] = []       <span class="comment"># 删除下标为1-2的项</span></span><br><span class="line">squares[-<span class="number">2</span>:<span class="number">100</span>] = []    <span class="comment"># 切片范围越界不报错，自动取临界值</span></span><br><span class="line">squares                 <span class="comment"># [&#x27;spam&#x27;, 1234]</span></span><br><span class="line">squares[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>]          <span class="comment"># 支持步长，每次进两个元素，默认为一个[4, 16]</span></span><br><span class="line">squares[<span class="number">5</span>:<span class="number">1</span>:-<span class="number">2</span>]         <span class="comment"># 步长为负数，表示从后往前：[25, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># range函数</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">10</span>)         <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">5</span>, <span class="number">10</span>)      <span class="comment"># [5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">0</span>, <span class="number">12</span>, <span class="number">3</span>)   <span class="comment"># [0, 3, 6, 9]</span></span><br></pre></td></tr></table></figure><h3 id="6-1-字符串"><a href="#6-1-字符串" class="headerlink" title="6.1. 字符串"></a>6.1. 字符串</h3><p>字符串是特殊的列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&quot;Yes,&quot; he said.&#x27;</span>               <span class="comment"># 使用单双引号表示单行字符串：&quot;...&quot; &#x27;...&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;First line.\nSecond line.&#x27;</span>     <span class="comment"># 使用反斜杠`\`转义，</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;C:\some\name&quot;</span>      <span class="comment"># 换行</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">r&#x27;C:\some\name&#x27;</span>     <span class="comment"># 字符串前面添加`r`表示`\`不转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用三个引号定义多行字符串 &quot;&quot;&quot;...&quot;&quot;&quot; &#x27;&#x27;&#x27;...&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;&quot;&quot;\          # 行尾使用反斜杠`\`表示该行后面接下一行</span></span><br><span class="line"><span class="string">aafdsafds</span></span><br><span class="line"><span class="string">bb</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>                 <span class="comment"># 结束</span></span><br></pre></td></tr></table></figure><p>格式化字符串，Python使用<code>%</code>隔开格式化字符串和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> pi</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;Hello %s, pi is %10.2f&#x27;</span> % (<span class="string">&#x27;World&#x27;</span>, pi)</span><br><span class="line"><span class="comment"># Hello World, pi is 3.14</span></span><br></pre></td></tr></table></figure><p>当像<code>%s</code>这种符号变多了之后，就很难分清楚哪个和哪个了，Python支持使用dict作为格式化参数，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&#x27;%(name)s is %(age)d years old&#x27;</span> % &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;bomo&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="comment"># bomo is 18 years old</span></span><br></pre></td></tr></table></figure><p>还有这种方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&#123;name&#125; is &#123;age:2d&#125; years old&#x27;</span>.<span class="built_in">format</span>(name=<span class="string">&#x27;bomo&#x27;</span>, age=<span class="number">18</span>)</span><br><span class="line"><span class="comment"># bomo is 18 years old</span></span><br></pre></td></tr></table></figure><p>Python格式化字符串还支持索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="string">&#x27;&#123;name&#125; is &#123;1:2d&#125; years old&#x27;</span>.<span class="built_in">format</span>(<span class="number">12</span>, <span class="number">18</span>, name=<span class="string">&#x27;bomo&#x27;</span>)</span><br><span class="line"><span class="comment"># bomo is 18 years old</span></span><br></pre></td></tr></table></figure><p>最后一种方式是最Pythonic的，也是最推荐的方式</p><h3 id="6-2-序列常用操作"><a href="#6-2-序列常用操作" class="headerlink" title="6.2 序列常用操作"></a>6.2 序列常用操作</h3><ol><li><p>加法乘法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">squares + [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]    <span class="comment"># [&#x27;spam&#x27;, 1234, &#x27;a&#x27;, &#x27;b&#x27;]</span></span><br><span class="line">l = squares * <span class="number">2</span>         <span class="comment"># [&#x27;spam&#x27;, 1234, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;spam&#x27;, 1234, &#x27;a&#x27;, &#x27;b&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>元素操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">squares.append(<span class="string">&#x27;jobs&#x27;</span>)                    <span class="comment"># 添加</span></span><br><span class="line">squares.extend([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])      <span class="comment"># 添加集合</span></span><br><span class="line">squares.insert(<span class="number">0</span>, x)                      <span class="comment"># 插入元素</span></span><br><span class="line">squares.remove(<span class="string">&#x27;b&#x27;</span>)                       <span class="comment"># 删除值为&#x27;b&#x27;的第一个元素</span></span><br><span class="line">squares.pop([<span class="number">1</span>])                          <span class="comment"># 删除第1个元素，并返回该元素</span></span><br><span class="line">squares.index(<span class="string">&#x27;b&#x27;</span>)                        <span class="comment"># 获取值为&#x27;b&#x27;的索引</span></span><br><span class="line">squares.count(<span class="string">&#x27;b&#x27;</span>)                        <span class="comment"># 获取值为&#x27;b&#x27;的出现次数</span></span><br></pre></td></tr></table></figure></li><li><p>统计操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">len</span>(squares)</span><br><span class="line"><span class="built_in">max</span>(squares)</span><br><span class="line"><span class="built_in">min</span>(squares)</span><br></pre></td></tr></table></figure></li><li><p>删除操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="keyword">del</span> a[<span class="number">0</span>]            <span class="comment"># [1, 66.25, 333, 333, 1234.5]</span></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">2</span>:]           <span class="comment"># [1, 66.25]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6-3-切片的原理"><a href="#6-3-切片的原理" class="headerlink" title="6.3 切片的原理"></a>6.3 切片的原理</h3><p>切片内部是调用<code>__getitem__</code>，<code>__setitem__</code>,<code>__delitem__</code>和<code>slice</code>函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">x = a[<span class="number">1</span>: <span class="number">5</span>]             <span class="comment"># x = a.__getitem__(slice( 1, 5, None ))</span></span><br><span class="line">a[<span class="number">1</span>: <span class="number">3</span>] = [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]  <span class="comment"># a.__setitem__(slice(1, 3, None), [10, 11, 12])</span></span><br><span class="line"><span class="keyword">del</span> a[<span class="number">1</span>: <span class="number">4</span>]         <span class="comment"># a.__delitem__(slice(1, 4, None))</span></span><br></pre></td></tr></table></figure><h2 id="7-元组tuple"><a href="#7-元组tuple" class="headerlink" title="7. 元组tuple"></a>7. 元组tuple</h2><p>元组相当于多维数组，与序列一样，元组元素支持任意类型，用括号表示，括号有时可以省略（不产生歧义的情况下）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">t = <span class="number">1</span>, <span class="number">2</span>            <span class="comment"># 省略括号</span></span><br><span class="line">t = (<span class="string">&#x27;a&#x27;</span>, <span class="number">23</span>)</span><br><span class="line">t = ([<span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>], [<span class="string">&#x27;b&#x27;</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空元组</span></span><br><span class="line">empty = ()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单元素元组，逗号不能少</span></span><br><span class="line">single = (<span class="number">11</span>,)</span><br><span class="line">single = <span class="number">11</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如sqlite操作的时候</span></span><br><span class="line">cursor.execute(<span class="string">&#x27;select * from user where gender = ?&#x27;</span>,</span><br><span class="line">              (<span class="string">&#x27;female&#x27;</span>,))</span><br></pre></td></tr></table></figure><p>元组各个元素可以同时赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">x, y = t        <span class="comment"># x = 1, y = 2</span></span><br><span class="line">x, y = <span class="number">1</span>, <span class="number">2</span>     <span class="comment"># 同上</span></span><br></pre></td></tr></table></figure><p>元组使得函数返回多个值变得更加方便</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_point</span>():</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">2</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><blockquote><p>与列表不同，元组是不可变的，如果想修改，只能生成新的元组</p></blockquote><h2 id="8-字典dict"><a href="#8-字典dict" class="headerlink" title="8. 字典dict"></a>8. 字典dict</h2><p>用法与其他语言类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tel = &#123;<span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>, <span class="string">&#x27;bomo&#x27;</span>: <span class="number">10086</span>&#125;</span><br><span class="line">tel[<span class="string">&#x27;guido&#x27;</span>] = <span class="number">4127</span></span><br><span class="line"><span class="keyword">del</span> d[<span class="string">&#x27;bomo&#x27;</span>]</span><br><span class="line">tel = <span class="built_in">dict</span>(jack=<span class="number">4098</span>, sape=<span class="number">4139</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 空字典</span></span><br><span class="line">tel = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> tel:</span><br><span class="line">    <span class="built_in">print</span> key</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> tel.itervalues():</span><br><span class="line">    <span class="built_in">print</span> value</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> tel.iteritems():</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;key=%s, value=%s&#x27;</span> % (key, value)</span><br></pre></td></tr></table></figure><h3 id="列表推倒式和字典推导式"><a href="#列表推倒式和字典推导式" class="headerlink" title="列表推倒式和字典推导式"></a>列表推倒式和字典推导式</h3><ol><li><p>列表推导式<br>形式：<code>[expression for value in collection if condition]</code>，相当于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> collection:</span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        result.append(expression)</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">if</span> i &gt; <span class="number">90</span>]         <span class="comment"># [91, 92, 93, 94, 95, 96, 97, 98, 99]</span></span><br></pre></td></tr></table></figure></li><li><p>字典推导式<br>形式：<code>&#123;key_expression: value_expression for value in tuple&#125;</code> ，相当于</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> collection:</span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        result[key_expression] = value_expression</span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>  例如：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;x+<span class="number">1</span>: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>) <span class="keyword">if</span> x &lt;= <span class="number">6</span>&#125;      <span class="comment"># &#123;3: 4, 5: 16, 7: 36&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="9-无序集set"><a href="#9-无序集set" class="headerlink" title="9. 无序集set"></a>9. 无序集set</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">basket = [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>]</span><br><span class="line">fruit = <span class="built_in">set</span>(basket)               <span class="comment"># [&#x27;orange&#x27;, &#x27;pear&#x27;, &#x27;apple&#x27;, &#x27;banana&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 操作符（自动去重）</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)      <span class="comment"># set([&#x27;a&#x27;, &#x27;r&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;])</span></span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)         <span class="comment"># set([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;z&#x27;, &#x27;m&#x27;, &#x27;l&#x27;])</span></span><br><span class="line"></span><br><span class="line">a - b                       <span class="comment"># set([&#x27;r&#x27;, &#x27;d&#x27;, &#x27;b&#x27;])</span></span><br><span class="line">a | b                       <span class="comment"># set([&#x27;a&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;d&#x27;, &#x27;m&#x27;, &#x27;l&#x27;, &#x27;r&#x27;, &#x27;z&#x27;])</span></span><br><span class="line">a &amp; b                       <span class="comment"># set([&#x27;a&#x27;, &#x27;c&#x27;])</span></span><br><span class="line">a ^ b                       <span class="comment"># set([&#x27;r&#x27;, &#x27;d&#x27;, &#x27;b&#x27;, &#x27;m&#x27;, &#x27;z&#x27;, &#x27;l&#x27;])</span></span><br></pre></td></tr></table></figure><h2 id="10-迭代器类型常用操作"><a href="#10-迭代器类型常用操作" class="headerlink" title="10. 迭代器类型常用操作"></a>10. 迭代器类型常用操作</h2><ul><li><p><strong>enumerate</strong><br>使用enumerate函数可以同时得到索引和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>([<span class="string">&#x27;tic&#x27;</span>, <span class="string">&#x27;tac&#x27;</span>, <span class="string">&#x27;toe&#x27;</span>]):</span><br><span class="line">   <span class="built_in">print</span>(i, v)</span><br></pre></td></tr></table></figure></li><li><p><strong>zip</strong><br>多个循环可以用zip打包，以最短的list为准</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">questions = [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;quest&#x27;</span>, <span class="string">&#x27;favorite color&#x27;</span>]</span><br><span class="line">answers = [<span class="string">&#x27;lancelot&#x27;</span>]</span><br><span class="line">cc = [<span class="string">&#x27;lancelot&#x27;</span>, <span class="string">&#x27;the holy grail&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;eeeee&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> q, a, c <span class="keyword">in</span> <span class="built_in">zip</span>(questions, answers, cc):</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&#x27;What is your &#123;0&#125;?  It is &#123;1&#125;.&#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(q, a, c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># What is your name?  It is lancelot.</span></span><br><span class="line"><span class="comment"># What is your quest?  It is the holy grail.</span></span><br><span class="line"><span class="comment"># What is your favorite color?  It is blue.</span></span><br></pre></td></tr></table></figure></li><li><p><strong>reversed</strong><br>反序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]):</span><br><span class="line">   <span class="built_in">print</span>(i)</span><br><span class="line"><span class="comment"># 输出：3, 2, 1</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>iteritems</strong><br>遍历字典使用iteritems可以同事获得key, value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">knights = &#123;<span class="string">&#x27;gallahad&#x27;</span>: <span class="string">&#x27;the pure&#x27;</span>, <span class="string">&#x27;robin&#x27;</span>: <span class="string">&#x27;the brave&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> knights.iteritems():</span><br><span class="line">   <span class="built_in">print</span> k, v</span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># gallahad the pure</span></span><br><span class="line"><span class="comment"># robin the brave</span></span><br></pre></td></tr></table></figure></li><li><p><strong>filter</strong><br>过滤器，给定过滤函数和集合: <code>filter(function, sequence)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line">  <span class="keyword">return</span> x % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> x % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line"><span class="built_in">filter</span>(f, <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">25</span>))     <span class="comment"># [3, 5, 6, 9, 10, 12, 15, 18, 20, 21, 24]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>map</strong><br>给定集合和操作函数，返回操作后的集合：<code>map(function, sequence)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cube</span>(<span class="params">x</span>):</span><br><span class="line">  <span class="keyword">return</span> x*x</span><br><span class="line"><span class="built_in">map</span>(i, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>))      <span class="comment"># [1, 4, 9, 16, 25, 36]</span></span><br></pre></td></tr></table></figure></li><li><p><strong>reduce</strong><br>首先操作前两个数，然后结果与后一个数运算，以此类推：<code>reduce(function, sequence)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">reduce(add, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))   <span class="comment"># 1+2+3+4+5+6+7+8+9+10=55</span></span><br><span class="line"></span><br><span class="line">reduce(<span class="keyword">lambda</span> (x, y): x + y, <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>))   <span class="comment"># 55</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="11-迭代器与生成器"><a href="#11-迭代器与生成器" class="headerlink" title="11. 迭代器与生成器"></a>11. 迭代器与生成器</h2><p>参见<a href="/2016-06-21/python-iterator-generator/">这里</a></p><h2 id="12-类"><a href="#12-类" class="headerlink" title="12 类"></a>12 类</h2><h3 id="12-1-构造函数-init-，析构函数-del"><a href="#12-1-构造函数-init-，析构函数-del" class="headerlink" title="12.1 构造函数__init__，析构函数__del__"></a>12.1 构造函数<code>__init__</code>，析构函数<code>__del__</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    self.x = x</span><br><span class="line">    self.y = y</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__del__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;对象被释放&#x27;</span></span><br><span class="line"></span><br><span class="line">t = test(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t.x + t.y</span><br></pre></td></tr></table></figure><blockquote><p>注意，Python的构造函数不支持重载，只能有一个构造函数，可以通过可变参数实现多构造函数<br>在调用父类的构造方法见后面新式类和经典类</p></blockquote><h3 id="12-2-方法与变量"><a href="#12-2-方法与变量" class="headerlink" title="12.2 方法与变量"></a>12.2 方法与变量</h3><p>类变量定义在类中，实例变量定义在构造函数中，Python中的类实例可以直接设置属性，如果属性不存在，则添加属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">  count = <span class="number">0</span>;                                                <span class="comment"># 定义类变量</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, c</span>):                                    <span class="comment"># 构造函数</span></span><br><span class="line">    self.count = c;                                         <span class="comment"># 定义实例变量count</span></span><br><span class="line">    self.name = <span class="string">&#x27;bomo&#x27;</span>                                      <span class="comment"># 定义实例变量name</span></span><br><span class="line">    self.__class__.count = self.__class__.count + <span class="number">1</span>;        <span class="comment"># 操作类变量</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">sayHi</span>(<span class="params">self</span>):                                          <span class="comment"># 实例方法</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;Hello, your name is?&#x27;</span>,self.name</span><br><span class="line"></span><br><span class="line"><span class="meta">  @staticmethod                       </span><span class="comment">#声明静态，去掉则编译报错;还有静态方法不能直接访问类变量和实例变量</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">sayName</span>():</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;my name is king&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">  @classmethod              </span><span class="comment"># 静态变量无法直接访问到类变量，类方法可以，通过cls参数</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">test2</span>(<span class="params">cls</span>):</span><br><span class="line">      <span class="built_in">print</span> cls</span><br><span class="line"></span><br><span class="line">t = test(<span class="number">10</span>)</span><br><span class="line">test.count        <span class="comment"># 1</span></span><br><span class="line">tt = test(<span class="number">20</span>)</span><br><span class="line">test.count        <span class="comment"># 2</span></span><br><span class="line">t.count           <span class="comment"># 10</span></span><br><span class="line">tt.count          <span class="comment"># 20</span></span><br></pre></td></tr></table></figure><h3 id="12-3-类里面引用全局变量"><a href="#12-3-类里面引用全局变量" class="headerlink" title="12.3 类里面引用全局变量"></a>12.3 类里面引用全局变量</h3><p>当类里面需要引用外部的全局变量的时候需要，加上global关键字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">global_count = <span class="number">0</span></span><br><span class="line">global_count2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">global</span> global_count   <span class="comment"># 声明全局变量</span></span><br><span class="line">    global_count += <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    global_count2 = <span class="number">10</span>    <span class="comment"># 局部变量</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&#x27;%d, %d&#x27;</span> % (global_count, global_count2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;%d, %d&#x27;</span> % (global_count, global_count2)</span><br><span class="line">test()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;%d, %d&#x27;</span> % (global_count, global_count2)</span><br></pre></td></tr></table></figure><h3 id="12-4-实例方法，类方法，静态方法"><a href="#12-4-实例方法，类方法，静态方法" class="headerlink" title="12.4 实例方法，类方法，静态方法"></a>12.4 实例方法，类方法，静态方法</h3><p>在Python中这几种方法特别容易，类属性和方法不能重名，否则会相互覆盖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    staticName = <span class="string">&#x27;bomo&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayHi</span>(<span class="params">self</span>):                                  <span class="comment"># 实例方法加上self参数</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Hello &#x27;</span> + self.name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod                                     </span><span class="comment"># 声明静态方法，下面方法都为静态方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayName</span>():                                    <span class="comment"># 没有self参数</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;static method&quot;</span> + Person.staticName     <span class="comment"># 静态方法通过类名调用静态实例staticName</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod                                      </span><span class="comment"># 声明类方法，下面方法都为类方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">classMethod</span>(<span class="params">cls</span>):                             <span class="comment"># 有一个cls参数，类对象</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;class method&quot;</span> + Person.staticName</span><br></pre></td></tr></table></figure><p>其他语言如java和C#都只有静态方法和类方法，而Python多了一个类方法，在大多数情况下，使用静态方法即可，在需要获取调用类的信息的时候（如类变量，类类型，类名等），则需要使用类方法</p><blockquote><p>方法的第一个参数被命名为 self。这仅仅是一个约定：对 Python 而言，名称 self 绝对没有任何特殊含义(但是请注意：如果不遵循这个约定，对其他的 Python 程序员而言你的代码可读性就会变差，而且有些类查看器程序也可能是遵循此约定编写的。)，在交互式命令行中会报错</p></blockquote><h3 id="12-5-继承"><a href="#12-5-继承" class="headerlink" title="12.5 继承"></a>12.5 继承</h3><p>父类放在子类定义的类名后的括号内，Python支持多继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DerivedClassName</span>(Base1, Base2, Base3):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><blockquote><p>单继承：如果子类有自己实现的构造函数，则不会自动调用父类的构造函数，如果子类没有实现构造函数，则会继承父类的构造函数<br>多继承：如果子类有自己实现的构造函数，同单继承，不会主动调用父类的构造函数，如果子类没有实现自己的构造函数，则会从父类中优先选择有构造函数的父类（__深度搜索__）</p></blockquote><p>判断实例与继承关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s = son()</span><br><span class="line"><span class="comment"># 判断实例</span></span><br><span class="line"><span class="built_in">isinstance</span>(s, son)        <span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(s, father)     <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断继承关系</span></span><br><span class="line"><span class="built_in">issubclass</span>(son, father)   <span class="comment"># True, son继承自father</span></span><br><span class="line"><span class="built_in">isinstance</span>(obj, Class)    <span class="comment"># 判断实例是否是某个类</span></span><br></pre></td></tr></table></figure><h3 id="12-6-新式类和经典类"><a href="#12-6-新式类和经典类" class="headerlink" title="12.6 新式类和经典类"></a>12.6 新式类和经典类</h3><p>新式类：从object类继承的类，继承顺序广度优先<br>经典类：不从object继承的类，继承顺序深度优先，不支持super</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新式类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;parent&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;parent hi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 新式类支持super</span></span><br><span class="line">        <span class="built_in">super</span>(Son, self).__init__()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;son&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Son, self).hi()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;son hi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 经典类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;parent&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;parent hi&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span>(<span class="title class_ inherited__">Parent</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 不支持super</span></span><br><span class="line">        Parent.__init__(self)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;son&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">self</span>):</span><br><span class="line">        Parent.hi(self)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;son hi&#x27;</span></span><br></pre></td></tr></table></figure><p>子类可以通过<code>super(类, 对象)</code>获取父对象父类对象的实例，然后可以调用父类的（同名）方法，就相当于Java中的<code>super</code>，C#中的<code>base</code></p><h2 id="13-模块module-包package"><a href="#13-模块module-包package" class="headerlink" title="13. 模块module, 包package"></a>13. 模块module, 包package</h2><blockquote><p>Python在处理功能复用组织结构切分为模块,包和面向对象的类，其结构类似于C#&#x2F;Java的命名空间，用于</p></blockquote><h3 id="13-1-引用模块"><a href="#13-1-引用模块" class="headerlink" title="13.1 引用模块"></a>13.1 引用模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math             <span class="comment"># 引用math模块</span></span><br><span class="line"><span class="built_in">print</span> math.sqrt(<span class="number">2</span>)      <span class="comment"># 正确输出</span></span><br><span class="line"><span class="built_in">print</span> sqrt(<span class="number">2</span>)           <span class="comment"># 报错，未导入sqrt函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> nmath    <span class="comment"># 引用math模块，并取别名nmath</span></span><br><span class="line"><span class="built_in">print</span> nmath.sqrt(<span class="number">2</span>)     <span class="comment"># 正确输出</span></span><br><span class="line"><span class="built_in">print</span> math.sqrt(<span class="number">2</span>)      <span class="comment"># 报错，未找到math的定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt   <span class="comment"># 导入模块中的函数</span></span><br><span class="line"><span class="built_in">print</span> sqrt(<span class="number">2</span>)           <span class="comment"># 正确输出</span></span><br><span class="line"><span class="built_in">print</span> math.sqrt(<span class="number">2</span>)      <span class="comment"># 会报错，没有导入math</span></span><br><span class="line"></span><br><span class="line"><span class="comment">##########################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *      <span class="comment"># 不导入单下划线开头的函数和属性，不建议这么做，这么写语义不明确，并且在多模块中存在冲突的风险</span></span><br><span class="line"><span class="built_in">print</span> sqrt(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>文件名就是模块的名字：<code>test.py</code>的模块名为<code>test</code></li><li>第一次导入模块的时候会自动执行模块内的所有代码</li><li>通过Python执行py模块的时候<code>__name__</code>变量会被设为<code>__main__</code>，如果是import，则不会，可以通过<code>__name__</code>变量判断是否是命令行执行</li><li>使用下划线<code>_</code>前缀定义类私有函数或变量<ol><li><code>_xxx</code>        单下划线开头，在<code>from module import *</code>导入会忽略，但不是私有方法</li><li><code>__xxx__</code>     双下划线开头和结尾，系统定义名字</li><li><code>__xxx</code>       双下划线开头，类中的私有变量名</li></ol></li></ul><h3 id="13-2-dir函数查看模块"><a href="#13-2-dir函数查看模块" class="headerlink" title="13.2 dir函数查看模块"></a>13.2 dir函数查看模块</h3><p>可以通过<code>dir</code>函数查看模块内定义的所有变量和函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">dir</span>(math)</span><br></pre></td></tr></table></figure><h3 id="13-3-模块搜索路径"><a href="#13-3-模块搜索路径" class="headerlink" title="13.3 模块搜索路径"></a>13.3 模块搜索路径</h3><p>在导入模块的时候，Python会自动从以下目录搜索该模块是否存在</p><ul><li>输入脚本的目录(当前目录)。</li><li>环境变量 PYTHONPATH 表示的目录列表中搜索</li><li>Python 默认安装路径中搜索</li></ul><p>可以通过<code>sys.path</code>查看所有目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path</span><br></pre></td></tr></table></figure><h3 id="13-4-package包"><a href="#13-4-package包" class="headerlink" title="13.4 package包"></a>13.4 package包</h3><p>多个模块组织成一个package，类似于java的jar包，C#的dll可执行文件，包在Python中相当于一个文件夹，包文件夹包含<code>__init__.py</code>文件，该文件用于初始化package</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sound/                        Top-level package</span><br><span class="line">    __init__.<span class="keyword">py</span>               Initialize the sound package</span><br><span class="line">    formats/                  Subpackage <span class="keyword">for</span> <span class="keyword">file</span> format conversions</span><br><span class="line">            __init__.<span class="keyword">py</span></span><br><span class="line">            wavread.<span class="keyword">py</span></span><br><span class="line">            wavwrite.<span class="keyword">py</span></span><br><span class="line">            aiffread.<span class="keyword">py</span></span><br></pre></td></tr></table></figure><p>使用package方式与module类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用wavread需要引用sound.format</span></span><br><span class="line"><span class="keyword">import</span> sound.<span class="built_in">format</span>.wavread</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以直接使用wavread</span></span><br><span class="line"><span class="keyword">from</span> wavread <span class="keyword">import</span> sound.<span class="built_in">format</span></span><br></pre></td></tr></table></figure><h3 id="13-5-init-py文件"><a href="#13-5-init-py文件" class="headerlink" title="13.5 __init__.py文件"></a>13.5 <code>__init__.py</code>文件</h3><p><code>__init__.py</code>文件可以包含一些包初始化的内容，可以定义默认导入的模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__all__ = [<span class="string">&quot;wavread&quot;</span>, <span class="string">&quot;wavwrite&quot;</span>]</span><br></pre></td></tr></table></figure><p>在使用<code>from sound.formats import *</code>的时候只会导入<code>wavread</code>, <code>wavwrite</code>两个模块，而不会导入<code>aiffread</code>模块</p><ul><li>导入包的时候，先初始化<code>__init__.py</code>文件，再初始化模块文件</li><li></li></ul><h3 id="13-6-包内引用"><a href="#13-6-包内引用" class="headerlink" title="13.6 包内引用"></a>13.6 包内引用</h3><p>只有包才能引用包，纯目录不能互相引用，所以只有目录下有<code>__init__.py</code>文件才能被其他目录的模块引用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> echo                <span class="comment"># 当前包同目录下的echo模块</span></span><br><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> formats            <span class="comment"># 当前包上级目录下的formats模块</span></span><br><span class="line"><span class="keyword">from</span> ..filters <span class="keyword">import</span> equalizer   <span class="comment"># 当前包上级目录下的filters目录下的equalizer模块</span></span><br></pre></td></tr></table></figure><h3 id="13-7-模块操作"><a href="#13-7-模块操作" class="headerlink" title="13.7 模块操作"></a>13.7 模块操作</h3><p>删除模块属性&#x2F;函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span>:</span><br><span class="line">  a = <span class="number">10</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">self, i</span>):</span><br><span class="line">    <span class="built_in">print</span> i</span><br><span class="line"></span><br><span class="line">t = test()</span><br><span class="line">t.a = <span class="number">10</span>                <span class="comment"># 10</span></span><br><span class="line">t.f(<span class="string">&#x27;hello world&#x27;</span>)      <span class="comment"># hello world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> test.a              <span class="comment"># remove property a</span></span><br><span class="line"><span class="keyword">del</span> test.f              <span class="comment"># remove method f</span></span><br><span class="line"></span><br><span class="line">t.a                     <span class="comment"># 报错：test instance has no attribute &#x27;a&#x27;</span></span><br><span class="line">t.f(<span class="string">&#x27;hello world&#x27;</span>)      <span class="comment"># 报错：test instance has no attribute &#x27;f&#x27;</span></span><br></pre></td></tr></table></figure><p>Python算是动态语言，属性和函数即写即用，不需要提前定义好，模块也可以即时导入即时卸载</p><h2 id="14-文档注释"><a href="#14-文档注释" class="headerlink" title="14. 文档注释"></a>14. 文档注释</h2><p>文档注释跟在相应的定义后面：函数定义，类定义，文件定义（文件头）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!usr/bin/env Python</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;foo.py -- 模块注释&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这里是类注释，这是一个类为空&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printmsg</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这里是方法注释&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span> msg</span><br></pre></td></tr></table></figure><p>可以通过help或<code>__doc__</code>访问注释内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出整个模块的所有注释</span></span><br><span class="line"><span class="built_in">help</span>(foo)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出类Foo的类注释</span></span><br><span class="line">Foo.__doc__</span><br></pre></td></tr></table></figure><h2 id="15-异常"><a href="#15-异常" class="headerlink" title="15. 异常"></a>15. 异常</h2><p>Python的异常处理和其他语言类似:<code>try-except-finally</code>，抛出异常使用<code>raise</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&#x27;spam&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>)   <span class="comment"># 手动抛出异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> inst:             <span class="comment"># 设置异常实例别名，用于引用</span></span><br><span class="line">    <span class="built_in">print</span> <span class="built_in">type</span>(inst)                  <span class="comment"># 获取异常类型</span></span><br><span class="line">    <span class="built_in">print</span> inst.args                   <span class="comment"># 获取异常实例</span></span><br><span class="line"><span class="keyword">finally</span>:                              <span class="comment"># 无论是否抛出异常，都会执行，与JAVA,C#其他语言一样</span></span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;始终会执行&quot;</span></span><br></pre></td></tr></table></figure><h2 id="16-多线程"><a href="#16-多线程" class="headerlink" title="16. 多线程"></a>16. 多线程</h2><p>参见<a href="/2016-06-14/Python-multithread/">这里</a></p><h2 id="17-Python常用模块"><a href="#17-Python常用模块" class="headerlink" title="17. Python常用模块"></a>17. Python常用模块</h2><h3 id="time"><a href="#time" class="headerlink" title="time"></a>time</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输出当前本地时间：[https://docs.Python.org/2/library/time.html#time.strftime](https://docs.Python.org/2/library/time.html#time.strftime)</span></span><br><span class="line"><span class="built_in">print</span> = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">today = datetime.date.today()</span><br><span class="line">oneday = datetime.datetime(<span class="number">2016</span>, 06, 08, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间差</span></span><br><span class="line">timespan = today - oneday</span><br><span class="line"><span class="built_in">print</span> timespan.total_seconds()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造时间差</span></span><br><span class="line">timespan = datetime.timedelta(day=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印到屏幕</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入一行，输入的值被当做变量</span></span><br><span class="line"><span class="built_in">str</span> = raw_input(<span class="string">&quot;请输入变量str：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入一个表达式</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个表达式：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开并写入文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">fo.write(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开并读取文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">str</span> = fo.read(<span class="number">10</span>);</span><br><span class="line">position = fo.tell();         <span class="comment"># 获取文件当前读取到的位置</span></span><br><span class="line">position = fo.seek(<span class="number">2</span>, <span class="number">1</span>);     <span class="comment"># 从当前位置向前移动2个字节</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">&#x27;old.txt&#x27;</span>, <span class="string">&#x27;new.txt&#x27;</span>)</span><br><span class="line">os.remove(<span class="string">&#x27;old.txt&#x27;</span>)</span><br><span class="line">os.mkdir(<span class="string">&#x27;newFolder&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改当前目录</span></span><br><span class="line">os.chdir(<span class="string">&quot;/Users/bomo/Downloads&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前目录</span></span><br><span class="line"><span class="built_in">print</span> os.getcwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删目录</span></span><br><span class="line">os.rmdir(<span class="string">&#x27;/Users/bomo/Downloads/newFolder&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 匹配从头匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.<span class="keyword">match</span>(<span class="string">r&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())</span><br><span class="line"><span class="comment"># 查找匹配</span></span><br><span class="line"><span class="built_in">print</span>(re.search(<span class="string">r&#x27;www&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>).span())</span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line"><span class="built_in">print</span> re.sub(pattern, replaceString, inputString)</span><br></pre></td></tr></table></figure><p>match和search有第三个参数flag，<code>match(pattern, input, flag)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(re.search(<span class="string">r&#x27;WWW&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>, flags=re.I).string)</span><br></pre></td></tr></table></figure><table><thead><tr><th>flag</th><th>用法</th></tr></thead><tbody><tr><td>I</td><td>忽略大小写</td></tr><tr><td>M</td><td>多行模式</td></tr><tr><td>S</td><td>单选模式——点任意匹配模式</td></tr><tr><td>L</td><td>使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</td></tr><tr><td>U</td><td>使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</td></tr><tr><td>X</td><td>详细模式。该模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。</td></tr></tbody></table><p>本文记录自己在学习过程中总结的一些Python要点，接触过Java，C#，OC，Python的语法确实简单优雅，很少多余的东西，人生苦短，Python是岸</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS获取当前ViewController</title>
      <link href="/2016-05-11/find-current-viewcontroller/"/>
      <url>/2016-05-11/find-current-viewcontroller/</url>
      
        <content type="html"><![CDATA[<p>做iOS开发的时，很多时候我们需要对获取当前所在的ViewController，搜了一下，大多数答案都不靠谱，都不能正确获取到当前的控制器，不一定能获取到当前的ViewController，于是自己写了一个方法</p><span id="more"></span><p>iOS自带的ViewController有两种</p><ul><li>一种是普通控制器：UIViewController, UITableViewController, UISearchBarController等</li><li>一种是容器控制器：<ul><li>UINavigationController：<br>通过childViewController.lastObject获取当前控制器</li><li>UITabBarController<br>通过selectedViewController 获取当前控制器</li></ul></li></ul><p>页面跳转有push和present，如果有present控制器，则直接取弹出的控制器，如果是导航控制器，则取最后一个，然后一层一层往下取，代码如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 获取当前控制器 */</span></span><br><span class="line">+ (<span class="built_in">UIViewController</span> *)currentVC</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">UIWindow</span> *window = [[<span class="built_in">UIApplication</span> sharedApplication] keyWindow];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前windows的根控制器</span></span><br><span class="line">    <span class="built_in">UIViewController</span> *controller = window.rootViewController;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过循环一层一层往下查找</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">YES</span>) &#123;</span><br><span class="line">        <span class="comment">//先判断是否有present的控制器</span></span><br><span class="line">        <span class="keyword">if</span> (controller.presentedViewController) &#123;</span><br><span class="line">            <span class="comment">//有的话直接拿到弹出控制器，省去多余的判断</span></span><br><span class="line">            controller = controller.presentedViewController;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ([controller isKindOfClass:[<span class="built_in">UINavigationController</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                <span class="comment">//如果是NavigationController，取最后一个控制器（当前）</span></span><br><span class="line">                controller = [controller.childViewControllers lastObject];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([controller isKindOfClass:[<span class="built_in">UITabBarController</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                <span class="comment">//如果TabBarController，取当前控制器</span></span><br><span class="line">                <span class="built_in">UITabBarController</span> *tabBarController = (<span class="built_in">UITabBarController</span> *)controller;</span><br><span class="line">                controller = tabBarController.selectedViewController;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (controller.childViewControllers.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果是普通控制器，找childViewControllers最后一个</span></span><br><span class="line">                    controller = [controller.childViewControllers lastObject];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//没有present，没有childViewController，则表示当前控制器</span></span><br><span class="line">                    <span class="keyword">return</span> controller;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码只处理了NavigationController和TabBarController，如果你没有修改过NavigationController和TabBarController的默认行为，页面跳转使用默认的push和present，那么是可以正常获取到的</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程</title>
      <link href="/2016-05-05/functional-programming-tip/"/>
      <url>/2016-05-05/functional-programming-tip/</url>
      
        <content type="html"><![CDATA[<blockquote><p>函数式编程（英语：functional programming）或称函数程序设计，又称泛函编程，是一种编程范型，它将电脑运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。函数编程语言最重要的基础是λ演算（lambda calculus）。而且λ演算的函数可以接受函数当作输入（引数）和输出（传出值）。</p></blockquote><span id="more"></span><p>上面是<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B8%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80">维基百科</a>上的解释，可以把编程语言中的函数视为数学函数一样，函数可以与普通变量一样，作为另一个函数的参数，如下</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">f</span>(<span class="variable">x</span>) = <span class="variable">x</span> * <span class="variable">x</span> + <span class="number">2</span></span></span><br><span class="line"><span class="function"><span class="title">g</span>(<span class="variable">x</span>) = <span class="title">f</span>(<span class="variable">x</span>) + <span class="title">f</span>(<span class="variable">x</span> + <span class="number">2</span>)</span></span><br><span class="line"><span class="function"><span class="title">h</span>(<span class="variable">x</span>) = <span class="title">g</span>(<span class="variable">x</span>) + <span class="title">f</span>(<span class="variable">x</span> - <span class="number">1</span>)</span></span><br></pre></td></tr></table></figure><p>函数式编程有以下几个特点（下面例子用的是python）</p><ul><li><p>避免状态变量，注重状态传递，而不是状态维护<br>非函数式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">increment1</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>函数式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">increment2</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">1</span></span><br></pre></td></tr></table></figure></li><li><p>函数是一等公民<br>即函数与变量一样，可以作为参数传递</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个过滤器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myFilter</span>(<span class="params">x</span>):</span><br><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myMap</span>(<span class="params"><span class="built_in">filter</span>, array</span>):</span><br><span class="line">  result = []</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">filter</span>(i):</span><br><span class="line">      result.append(i)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤集合</span></span><br><span class="line"><span class="built_in">print</span> myMap(myFilter, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>])</span><br><span class="line"><span class="comment"># 输出 [1, 2]</span></span><br></pre></td></tr></table></figure></li><li><p>高阶函数<br>高阶函数满足以下两个特点</p><ul><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数作为参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y, f</span>):</span><br><span class="line">  <span class="keyword">return</span> f(x) + f(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数作为返回值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">x</span>):                <span class="comment"># 接收第一个参数     </span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">n</span>):            <span class="comment"># 接收第二个参数</span></span><br><span class="line">      <span class="keyword">return</span> n * n + x;     <span class="comment"># 计算</span></span><br><span class="line">  <span class="keyword">return</span> s(x);</span><br><span class="line"></span><br><span class="line">c = calc(<span class="number">4</span>)     <span class="comment"># n*n+4</span></span><br><span class="line"><span class="built_in">print</span> c(<span class="number">3</span>)      <span class="comment"># 3*3+4</span></span><br></pre></td></tr></table></figure><p>从上面例子可以看出来，一个n * n + x计算是通过两步进行的，并且参数也分成多个单一的参数，这种过程称为函数的<code>柯里化</code>(Currying)，下面是<a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96">维基百科</a>上的解释</p><blockquote><p>在计算机科学中，柯里化（英语：Currying），又译为卡瑞化或加里化，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p></blockquote></li><li><p>惰性求职<br>  在使用函数处可以不直接执行函数，在需要的时候执行函数，如上高阶函数以函数作为返回值，在调用calc的时候并没有进行计算，而是后面调用返回的函数才进行计算</p></li><li><p>闭包<br>闭包就是引用了自由变量的函数。这个被引用的自由变量将和这个函数一同存在，即使已经离开了创造它的环境也不例外。有时候你不需要知道闭包的概念，也能很好的应用它，有一个直观的解释：可以自由访问变量(局部变量和内部变量)的代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">outa = <span class="number">200</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">x</span>):</span><br><span class="line">  a = <span class="number">100</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">n</span>):</span><br><span class="line">      <span class="comment"># 这里可以访问局部变量a，也可以访问函数外的自由变量outa</span></span><br><span class="line">      <span class="keyword">return</span> n * n + a + outa + x;</span><br><span class="line">  <span class="keyword">return</span> s(x);</span><br></pre></td></tr></table></figure><p>例如objc的block，就是对闭包的支持</p></li><li><p>面向功能，而不面向过程，重视功能粒度化，函数化<br>函数式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="string">&quot;Mary&quot;</span>, <span class="string">&quot;Isla&quot;</span>, <span class="string">&quot;Sam&quot;</span>]</span><br><span class="line"><span class="comment"># 使用map，reduce</span></span><br><span class="line">name_lengths = <span class="built_in">map</span>(<span class="built_in">len</span>, names)</span><br><span class="line"><span class="built_in">print</span> name_lengths</span><br><span class="line"><span class="comment"># =&gt; [4, 4, 3]</span></span><br></pre></td></tr></table></figure><p>非函数式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 而不是for</span></span><br><span class="line">name_lengths = []</span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> names:</span><br><span class="line">    name_lengths.append(<span class="built_in">len</span>(n))</span><br><span class="line"><span class="built_in">print</span> name_lengths</span><br></pre></td></tr></table></figure></li></ul><p>函数式编程就是功能函数化，粒度化，注重行为，而不注重过程，注重操作，而不注重状态的一种方编程思想，可以很大程度的提高代码的阅读性，因为函数本身就是一种注释，这种粒度使得代码可以更好的自解释，而闭包的特性使得代码拥有更高的聚合度，减少函数多带来的代码松散问题</p><blockquote><p>我的理解是编程思想只是思考问题的一些不同的角度，并不是绝对的，可能一些代码中既有函数式编程的特点也有面向对象的思想，例如Python就是一种多范式语言，所以在实际应用中不需要过于刻意的区分，而是根据这些特点和具体业务找到合适的方式</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为自己的库添加CocoaPods支持</title>
      <link href="/2016-05-04/cocoapod-specs-start/"/>
      <url>/2016-05-04/cocoapod-specs-start/</url>
      
        <content type="html"><![CDATA[<p>做iOS开发的基本上都知道cocoapod，几乎每一种语言都有一种包管理工具，如C#的Nuget，Ruby的Brew，Nodejs的npm等，当然cocoapod就是objc&#x2F;swift的包管理的工具了，几乎所有的objc&#x2F;swift的开源类库都挂在cocoapod上，cocoapod可以让项目很方便的引用第三方类库，今天介绍一下如果把自己的写的库挂到cocoapod上，像SDWebImage, AFNetworking一样</p><span id="more"></span><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-5-4/34437182.jpg"></p><h2 id="1-创建仓库"><a href="#1-创建仓库" class="headerlink" title="1. 创建仓库"></a>1. 创建仓库</h2><p>首先我们需要建立仓库用于存放我们的类库，cocoapod支持git仓库，大多数类库都存放在github上，当然也可以用别的git仓库，如<a href="http://git.oschina.net/">OSChina</a>，<a href="https://coding.net/">coding</a>，当然，仓库必须是public的</p><p>新建仓库后，需要添加LICENCE，大多数git工具在仓库初始化的时候都可以选择添加<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-5-4/28672226.jpg"></p><p>当然最好也添加<code>README.md</code>文件，对项目做一些描述</p><p>接下来是把Responsitory clone下来，然后添加工程，添加Demo</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── xxx             <span class="comment"># 库相关文件：.h文件，.m文件，.a库，bundle资源，.framework库等</span></span><br><span class="line">├── xxxDemo         <span class="comment"># 最好提供Demo，方便别人快速了解和熟悉你的类库，可选</span></span><br><span class="line">├── <span class="string">.gitignore</span>    <span class="comment"># 过滤文件规则</span></span><br><span class="line">├── xxx.podspec    <span class="comment"># cocoapod库描述文件，后面说到</span></span><br><span class="line">├── LICENCE         <span class="comment"># 许可说明，通常用的是 MIT</span></span><br><span class="line">└── README.md       <span class="comment"># 仓库说明文件，可选</span></span><br></pre></td></tr></table></figure><h2 id="2-创建podspec文件"><a href="#2-创建podspec文件" class="headerlink" title="2. 创建podspec文件"></a>2. 创建podspec文件</h2><p>podspec是一个库描述文件，描述一个库如何被加入到工程中，下面举个例子如JSONModel的podspec文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Pod::Spec</span>.new <span class="keyword">do</span> |<span class="params">s</span>|</span><br><span class="line">  s.name         = <span class="string">&quot;JSONModel&quot;</span></span><br><span class="line">  s.version      = <span class="string">&quot;1.2.0&quot;</span></span><br><span class="line">  s.summary      = <span class="string">&quot;Magical Data Modelling Framework for JSON. Create rapidly powerful, atomic and smart data model classes.&quot;</span></span><br><span class="line"></span><br><span class="line">  s.homepage     = <span class="string">&quot;http://www.jsonmodel.com&quot;</span></span><br><span class="line">  s.license      = &#123; <span class="symbol">:type</span> =&gt; <span class="string">&#x27;MIT&#x27;</span>, <span class="symbol">:file</span> =&gt; <span class="string">&#x27;LICENSE_jsonmodel.txt&#x27;</span> &#125;</span><br><span class="line">  s.author       = &#123; <span class="string">&quot;Marin Todorov&quot;</span> =&gt; <span class="string">&quot;touch-code-magazine@underplot.com&quot;</span> &#125;</span><br><span class="line">  s.source       = &#123; <span class="symbol">:git</span> =&gt; <span class="string">&quot;https://github.com/icanzilb/JSONModel.git&quot;</span>, <span class="symbol">:tag</span> =&gt; <span class="string">&quot;1.2.0&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 最低支持版本</span></span><br><span class="line">  s.ios.deployment_target = <span class="string">&#x27;6.0&#x27;</span></span><br><span class="line">  s.osx.deployment_target = <span class="string">&#x27;10.7&#x27;</span></span><br><span class="line">  s.watchos.deployment_target = <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line">  s.tvos.deployment_target = <span class="string">&#x27;9.0&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 源文件</span></span><br><span class="line">  s.source_files = <span class="string">&#x27;JSONModel/**/*.&#123;m,h&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># bundle资源文件</span></span><br><span class="line">  <span class="comment"># s.resources = &#x27;Assets&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># public头文件</span></span><br><span class="line">  s.public_header_files = <span class="string">&#x27;JSONModel/**/*.h&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 是否开启ARC模式</span></span><br><span class="line">  s.requires_arc = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 系统依赖框架</span></span><br><span class="line">  s.frameworks = <span class="string">&#x27;Foundation&#x27;</span>, <span class="string">&#x27;UIKit&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第三方依赖库</span></span><br><span class="line">  <span class="comment">#s.dependency &#x27;AFNetworking&#x27;, &#x27;~&gt; 2.6&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 静态库.a或.framework</span></span><br><span class="line">  <span class="comment"># s.vendored_libraries = &#x27;lib/Mipush.a&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># xcconfig配置</span></span><br><span class="line">  <span class="comment">#s.xcconfig     = &#123;&#x27;OTHER_LDFLAGS&#x27; =&gt; &#x27;-ObjC&#x27;&#125;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>podspec可以通过下面命令创建，也可以直接拿上面内容或其他第三方库的podspec进行修改</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod <span class="keyword">spec</span> create podspec_name</span><br></pre></td></tr></table></figure><p>podspec文件是用ruby写的，基本上可以直接看得懂，关于podspec文件官方有详细的说明：<br><a href="https://guides.cocoapods.org/syntax/podspec.html">https://guides.cocoapods.org/syntax/podspec.html</a></p><h2 id="3-推送到github"><a href="#3-推送到github" class="headerlink" title="3. 推送到github"></a>3. 推送到github</h2><p>编辑完podspec文件后，我们把所有文件push到github，push之前，如果在podspec设置source关联tag，见<a href="https://guides.cocoapods.org/syntax/podspec.html#source">这里</a>，那么我们需要给当前的仓库打一个版本标签，版本与podspec描述的版本一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git tag &#x27;1.2.0&#x27;  </span><br><span class="line">$ git push --tags</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><h2 id="4-在cocoapod注册trunk信息"><a href="#4-在cocoapod注册trunk信息" class="headerlink" title="4. 在cocoapod注册trunk信息"></a>4. 在cocoapod注册trunk信息</h2><p>cocoapod使用trunk的方式管理和提交podspec文件，关于trunk的更多说明，参见<a href="http://blog.cocoapods.org/CocoaPods-Trunk">官网</a></p><p>注册trunk</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod trunk register zhengbomo@hotmail<span class="selector-class">.com</span> <span class="string">&#x27;bomo&#x27;</span> <span class="attr">--description</span>=<span class="string">&#x27;iOS player&#x27;</span> <span class="attr">--verbose</span></span><br></pre></td></tr></table></figure><p>执行完成后，你的邮箱会受到一个验证邮件，打开验证通过，验证通过后，可以通过<code>pod trunk me</code>查看自己的信息，下面是我的信息</p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-5-4/35982476.jpg"></p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ACA80164:Responsitory zhengxiankai$ pod trunk me</span><br><span class="line">  <span class="bullet">-</span> <span class="string">Name:     bomo</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Email:    zhengbomo@hotmail.com</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Since:    May 3rd, 01:23</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Pods:     None</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Sessions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">May 3rd, 01:23 - September 8th, 01:25. IP: 106.120.250.167</span></span><br><span class="line">    <span class="attribute">Description</span><span class="punctuation">:</span> <span class="string">iOS player</span></span><br></pre></td></tr></table></figure><p>如果能看到自己注册的信息，就可以了，cocoapod不通过密码验证用户，而是通过session token，这个时候就可以提交pod了</p><h2 id="5-提交podspec文件"><a href="#5-提交podspec文件" class="headerlink" title="5. 提交podspec文件"></a>5. 提交podspec文件</h2><p>注册完成后，先设置一下需要验证的版本</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="keyword">the</span> <span class="built_in">new</span> <span class="built_in">version</span> <span class="built_in">to</span> <span class="number">1.2</span><span class="number">.0</span></span><br><span class="line"><span class="built_in">set</span> <span class="keyword">the</span> <span class="built_in">new</span> tag <span class="built_in">to</span> <span class="number">1.2</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>cd到<code>xxx.podspec</code>文件所在的目录，验证一下本地的podspec文件是否正确</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>pod <span class="class"><span class="keyword">lib</span> <span class="title">lint</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证成功会有提示</span></span><br><span class="line">xxx passed validation.</span><br></pre></td></tr></table></figure><p>上面过程都没有问题，上传podspec到pod服务器</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod trunk <span class="built_in">push</span> xxx.podspec</span><br></pre></td></tr></table></figure><p>等待几分钟，如果验证通过，就直接发布了，如果是更新库，则需要改版本号，方法与发布一样</p><p>自己发布的库只有自己才能修改&#x2F;更新，可以添加所有者授权别人修改，xxx为库名称如SDWebImage</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod trunk<span class="built_in"> add-owner </span>xxx zhengbomo@hotmail.com</span><br></pre></td></tr></table></figure><h2 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h2><p>如果提交完成，就可以通过<code>pod search</code>搜索出来了</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>pod search xxx</span><br></pre></td></tr></table></figure><p>如果搜索不出来，可以尝试更新一下本地的pod库列表</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pod setup</span><br></pre></td></tr></table></figure><h2 id="7-参考链接"><a href="#7-参考链接" class="headerlink" title="7. 参考链接"></a>7. 参考链接</h2><ul><li><a href="http://blog.csdn.net/wzzvictory/article/details/20067595">http://blog.csdn.net/wzzvictory/article/details/20067595</a></li><li><a href="http://yulingtianxia.com/blog/2014/05/26/publish-your-pods-on-cocoapods-with-trunk/">http://yulingtianxia.com/blog/2014/05/26/publish-your-pods-on-cocoapods-with-trunk/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocoapod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>合并和分离.a和.framework库</title>
      <link href="/2016-04-29/merge-ios-lib/"/>
      <url>/2016-04-29/merge-ios-lib/</url>
      
        <content type="html"><![CDATA[<p>Xcode在生成库（.a或.framework）的时候，通常会生成两个版本，一个是用于真机的版本，一个是用于模拟器的版本</p><ul><li>真机：<code>armv7</code>, <code>armv7s</code>, <code>arm64</code>架构</li><li>模拟器：<code>i386</code>, <code>x86_64</code></li></ul><span id="more"></span><p>如果在库和项目在同一个工程中，通常会自动根据当前是模拟器还是真机自动引用相关的库文件</p><p>在使用第三方库的时候通常只有一个.a库，这个库既能用于真机调试，又能用于模拟器调试，这个时候我们需要对不同的架构的库进行合并</p><p>使用<code>lipo</code>对不同架构的库进行合并，在编译的时候会自动识别</p><h2 id="一、-a库合并与拆分"><a href="#一、-a库合并与拆分" class="headerlink" title="一、.a库合并与拆分"></a>一、.a库合并与拆分</h2><p>例如有两个不同架构的库<code>liba-arm64.a</code>, <code>liba-i386.a</code></p><ol><li><p>查看库的架构信息</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lipo -info liba-arm64.<span class="keyword">a</span></span><br><span class="line">input <span class="built_in">file</span> liba-arm64.<span class="keyword">a</span> is <span class="keyword">not</span> <span class="keyword">a</span> fat <span class="built_in">file</span></span><br><span class="line">Non-fat <span class="built_in">file</span>: liba-arm64.<span class="keyword">a</span> is architecture: arm64</span><br></pre></td></tr></table></figure><p>  如果静态库支持多种架构，那么就是一个<code>fat file</code></p></li><li><p>合并两个库</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -<span class="built_in">create</span> liba-arm64.<span class="keyword">a</span> liba-i386.<span class="keyword">a</span> -output liba.<span class="keyword">a</span></span><br></pre></td></tr></table></figure><p>  合并成<code>liba.a</code>到当前目录</p></li><li><p>抽取出<code>arm64</code>库</p>  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo liba.<span class="keyword">a</span> -thin arm64 -output liba-arm64.<span class="keyword">a</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="二、-Framework库合并与拆分"><a href="#二、-Framework库合并与拆分" class="headerlink" title="二、.Framework库合并与拆分"></a>二、.Framework库合并与拆分</h2><p>.framework库与.a库类似，只是.framework库可以包含Header和Bundle，其实相当于一个目录，所以操作的是里面的库文件，而不是<code>xxx.framework</code>文件</p><p>例如有两个不同架构的库</p><ul><li><code>IJKMediaFramework_x86_64.framework</code></li><li><code>IJKMediaFramework_arm64.framework</code></li></ul><ol><li>查看.framework信息  <figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lipo -info IJKMediaFramework_arm64.framework/IJKMediaFramework</span><br><span class="line">input <span class="keyword">file</span> IJKMediaFramework_arm64.framework/IJKMediaFramework <span class="keyword">is</span> <span class="keyword">not</span> a fat <span class="keyword">file</span></span><br><span class="line">Non-fat <span class="keyword">file</span>: IJKMediaFramework_arm64.framework/IJKMediaFramework <span class="keyword">is</span> <span class="keyword">architecture</span>: arm64</span><br></pre></td></tr></table></figure></li><li>合并库  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo -create IJKMediaFramework_x86_64.framework<span class="regexp">/IJKMediaFramework IJKMediaFramework_arm64.framework/</span>IJKMediaFramework -output IJKMediaFramework</span><br></pre></td></tr></table></figure></li></ol><p>  得到通用的库<code>IJKMediaFramework</code>替换到<code>IJKMediaFramework_x86_64.framework/IJKMediaFramework</code>，这时候<code>IJKMediaFramework_x86_64.framework</code>就是通用framework</p><ol start="3"><li>抽取出<code>arm64</code>库  <figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lipo IJKMediaFramework_x86_64.framework/IJKMediaFramework -thin x86_64 -<span class="keyword">output</span> IJKMediaFramework</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、xcode脚本自动合并库"><a href="#三、xcode脚本自动合并库" class="headerlink" title="三、xcode脚本自动合并库"></a>三、xcode脚本自动合并库</h2><p>如果是自己生成的库，有个技巧，xcode生成库的时候自动执行脚本完成合并的操作，需要选择真机和模拟器分别编译一遍</p><p>在Build Phases添加Run Script<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-29/73528845.jpg"><br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-29/37235497.jpg"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译的时候</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$&#123;ACTION&#125;</span>&quot;</span> = <span class="string">&quot;build&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成通用framework的目录</span></span><br><span class="line">INSTALL_DIR=<span class="variable">$&#123;SRCROOT&#125;</span>/Products/<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.framework</span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要合并的framework</span></span><br><span class="line">DEVICE_DIR=<span class="variable">$&#123;BUILD_ROOT&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphoneos/<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.framework</span><br><span class="line">SIMULATOR_DIR=<span class="variable">$&#123;BUILD_ROOT&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphonesimulator/<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.framework</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果已经存在，则删除</span></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">rm</span> -rf <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝Header到目标目录</span></span><br><span class="line"><span class="built_in">cp</span> -R <span class="string">&quot;<span class="variable">$&#123;DEVICE_DIR&#125;</span>/&quot;</span> <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>/&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并framework</span></span><br><span class="line">lipo -create <span class="string">&quot;<span class="variable">$&#123;DEVICE_DIR&#125;</span>/<span class="variable">$&#123;PRODUCT_NAME&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;SIMULATOR_DIR&#125;</span>/<span class="variable">$&#123;PRODUCT_NAME&#125;</span>&quot;</span> -output <span class="string">&quot;<span class="variable">$&#123;INSTALL_DIR&#125;</span>/<span class="variable">$&#123;PRODUCT_NAME&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译完成后打开文件夹</span></span><br><span class="line"><span class="comment">#open &quot;$&#123;DEVICE_DIR&#125;&quot;</span></span><br><span class="line">open <span class="string">&quot;<span class="variable">$&#123;SRCROOT&#125;</span>/Products/<span class="variable">$&#123;PRODUCT_NAME&#125;</span>.framework&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>切换到Release模式，分别切换到模拟器和真机编译一次，编译完成后会自动打开输出文件夹，通过<code>lipo</code>命令查看<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-29/39574369.jpg"></p><p>完成，接下来可以直接用了合并后的库了</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo不生成categories和tags的index页</title>
      <link href="/2016-04-28/hexo-no-generate-categories-tags-index-page/"/>
      <url>/2016-04-28/hexo-no-generate-categories-tags-index-page/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>使用第三方主题的时候，有时候会遇到hexo不能自动生成<code>/categories/index.html</code>和<code>/tags/index.html</code>页面的问题，导致进入分类或标签主页无法正常显示该页面，如下图</p><span id="more"></span><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-28/17727126.jpg"></p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>通过终端执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure><p>会在<code>source</code>文件夹创建两个文件夹<code>categories</code>, <code>tags</code>，并分别创建<code>index.md</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="built_in">source</span></span><br><span class="line">├── categories</span><br><span class="line">|   ├── index.md</span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure><p>编辑<code>index.md</code>文件</p><p><code>source/categories/index.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">type: categories</span><br><span class="line"><span class="section">date: 2016-04-28 17:32:38</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p><code>source/tags/index.md</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">type: tags</span><br><span class="line"><span class="section">date: 2016-04-28 17:32:38</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>从新生成就有了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-28/38418913.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ijkplayer编译</title>
      <link href="/2016-04-20/ijkplayer-build/"/>
      <url>/2016-04-20/ijkplayer-build/</url>
      
        <content type="html"><![CDATA[<p>编译哔哩哔哩开源的<a href="https://github.com/Bilibili/ijkplayer">ijkplayer</a> iOS版本记录，只是为了更方便使用<br>ijkplayer基于<a href="https://ffmpeg.org/">ffmpeg</a>，几乎支持所有视频，音频格式，最低支持到iOS6，在低端机如iphone4，itouch4上测试运行效果良好，搞播放器的同学可以基于这个来做，节省不少时间</p><span id="more"></span><h3 id="编译前"><a href="#编译前" class="headerlink" title="编译前"></a>编译前</h3><p>编译前的准备，需要安装<code>homebrew</code>, <code>git</code>, <code>yasm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install homebrew, git, yasm</span></span><br><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br><span class="line">brew install git</span><br><span class="line">brew install yasm</span><br></pre></td></tr></table></figure><h3 id="设置编译脚本"><a href="#设置编译脚本" class="headerlink" title="设置编译脚本"></a>设置编译脚本</h3><p>使用<code>module-default.sh</code>脚本，默认情况下<code>module.sh</code>指向的是<code>module-lite-hevc.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> config</span><br><span class="line"><span class="built_in">rm</span> module.sh</span><br><span class="line"><span class="built_in">ln</span> -s module-default.sh module.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../ios</span><br><span class="line">sh compile-ffmpeg.sh clean</span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译ffmpeg库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Bilibili/ijkplayer.git ijkplayer-ios</span><br><span class="line"><span class="built_in">cd</span> ijkplayer-ios</span><br><span class="line">git checkout -B latest k0.5.1</span><br><span class="line"></span><br><span class="line">./init-ios.sh</span><br><span class="line"><span class="comment"># 这一步会等待一段时间，需要下载ffmpeg源码</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ios</span><br><span class="line">./compile-ffmpeg.sh clean</span><br><span class="line">./compile-ffmpeg.sh all</span><br></pre></td></tr></table></figure><p>接下来是漫长的等待…  </p><p>编译完成后得到6个lib</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── ios/build/universal/lib</span><br><span class="line">|                        ├── libavcodec.a    </span><br><span class="line">|                        ├── libavfilter.a    </span><br><span class="line">|                        ├── libavformat.a    </span><br><span class="line">|                        ├── libavutil.a    </span><br><span class="line">|                        ├── libswresample.a    </span><br><span class="line">|                        ├── libswscale.a    </span><br></pre></td></tr></table></figure><h2 id="编译ijkplayer库"><a href="#编译ijkplayer库" class="headerlink" title="编译ijkplayer库"></a>编译ijkplayer库</h2><p>打开ios&#x2F;IJKMediaDemo&#x2F;IJKMediaDemo.xcodeproj，编译通过，默认编译为当前architecture（CPU架构）的库，为了方便使用，我们需要framework编译成多架构的库（armv7 i386 x86_64 arm64）我们只需要引用一个文件，就可以在不同的CPU架构使用了</p><p>关于库的合并，可以参考<a href="/2016-04-29/merge-ios-lib">这里</a></p><p>编译完成，得到<code>IJKMediaFramework.framework</code>，支持 armv7 i386 x86_64 arm64</p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-5-4/59697515.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac上让Finder显示隐藏文件</title>
      <link href="/2016-04-20/show-finder-hidden-file/"/>
      <url>/2016-04-20/show-finder-hidden-file/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Mac上默认不显示隐藏文件，对于开发人员来说，有时候需要修改一些隐藏文件中的配置，或是删除隐藏文件，在Finder上操作显得特别麻烦，可以在终端用下面命令让Finder的显示&#x2F;不显示隐藏文件</p></blockquote><span id="more"></span><h2 id="OSX-Mavericks或-OSX-Yosemite-系统以上"><a href="#OSX-Mavericks或-OSX-Yosemite-系统以上" class="headerlink" title="OSX Mavericks或 OSX Yosemite 系统以上"></a>OSX Mavericks或 OSX Yosemite 系统以上</h2><p>显示隐藏文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">true</span> ; killall Finder</span></span><br></pre></td></tr></table></figure><p>不显示隐藏文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">false</span> ; killall Finder</span></span><br></pre></td></tr></table></figure><h2 id="OSX-Mountain-Lion之前"><a href="#OSX-Mountain-Lion之前" class="headerlink" title="OSX Mountain Lion之前"></a>OSX Mountain Lion之前</h2><p>显示隐藏文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">defaults write com.apple.finder AppleShowAllFiles TRUE ; killall Finder</span></span><br></pre></td></tr></table></figure><p>不显示隐藏文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">defaults write com.apple.finder AppleShowAllFiles FALSE ; killall Finder</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git学习笔记</title>
      <link href="/2016-04-19/git-start/"/>
      <url>/2016-04-19/git-start/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用git很久了，期间踩了一些坑，通常来说对git理解和使用不熟的话踩得坑都是致命的（哭死），所以花了点时间总结了一些用法，加深对git的一些理解</p></blockquote><span id="more"></span><h2 id="远程主机remote"><a href="#远程主机remote" class="headerlink" title="远程主机remote"></a>远程主机remote</h2><p>相当于远程仓库的别名（如ip与域名），git上默认主机名为:origin</p><p>查看主机</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote</span><br><span class="line">$ git remote show</span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote show &lt;主机名&gt;</span><br></pre></td></tr></table></figure><p>主机操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add &lt;主机名&gt; &lt;网址&gt;</span><br><span class="line">$ git remote rm &lt;主机名&gt;</span><br><span class="line">$ git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure><p>通常情况下只需要一个远程主机，有时候我们需要本地代码同事push到两个仓库（如：OSChina和github），这个时候可以配置主机的Url</p><p>添加主机的Url，可以添加多个网址</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="string">git</span> <span class="string">remote</span> <span class="built_in">set-url</span> <span class="built_in">--add</span> &lt;主机名&gt; &lt;网址&gt;</span><br></pre></td></tr></table></figure><blockquote><p>当push到主机的时候会自动同步到添加的网址<br>拉去的时候会直接则取第一个url，修改可以在config(<code>.git/config</code>)文件进行修改</p></blockquote><h2 id="克隆仓库clone"><a href="#克隆仓库clone" class="headerlink" title="克隆仓库clone"></a>克隆仓库clone</h2><p>clone是远程操作的第一步，把远程仓库取回到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure><p>指定主机名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone -o &lt;主机名&gt; &lt;版本库的网址&gt; &lt;本地目录名&gt;</span><br></pre></td></tr></table></figure><h2 id="拉取更新fetch"><a href="#拉取更新fetch" class="headerlink" title="拉取更新fetch"></a>拉取更新fetch</h2><p>当远程仓库有更新的时候，可以通过fetch拉取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><p>远程分支名缺省，则拉去与本地分支有track关系远程分支<br>拉去后不会merge到当前分支，而是放到一个临时分支上</p><h2 id="拉取并合并更新pull"><a href="#拉取并合并更新pull" class="headerlink" title="拉取并合并更新pull"></a>拉取并合并更新pull</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>推送更新</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><blockquote><p>如果分支不存在，则创建<br>如果本地分支名为空，表示删除远程分支</p></blockquote><p>删除远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push &lt;远程主机名&gt; --delete &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><blockquote><p>只要没有push的改变都只是在本地，包括branch，commit，reset，都可以撤销和删除</p></blockquote><h2 id="比较pull和fetch"><a href="#比较pull和fetch" class="headerlink" title="比较pull和fetch"></a>比较pull和fetch</h2><p>pull相当于fetch+merge</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin Development  </span><br><span class="line"># 相当于拉取完直接合并到本地分支上</span><br><span class="line">$ git fetch origin Development:Development  </span><br><span class="line">$ git merge origin/Development  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ git fetch  </span><br><span class="line"># 命令相当于创建一个临时分支，用于拉取  </span><br><span class="line">$ git fetch origin Development:tmp</span><br></pre></td></tr></table></figure><h2 id="分支-Branck"><a href="#分支-Branck" class="headerlink" title="分支 Branck"></a>分支 Branck</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 查看分支(所有)</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 查看本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 查看远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 创建分支（不会自动切换）</span><br><span class="line">$ git branch TestBranck</span><br><span class="line"></span><br><span class="line"># 切换分支</span><br><span class="line">$ git checkout TestBranck</span><br><span class="line"></span><br><span class="line"># 创建并切换</span><br><span class="line">$ git checkout -b TestBranck</span><br><span class="line"></span><br><span class="line"># 推送本地分支到主机</span><br><span class="line">$ git push origin TestBranck</span><br><span class="line"></span><br><span class="line"># 删除分支（本地）</span><br><span class="line">$ git branch -d TestBranck</span><br><span class="line"></span><br><span class="line"># 删除远程分支（本地）</span><br><span class="line">$ git push origin :TestBranck</span><br></pre></td></tr></table></figure><h2 id="提交-Commit"><a href="#提交-Commit" class="headerlink" title="提交 Commit"></a>提交 Commit</h2><ol><li><p>修改&#x2F;添加文件 <code>test.txt</code> 此时文件没有被跟踪，状态为 <code>Unchecked Files</code><br>丢弃对文件的添加修改，不带文件则撤销全部工作区的修改（__不可恢复__，慎用）</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- text.txt</span><br></pre></td></tr></table></figure></li><li><p>把 <code>test.txt</code> 文件add到当前分支的暂存区，文件状态为 <code>Changed to be commited  </code></p>  <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">add</span> test.txt</span><br></pre></td></tr></table></figure><p>添加文件到暂存区后可以取消暂存（此命令不会影响工作区，如果不带文件则撤销全部）</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD <span class="keyword">test</span>.txt</span><br></pre></td></tr></table></figure></li><li><p>继续修改文件 <code>test.txt</code>，此时暂存区的文件和工作区的文件不一样了，此时在工作区的副本文件的状态为 <code>Changes not staged for commit</code></p></li><li><p>提交<code>test.txt</code>文件</p>  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit 添加了一个<span class="keyword">test</span>.txt文件</span><br></pre></td></tr></table></figure><p>  撤销提交，撤销commit比较麻烦，需要拿到上一次提交的commitId</p>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard commit_id</span></span><br></pre></td></tr></table></figure><p>  如果是撤销上一次commit，等价于用下面命令</p>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></span><br></pre></td></tr></table></figure></li><li><p>只有添加到暂存区的文件才能提交，所以我们只提交了第一次修改，第二次修改没有被提交</p></li></ol><blockquote><p>暂存区的文件都是只读的，不能修改，只有工作区的文件才能修改</p></blockquote><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li><p>发现刚刚commit漏提交了一个文件（或者提交说明写错了），需要修改上一次commit</p></li><li><p>解决一：此时为push到远程仓库，修正上一个commit，把相关需要补充的文件或修改add到HEAD暂存区（保持commitId不变）<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt</span><br></pre></td></tr></table></figure><br>执行<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure><br>上面命令会追加暂存区的提交到上一次commit，并重新编辑提交说明</p></li><li><p>解决二：撤销上一个commit，然后重新commit（新的commitId）<br>撤销上一次提交<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure><br>回复到指定的commitid<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard commit_id</span><br></pre></td></tr></table></figure><br>上面操作不会影响工作区</p></li><li><p>如果commit已经push到远程<br>  有时候我们在本地修改后并且push到远程，这个时候发现，需要撤销，如果我们使用<code>git reset</code>撤销后push到远程主机</p>  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --HARD HEAD^      <span class="comment"># 撤销上一次commit</span></span><br><span class="line">$ git push origin <span class="keyword">master</span>      <span class="title"># 这时候push</span>会报错，因为本地的分支比远程的分支落后</span><br></pre></td></tr></table></figure><p>  上面push会报错，有两种方式解决</p></li><li><p>使用<code>fast-forward</code>方式推送，直接覆盖远程分支，这种方式有风险，有可能在这之前有其他人的push都会一并被覆盖，慎用<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">push</span> -f <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure></p></li><li><p><code>reset</code>换成<code>revert</code>命令，这种方式会新增一个commit，而不是回退，这个时候当前的分支就不会比远程分支落后了，两者区别见后面<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git revert head^                                        # 撤销上一次commit，恢复到AAAA，并生成新的commitId</span><br><span class="line"></span><br><span class="line"># 这个时候可能会产生冲突，解决冲突，commit</span><br><span class="line">$ git push origin master                                  </span><br></pre></td></tr></table></figure><br>推荐使用这种方式解决远程恢复的问题</p></li></ol><h2 id="文件操作（添加，修改，删除，重命名）"><a href="#文件操作（添加，修改，删除，重命名）" class="headerlink" title="文件操作（添加，修改，删除，重命名）"></a>文件操作（添加，修改，删除，重命名）</h2><p>本地对文件的所以修改，都存放在工作区，需要下面命令将修改放到暂存区，才能提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add test.txt  </span><br><span class="line">$ git rm test.txt  </span><br><span class="line">$ git mv test.txt</span><br></pre></td></tr></table></figure><blockquote><p>通常这些操作都借助GUI工具完成</p></blockquote><h2 id="撤销提交-reset-x2F-revert"><a href="#撤销提交-reset-x2F-revert" class="headerlink" title="撤销提交 reset&#x2F;revert"></a>撤销提交 reset&#x2F;revert</h2><p>保留原来的commit，会退到历史的点，创建新commit并commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard</span><br></pre></td></tr></table></figure><p>重置后的修改会被放到暂存区，需要自己commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --soft</span><br></pre></td></tr></table></figure><p>mixed为默认参数，重置后的所有修改会被放到工作区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --mixed</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 会清空工作区</span><br><span class="line">$ git reset --soft 不会清空工作区</span><br></pre></td></tr></table></figure><p>在使用之前，尽量保证工作区和暂存区没有文件，避免多重冲突</p><h2 id="历史是不可以修改的Reflog"><a href="#历史是不可以修改的Reflog" class="headerlink" title="历史是不可以修改的Reflog"></a>历史是不可以修改的Reflog</h2><p>  git跟踪过的所有的操作都会成为历史，所有的操作都是添加，所以远程的所有操作理论上都是可以恢复的<br>  git能跟踪所有commit, checkout, reset命令，所有这些命令都可以恢复，可以通过reflog查看所有这些操作<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><br>  恢复到指定的SHA<br>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;SHA&gt;</span><br></pre></td></tr></table></figure></p><h2 id="暂存管理Stash"><a href="#暂存管理Stash" class="headerlink" title="暂存管理Stash"></a>暂存管理Stash</h2><blockquote><p>有时候我们对本地修改到一半时，这时候要去拉去远程更新，为了防止冲突，可以把本地的工作现场保存到另一个暂存区，拉去完成后，在恢复当前工作现场。  </p></blockquote><p>Stash可以当前工作区和暂存区的所有修改保存起来，暂存区是全局的，不同分支也共享一个Stash，Stash可以存放多个工作现场</p><p>保存当前工作现场（保存暂存区的文件，不保存工作区的文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br></pre></td></tr></table></figure><p>保存当前工作现场（保存暂存区和工作区的文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git stash --include-untracked</span><br><span class="line">#或者</span><br><span class="line">$ git stash -u</span><br></pre></td></tr></table></figure><blockquote><p>注意：暂存工作区文件有风险，当工作区的文件存在冲突的时候，工作区的文件无法恢复，并且无法自动解决冲突，暂存区的文件可以</p></blockquote><p>恢复工作现场</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#恢复上一个保存的工作现场</span><br><span class="line">$ git stash pop</span><br><span class="line">#恢复到指定工作现场（并从stash堆中删除）</span><br><span class="line">$ git stash pop stash@&#123;num&#125;</span><br><span class="line">#恢复到某个工作现场（不从stash堆中删除）</span><br><span class="line">$ git stash apply stash@&#123;num&#125;</span><br></pre></td></tr></table></figure><h2 id="查看文件状态（暂存区和工作区）"><a href="#查看文件状态（暂存区和工作区）" class="headerlink" title="查看文件状态（暂存区和工作区）"></a>查看文件状态（暂存区和工作区）</h2><blockquote><p>通常我们通过GUI工具查看</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure><h2 id="取消git版本控制"><a href="#取消git版本控制" class="headerlink" title="取消git版本控制"></a>取消git版本控制</h2><p>如果一个目录取消git的版本控制，恢复成正常的目录，可以直接把<code>.git</code>目录删了，包含目录下所有文件和该目录本身</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> -rf .git</span><br></pre></td></tr></table></figure><h2 id="分歧与Fast-Forward"><a href="#分歧与Fast-Forward" class="headerlink" title="分歧与Fast-Forward"></a>分歧与Fast-Forward</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">       <span class="selector-id">#1</span>     <span class="selector-id">#2</span>                <span class="selector-id">#3</span>         <span class="selector-id">#4</span></span><br><span class="line"><span class="selector-tag">master</span> 〇 ─── 〇 ─────────────── 〇 ─────── 〇</span><br><span class="line">              |                  ↑         ↑</span><br><span class="line">           <span class="selector-tag">A</span>  ├───────── 〇 ──────         ↑</span><br><span class="line">              | <span class="selector-tag">checkout</span>     <span class="selector-tag">push</span>         ↑</span><br><span class="line">              |                          ↑</span><br><span class="line">           <span class="selector-tag">B</span>  └───────── 〇 ──────────── ↑</span><br><span class="line">                <span class="selector-tag">checkout</span>       <span class="selector-tag">push</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>A和B都从master分支的的<code>#2</code>checkout代码，假设A对文件<code>README.md</code>做了修改，并push到master，B也对文件<code>README.md</code>做了修改，然后push到master，在默认情况下这个时候就会发生冲突，必须先<code>fetch</code>同步远程最新的代码并<code>merge</code>解决冲突后再提交才能push成功，这是为了防止B的修改直接覆盖A的修改</p><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-5-3/93841297.jpg"></p><p>在默认情况下系统为<code>non-fast-forward</code>，即非快进模式，必须以时间顺序提交，也就是B必须基于<code>#3</code>的代码修改才能提交</p><p>解决方法：<br>1、fetch远程代码后merge解决冲突，然后commmit，再push<br>2、忽略冲突，直接覆盖远程代码，可以开启<code>fast-forward</code>模式强制覆盖远程的操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push -f</span><br></pre></td></tr></table></figure><p>此操作还会覆盖远程的commit记录，尽量少用，<code>fast-forward</code>模式，特别是在多人开发的时候，会覆盖别人的代码，还会覆盖别人的提交，不利于回滚代码</p><h2 id="rebase与merge"><a href="#rebase与merge" class="headerlink" title="rebase与merge"></a>rebase与merge</h2><p>rebase和merge都有合并代码的功能，二者的区别在于</p><ul><li>merge合并后会保留两个分支的所有commit</li><li>rebase合并后会丢弃合并分支的commit</li></ul><p>如下两个分支</p><ul><li>master：A &lt;- B &lt;- C &lt;- D  </li><li>test: A &lt;- B &lt;- C &lt;- E</li></ul><p>__Merge__：合并test到master<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-5-3/65101357.jpg"><br>合并之后为：A &lt;- B &lt;- C &lt;- D &lt;- E &lt;- M</p><p>__Rebase__：合并test到master<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-5-3/71450740.jpg">  </p><p>合并之后为：A &lt;- B &lt;- C &lt;- D &lt;- R</p><blockquote><p>使用rebase可以减少一些多余的commit，让分支历史基本在一条直线上，有利有弊，看使用场景选择merge或rebase</p></blockquote><p>使用<code>git pull</code>默认使用merge，可以加参数<code>--rebase</code>让其使用rebase合并</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull --rebase  </span><br></pre></td></tr></table></figure><p>合并后，当git无法自动解决冲突的时候，查看分支会出现<code>(no branch, rebasing master)</code>，表示不再任何分支上工作</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ACA80164:</span>Test <span class="keyword">bomo$ </span>git <span class="keyword">branch</span></span><br><span class="line"><span class="keyword"></span>* (no <span class="keyword">branch, </span>rebasing master)</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>这个时候手动解决冲突，然后执行<code>add</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line"># 注意，不需要commit</span><br><span class="line">$ git rebase --continue</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>所有commmit和reset操作都是可以恢复的（reflog&#x2F;reset&#x2F;revert）</li><li>工作区的文件通常是不可恢复的</li><li>checkout是撤销工作区修改，不可恢复，慎用checkout</li><li>pull之前防止冲突，通常把所有文件放到暂存区（为了防止冲突），然后stash，解决冲突，在stash pop</li><li>只有放到暂存区的文件的冲突才能被识别，如果是工作去的冲突，会直接被覆盖</li><li>从工作区<code>add</code>文件到暂存区不会识别冲突</li><li>所有的commit都可以恢复，建议多commit（提高代码粒度）</li><li>所有的操作都是本地的，对远程仓库的操作只有同步操作，如果要修改远程仓库，在本地改完push到服务器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除远程分支</title>
      <link href="/2016-04-19/delete-remote-branch/"/>
      <url>/2016-04-19/delete-remote-branch/</url>
      
        <content type="html"><![CDATA[<p>有时候会不消息把本地一些小分支push到远程服务器，删除远程分支与本地不一样，可以通过下面命令删除</p><span id="more"></span><p>删除本地分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D branch-name</span><br></pre></td></tr></table></figure><p>解除远程分支的track关系（本地）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -r -d origin/branch-name</span><br></pre></td></tr></table></figure><p>推送空到远程分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :branch-name</span><br></pre></td></tr></table></figure><p>也可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin --delete master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo和github pages搭建博客</title>
      <link href="/2016-04-18/hexo-for-blog/"/>
      <url>/2016-04-18/hexo-for-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>hexo是一个基于node.js的静态博客程序，可以方便的生成静态网页（纯html）支持多个平台（Windows&#x2F;MAC&#x2F;Linux），风格优雅，更适合写技术博客，与hexo类似的博客程序还有jekyll，jekyll被github着力推荐官方就提供了jekyll教程，但是jekyll是基于ruby写的，并且关于代码高亮没找到比较好的方案，就选择了用hexo</p><span id="more"></span><h2 id="2-配置环境"><a href="#2-配置环境" class="headerlink" title="2. 配置环境"></a>2. 配置环境</h2><h3 id="2-1-安装git"><a href="#2-1-安装git" class="headerlink" title="2.1 安装git"></a>2.1 安装git</h3><p>作者用的是mac，可以使用<a href="http://brew.sh/">brew</a>下面命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install git</span></span><br></pre></td></tr></table></figure><p>也可以直接上<a href="https://git-scm.com/download/">git官网</a>下载安装</p><h3 id="2-2-安装node-js"><a href="#2-2-安装node-js" class="headerlink" title="2.2 安装node.js"></a>2.2 安装node.js</h3><p>同样的，mac可以使用brew安装，新版的node.js已经包含npm工具，不需要再另外安装了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install node</span></span><br></pre></td></tr></table></figure><p>可以通过下面命令检查是否已安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node -v</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm -v</span></span><br></pre></td></tr></table></figure><p>如果是windows用户可以通过官网下载 <a href="http://nodejs.org/">jode.js</a></p><h3 id="2-3-Hexo安装"><a href="#2-3-Hexo安装" class="headerlink" title="2.3 Hexo安装"></a>2.3 Hexo安装</h3><p>上面的安装完成后，接下来安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g   #-g表示全局安装, npm默认为当前项目安装</span><br><span class="line">hexo init blog            #在当前目录下新建blog目录初始化博客</span><br><span class="line">cd blog                   #进入blog目录</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">npm install</span>               </span><br><span class="line">hexo generate             #根据当前配置生成静态页面</span><br><span class="line">hexo server               #启动本地服务，默认为：[http://localhost:4000/](http://localhost:4000/)</span><br></pre></td></tr></table></figure><p>接下来就可以通过<a href="http://localhost:4000/">http://localhost:4000/</a>查看效果了<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-18/1497950.jpg" alt="hello hexo"></p><h2 id="3-配置github-pages"><a href="#3-配置github-pages" class="headerlink" title="3. 配置github pages"></a>3. 配置github pages</h2><p>每个github账户都可以有一个外部空间&#x2F;Responsitory，可以直接通过<code>用户名.github.io</code>访问到该仓库的内容</p><ul><li>在github上新增一个responsitory，仓库名为 <code>用户名.github.io</code> 或 <code>用户名.github.com</code></li><li>创建完成后，github会自动将 用户名.github.io指向该仓库，默认访问根目录下的<code>index.html</code>页面</li><li>可以进入Responsitory的Setting页查看</li></ul><p>github会提供几个模板搭建站点，我们可以不用他提供的模板，可以在仓库里面，添加一个简单的index.html文件，如果能通过<code>用户名.github.com</code>访问，则表明创建成功了</p><h2 id="4-写博客"><a href="#4-写博客" class="headerlink" title="4. 写博客"></a>4. 写博客</h2><p>hexo的文章存放在source目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── <span class="built_in">source</span>  </span><br><span class="line">|   ├── _posts    <span class="comment">#存放文章  </span></span><br><span class="line">|   └── _drafts   <span class="comment">#存放草稿</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new post <span class="string">&quot;postName&quot;</span>        <span class="comment"># 在source/_posts 目录下创建postName.md文件</span></span></span><br></pre></td></tr></table></figure><p>创建文件的命名格式可以在_config.yml文件配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span></span><br></pre></td></tr></table></figure><p>文件创建完成后会自动生成以下格式（可以自己添加）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">使用Hexo和github</span> <span class="string">pages搭建博客</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2016-04-18 19:50:26</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">blog</span>                  <span class="comment"># 分类</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="string">blogs</span>, <span class="string">hexo</span>]               <span class="comment"># 标签，格式：[标签, 标签2]</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>关与写作的各种参数可以参见：<a href="https://hexo.io/docs/writing.html">https://hexo.io/docs/writing.html</a></p><p>写完后预览的时候发现，文章在首页就全部显示出来了，如果不想全部显示，可以在文章中间添加下面标记，在首页列表就会出现<code>Read More</code>的标记</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure><p>Hexo支持使用Markdown语法写文章，我比较习惯用Atom写Markdown，Atom有个hexo插件</p><h2 id="5-主题"><a href="#5-主题" class="headerlink" title="5. 主题"></a>5. 主题</h2><p>官方自带主题基本够用，有能力可以自己改造，当然，网上已经有很多人做了一些很好看的主题了，我们可以直接拿来用，下面是官方列出的一些主题，找到喜欢的可以直接用</p><blockquote><p><a href="https://github.com/hexojs/hexo/wiki/Themes">https://github.com/hexojs/hexo/wiki/Themes</a><br><a href="https://hexo.io/themes/">https://hexo.io/themes</a></p></blockquote><p>在hexo上，主题放在themes目录下，我们只需要把别人做好的主题clone下来就好了，然后在<code>_config.yml</code>修改一下配置<br>例如：我们可以<a href="https://github.com/xiangming/landscape-plus">https://github.com/xiangming/landscape-plus</a>这个主题clone下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:xiangming/landscape-plus.git themes/landscape-plus</span><br></pre></td></tr></table></figure><p>修改设置<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">landscape-plus</span></span><br></pre></td></tr></table></figure><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-18/53534541.jpg"></p><h2 id="6-添加多说评论插件"><a href="#6-添加多说评论插件" class="headerlink" title="6. 添加多说评论插件"></a>6. 添加多说评论插件</h2><p>到<a href="http://duoshuo.com/">多说官网</a>注册和创建一个站点</p><p>修改配置<br>到<code>themes/landscape-plus/_config.yml</code>添加多说的配置，shortname即注册的站点名称</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Duoshuo</span></span><br><span class="line"><span class="attr">duoshuo_shortname:</span> <span class="string">bomo</span></span><br></pre></td></tr></table></figure><p>参见官方说明，替换评论相关的代码<a href="http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9">http://dev.duoshuo.com/threads/541d3b2b40b5abcd2e4df0e9</a></p><p>完成，如下图评论有了<br><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-18/61189510.jpg" alt="评论"></p><h2 id="7-部署到github上"><a href="#7-部署到github上" class="headerlink" title="7. 部署到github上"></a>7. 部署到github上</h2><p>修改配置<code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/zhengbomo/zhengbomo.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><p>部署hexo到git上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo deploy</span></span><br></pre></td></tr></table></figure><p>部署过程需要输入账号密码，然后会push到github上，参考：<a href="https://hexo.io/docs/deployment.html">https://hexo.io/docs/deployment.html</a></p><blockquote><p>hexo部署时会把最终生成的博客文件（public目录下的文件）push到git远程仓库，而博客程序还是在本地，当我们切换电脑的时候，无法对博客进行重新编辑和发布，这个时候我们可以在git添加一个分支<code>hexo</code>用来存放博客程序和编写的内容，详情可以参见： <a href="/2016-04-19/hexo-branch/">git创建分支hexo存放博客程序</a></p></blockquote><h2 id="8-域名绑定"><a href="#8-域名绑定" class="headerlink" title="8. 域名绑定"></a>8. 域名绑定</h2><blockquote><p>通常域名在<a href="https://www.godaddy.com/">godaddy</a>注册比较靠谱，这个是最大的域名提供商，而且不需要备案，支持支付宝付款，购买的时候可以使用优惠码会便宜一些，网上有很多优惠码，可以自行搜索，购买过程很简单，这里就不贴了</p></blockquote><ol><li>注册和配置DNS服务器<br><a href="https://www.godaddy.com/">Godaddy</a>自带的域名解析服务器比较慢，在国内推荐使用<a href="https://www.dnspod.cn/">DNSpod</a>：快，免费，稳定。</li></ol><ul><li><p>到DNSpod注册登陆，然后到用户中心，添加域名，例如我的域名为<code>bomobox.org</code><br>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-29/12170815.jpg"></p></li><li><p>进入设置<br>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-29/72132532.jpg"><br>添加两个A记录指向github提供的ip，参见<a href="https://help.github.com/articles/setting-up-an-apex-domain/">这里</a></p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">192.30.252.153</span></span><br><span class="line"><span class="number">192.30.252.154</span></span><br></pre></td></tr></table></figure><p>添加一个CNAME记录指向自己的github域名：<code>username.github.io</code><br>把其他的删除</p></li></ul><ol start="2"><li>注册域名和配置DNS</li></ol><ul><li><p>到<a href="https://www.godaddy.com/">Godaddy</a>购买域名完成后完成后进入<a href="https://mya.godaddy.com/">MyAccount</a><br>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-29/12984808.jpg"></p></li><li><p>进入<code>DNS Manager</code>修改DNS服务器</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1g1ns1<span class="selector-class">.dnspod</span><span class="selector-class">.net</span></span><br><span class="line">f1g1ns2<span class="selector-class">.dnspod</span>.net</span><br></pre></td></tr></table></figure><p><img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-29/60235109.jpg"></p></li></ul><ol start="3"><li>到github仓库的根目录添加CNAME文件，文件内添加自己的域名，否则会出现404访问错误，也可以在hexo的<code>source</code>目录下添加，然后不熟到github<br>  <img src="http://7xqzvt.com1.z0.glb.clouddn.com/16-4-29/76622961.jpg"></li></ol><p>上面步骤设置完成后可能会有几个小时的延迟，才能生效，总的来说还是比较简单的</p><h2 id="9-问题"><a href="#9-问题" class="headerlink" title="9. 问题"></a>9. 问题</h2><p>在使用别人的主题的时候可能会报错或者有些功能用不了，原因可能是部分插件没有安装，例如RSS用不了，那可能是<code>hexo-generator-feed</code>没安装，下面列举一些常用的插件，建议都安装，没有用到也没有关系，需要先到hexo程序目录下在执行命令，插件位于<code>node_modules</code>目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-feed --save                  <span class="comment">#支持RSS</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-sitemap --save               <span class="comment">#生成站点地图</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-baidu-sitemap --save         <span class="comment">#生成百度站点地图</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-html-minifier --save                   <span class="comment">#HTML 压缩</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-uglify --save                          <span class="comment">#JavaScript 压缩</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-clean-css --save                       <span class="comment">#CSS 压缩插件</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-seo-friendly-sitemap --save  <span class="comment">#SEO优化</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git --save                    <span class="comment">#git部署插件</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>并在博客配置文件<code>_config.yml</code>配置plugin</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Plugins:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo-generator-sitemap</span></span><br></pre></td></tr></table></figure><blockquote><p>更多插件可以在<a href="https://hexo.io/plugins/">https://hexo.io/plugins/</a>找到</p></blockquote><h2 id="10-Atom插件"><a href="#10-Atom插件" class="headerlink" title="10. Atom插件"></a>10. Atom插件</h2><p>由于我编写md使用的是Atom，这里推荐几个Atom上的插件</p><ul><li><a href="https://atom.io/packages/markdown-scroll-sync">markdown-scroll-sync</a>：Markdown预览实时滚动，自带的预览不支持实时滚动</li><li><a href="https://atom.io/packages/markdown-writer">markdown-writer</a>：Markdown协作工具</li><li><a href="https://atom.io/packages/date">Date</a>：快速插入当前时间的工具</li><li><a href="https://atom.io/packages/atom-hexo">atom-hexo</a>：快速添加draft，post，publish，deploy</li></ul><h2 id="11-总结"><a href="#11-总结" class="headerlink" title="11. 总结"></a>11. 总结</h2><p>使用hexo搭建博客环境还是非常方便的，基本上都是自动的，当然还有一些详细的配置，例如分页，分类，评论等，Hexo支持的插件也相当多的，接下来可以好好写博客了，以后再慢慢完善了，今天先到这里</p><h2 id="12-参考链接"><a href="#12-参考链接" class="headerlink" title="12. 参考链接"></a>12. 参考链接</h2><blockquote><p><a href="https://hexo.io/">https://hexo.io</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blogs </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLCipher数据库加解密</title>
      <link href="/2016-04-18/sqlcipher-start/"/>
      <url>/2016-04-18/sqlcipher-start/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>使用SQLite数据库的时候，有时候对于数据库要求比较高，特别是在iOS8.3之前，未越狱的系统也可以通过工具拿到应用程序沙盒里面的文件，这个时候我们就可以考虑对SQLite数据库进行加密，这样就不用担心sqlite文件泄露了</p><span id="more"></span><p>通常数据库加密一般有两种方式</p><ol><li>对所有数据进行加密</li><li>对数据库文件加密</li></ol><blockquote><p>第一种方式虽然加密了数据，但是并不完全，还是可以通过数据库查看到表结构等信息，并且对于数据库的数据，数据都是分散的，要对所有数据都进行加解密操作会严重影响性能，通常的做法是采取对文件加密的方式</p></blockquote><p>iOS 免费版的sqlite库并不提供了加密的功能，SQLite只提供了加密的接口，但并没有实现，iOS上支持的加密库有下面几种</p><ul><li><p><a href="http://www.hwaci.com/sw/sqlite/see.html">The SQLite Encryption Extension (SEE)</a></p><ul><li>收费，有以下几种加密方式<blockquote><p>RC4<br>AES-128 in OFB mode<br>AES-128 in CCM mode<br>AES-256 in OFB mode</p></blockquote></li></ul></li><li><p><a href="http://www.sqlite-encrypt.com/">SQLiteEncrypt</a></p><ul><li>收费，使用AES加密</li></ul></li><li><p><a href="http://sqlite-crypt.com/index.htm">SQLiteCrypt</a></p><ul><li>收费，使用256-bit AES加密</li></ul></li><li><p><a href="http://sqlcipher.net/">SQLCipher</a></p><ul><li>开源，托管在<a href="https://github.com/sqlcipher/sqlcipher">github</a>上，实现了SQLite官方的加密接口，也加了一些新的接口，详情参见<a href="https://www.zetetic.net/sqlcipher/sqlcipher-api/">这里</a></li></ul></li></ul><p>前三种都是收费的，SQLCipher是开源的，这里我们使用<a href="https://www.zetetic.net/sqlcipher/">SQLCipher</a></p><h2 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h2><p>如果你使用cocoapod的话就不需要自己配置了，为了方便，我们直接使用<a href="https://github.com/ccgus/fmdb">FMDB</a>进行操作数据库，FMDB也支持SQLCipher</p><blockquote><p>pod ‘FMDB&#x2F;SQLCipher’, ‘~&gt; 2.6.2’</p></blockquote><h3 id="打开加密数据库"><a href="#打开加密数据库" class="headerlink" title="打开加密数据库"></a>打开加密数据库</h3><p>使用方式与原来的方式一样，只需要数据库open之后调用setKey设置一下秘钥即可<br>下面摘了一段FMDatabase的open函数，在sqlite3_open成功后调用setKey方法设置秘钥</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">BOOL</span>)open &#123;</span><br><span class="line">    <span class="keyword">if</span> (_db) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> err = sqlite3_open([<span class="keyword">self</span> sqlitePath], &amp;_db );</span><br><span class="line">    <span class="keyword">if</span>(err != SQLITE_OK) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@&quot;error opening!: %d&quot;</span>, err);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//数据库open后设置加密key</span></span><br><span class="line">        [<span class="keyword">self</span> setKey:encryptKey_];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_maxBusyRetryTimeInterval &gt; <span class="number">0.0</span>) &#123;</span><br><span class="line">        <span class="comment">// set the handler</span></span><br><span class="line">        [<span class="keyword">self</span> setMaxBusyRetryTimeInterval:_maxBusyRetryTimeInterval];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了不修改FMDB的源代码，我们可以继承自FMDatabase类重写需要setKey的几个方法，这里我继承FMDatabase定义了一个 <code>FMEncryptDatabase</code> 类，提供打开加密文件的功能（具体定义见 <a href="https://github.com/zhengbomo/sqlcipherDemo">Demo</a> ）</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FMEncryptDatabase</span> : <span class="title">FMDatabase</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)databaseWithPath:(<span class="built_in">NSString</span>*)aPath encryptKey:(<span class="built_in">NSString</span> *)encryptKey;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithPath:(<span class="built_in">NSString</span>*)aPath encryptKey:(<span class="built_in">NSString</span> *)encryptKey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>用法与FMDatabase一样，只是需要传入secretKey</p><h2 id="SQLite数据库加解密"><a href="#SQLite数据库加解密" class="headerlink" title="SQLite数据库加解密"></a>SQLite数据库加解密</h2><p>SQLCipher提供了几个命令用于加解密操作</p><h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./sqlcipher plaintext.db  </span><br><span class="line">sqlite&gt; ATTACH DATABASE &#x27;encrypted.db&#x27; AS encrypted KEY &#x27;testkey&#x27;;  </span><br><span class="line">sqlite&gt; SELECT sqlcipher_export(&#x27;encrypted&#x27;);  </span><br><span class="line">sqlite&gt; DETACH DATABASE encrypted;  </span><br></pre></td></tr></table></figure><ol><li>打开非加密数据库</li><li>创建一个新的加密的数据库附加到原数据库上</li><li>导出数据到新数据库上</li><li>卸载新数据库</li></ol><h4 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./sqlcipher encrypted.db  </span><br><span class="line">sqlite&gt; PRAGMA key = &#x27;testkey&#x27;;  </span><br><span class="line">sqlite&gt; ATTACH DATABASE &#x27;plaintext.db&#x27; AS plaintext KEY &#x27;&#x27;;  -- empty key will disable encryption</span><br><span class="line">sqlite&gt; SELECT sqlcipher_export(&#x27;plaintext&#x27;);  </span><br><span class="line">sqlite&gt; DETACH DATABASE plaintext;  </span><br></pre></td></tr></table></figure><ol><li>打开加密数据库</li><li>创建一个新的不加密的数据库附加到原数据库上</li><li>导出数据到新数据库上</li><li>卸载新数据库</li></ol><h3 id="代码操作"><a href="#代码操作" class="headerlink" title="代码操作"></a>代码操作</h3><pre><code class="objc">/** encrypt sqlite database to new file */+ (BOOL)encryptDatabase:(NSString *)sourcePath targetPath:(NSString *)targetPath encryptKey:(NSString *)encryptKey&#123;    const char* sqlQ = [[NSString stringWithFormat:@&quot;ATTACH DATABASE &#39;%@&#39; AS encrypted KEY &#39;%@&#39;;&quot;, targetPath, encryptKey] UTF8String];    sqlite3 *unencrypted_DB;    if (sqlite3_open([sourcePath UTF8String], &amp;unencrypted_DB) == SQLITE_OK) &#123;        char *errmsg;        // Attach empty encrypted database to unencrypted database        sqlite3_exec(unencrypted_DB, sqlQ, NULL, NULL, &amp;errmsg);        if (errmsg) &#123;            NSLog(@&quot;%@&quot;, [NSString stringWithUTF8String:errmsg]);            sqlite3_close(unencrypted_DB);            return NO;        &#125;        // export database        sqlite3_exec(unencrypted_DB, &quot;SELECT sqlcipher_export(&#39;encrypted&#39;);&quot;, NULL, NULL, &amp;errmsg);        if (errmsg) &#123;            NSLog(@&quot;%@&quot;, [NSString stringWithUTF8String:errmsg]);            sqlite3_close(unencrypted_DB);            return NO;        &#125;        // Detach encrypted database        sqlite3_exec(unencrypted_DB, &quot;DETACH DATABASE encrypted;&quot;, NULL, NULL, &amp;errmsg);        if (errmsg) &#123;            NSLog(@&quot;%@&quot;, [NSString stringWithUTF8String:errmsg]);            sqlite3_close(unencrypted_DB);            return NO;        &#125;        sqlite3_close(unencrypted_DB);        return YES;    &#125;    else &#123;        sqlite3_close(unencrypted_DB);        NSAssert1(NO, @&quot;Failed to open database with message &#39;%s&#39;.&quot;, sqlite3_errmsg(unencrypted_DB));        return NO;    &#125;&#125;/** decrypt sqlite database to new file */+ (BOOL)unEncryptDatabase:(NSString *)sourcePath targetPath:(NSString *)targetPath encryptKey:(NSString *)encryptKey&#123;    const char* sqlQ = [[NSString stringWithFormat:@&quot;ATTACH DATABASE &#39;%@&#39; AS plaintext KEY &#39;&#39;;&quot;, targetPath] UTF8String];    sqlite3 *encrypted_DB;    if (sqlite3_open([sourcePath UTF8String], &amp;encrypted_DB) == SQLITE_OK) &#123;        char* errmsg;        sqlite3_exec(encrypted_DB, [[NSString stringWithFormat:@&quot;PRAGMA key = &#39;%@&#39;;&quot;, encryptKey] UTF8String], NULL, NULL, &amp;errmsg);        // Attach empty unencrypted database to encrypted database        sqlite3_exec(encrypted_DB, sqlQ, NULL, NULL, &amp;errmsg);        if (errmsg) &#123;            NSLog(@&quot;%@&quot;, [NSString stringWithUTF8String:errmsg]);            sqlite3_close(encrypted_DB);            return NO;        &#125;        // export database        sqlite3_exec(encrypted_DB, &quot;SELECT sqlcipher_export(&#39;plaintext&#39;);&quot;, NULL, NULL, &amp;errmsg);        if (errmsg) &#123;            NSLog(@&quot;%@&quot;, [NSString stringWithUTF8String:errmsg]);            sqlite3_close(encrypted_DB);            return NO;        &#125;        // Detach unencrypted database        sqlite3_exec(encrypted_DB, &quot;DETACH DATABASE plaintext;&quot;, NULL, NULL, &amp;errmsg);        if (errmsg) &#123;            NSLog(@&quot;%@&quot;, [NSString stringWithUTF8String:errmsg]);            sqlite3_close(encrypted_DB);            return NO;        &#125;        sqlite3_close(encrypted_DB);        return YES;    &#125;    else &#123;        sqlite3_close(encrypted_DB);        NSAssert1(NO, @&quot;Failed to open database with message &#39;%s&#39;.&quot;, sqlite3_errmsg(encrypted_DB));        return NO;    &#125;&#125;/** change secretKey for sqlite database */+ (BOOL)changeKey:(NSString *)dbPath originKey:(NSString *)originKey newKey:(NSString *)newKey&#123;    sqlite3 *encrypted_DB;    if (sqlite3_open([dbPath UTF8String], &amp;encrypted_DB) == SQLITE_OK) &#123;        sqlite3_exec(encrypted_DB, [[NSString stringWithFormat:@&quot;PRAGMA key = &#39;%@&#39;;&quot;, originKey] UTF8String], NULL, NULL, NULL);        sqlite3_exec(encrypted_DB, [[NSString stringWithFormat:@&quot;PRAGMA rekey = &#39;%@&#39;;&quot;, newKey] UTF8String], NULL, NULL, NULL);        sqlite3_close(encrypted_DB);        return YES;    &#125;    else &#123;        sqlite3_close(encrypted_DB);        NSAssert1(NO, @&quot;Failed to open database with message &#39;%s&#39;.&quot;, sqlite3_errmsg(encrypted_DB));        return NO;    &#125;&#125;</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SQLCipher使用起来还是很方便的，基本上不需要怎么配置，需要注意的是，尽量不要在操作过程中修改secretKey，否则，可能导致读不了数据，在使用第三方库的时候尽量不去修改源代码，可以通过扩展或继承的方式修改原来的行为，这样第三方库代码可以与官方保持一致，可以跟随官方版本升级，具体代码可以到我的<a href="https://github.com/zhengbomo/sqlcipherDemo">github</a>上下载咯</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cocoachina.com/industry/20140522/8517.html">http://www.cocoachina.com/industry/20140522/8517.html</a></li><li><a href="https://www.zetetic.net/sqlcipher/">https://www.zetetic.net/sqlcipher/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLCipher </tag>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
